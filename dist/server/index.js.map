{
  "version": 3,
  "sources": ["../../server/index.ts", "../../server/utils/static-handler.ts", "../../server/utils/logger.ts", "../../server/routes/debug-routes.js", "../../server/routes.ts", "../../server/terminal-handler-new.ts", "../../shared/schema.ts", "../../server/db.ts", "../../server/storage.ts", "../../server/vite.ts", "../../server/auth.ts", "../../server/digital-ocean.ts", "../../server/paypal.ts", "../../server/bandwidth-billing.ts", "../../server/routes/health.ts", "../../server/vite.js", "../../server/admin/routes.ts", "../../server/routes/github.ts", "../../server/services/github.ts", "../../server/routes/github-webhooks.ts", "../../server/services/app-platform.ts", "../../server/routes/github-debug.ts", "../../server/routes/github-deployments.ts", "../../server/db/schema.ts", "../../server/services/github-api.ts", "../../server/services/digital-ocean.ts", "../../server/routes/app-platform.ts", "../../server/routes/api-debug.ts", "../../server/routes/github-connections.ts", "../../server/utils/env.ts", "../../server/utils/init-db.js"],
  "sourcesContent": ["import express, { type Request, Response, NextFunction } from \"express\";\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { setupStaticServing } from \"./utils/static-handler.js\";\nimport debugRoutes from './routes/debug-routes.js';\n// import { setupSecurityHeaders, inlineFaviconHandler } from './middleware/security.js';\nimport cors from 'cors';\n\n// Define __dirname equivalent for ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Force reload environment variables at startup\ndotenv.config({ override: true });\n\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite } from \"./vite.js\";\nimport { storage } from \"./storage.js\";\nimport { db, pool } from \"./db.js\";\nimport { users } from \"@shared/schema\";\nimport { setupAuth, hashPassword } from \"./auth.js\";\nimport { eq } from \"drizzle-orm\";\nimport { registerAdminRoutes } from \"./admin/routes.js\";\nimport githubRoutes from \"./routes/github.js\";\nimport githubWebhookRoutes from \"./routes/github-webhooks.js\";\nimport githubDebugRoutes from \"./routes/github-debug.js\";\nimport { logger } from \"./utils/logger.js\";\nimport githubDeploymentsRoutes from \"./routes/github-deployments.js\";\nimport appPlatformRoutes from \"./routes/app-platform.js\";\nimport apiDebugRoutes from './routes/api-debug.js';\nimport githubConnectionsRoutes from \"./routes/github-connections.js\";\nimport { loadGitHubCredentials } from './utils/env.js';\nimport { initializeDatabase } from './utils/init-db.js';\n\n// Initialize Express\nconst app = express();\n\n// Basic middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Add security headers and favicon handler early\n// app.use(setupSecurityHeaders);\n// app.use(inlineFaviconHandler);\n\n// Add CORS middleware\napp.use(cors({\n  origin: '*',\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n}));\n\n// Make sure we trust proxies if behind a reverse proxy\napp.set('trust proxy', true);\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      logger.api(\n        \"Request completed\",\n        req.method,\n        path,\n        res.statusCode,\n        duration\n      );\n\n      // Optional: log response body for debugging in development\n      if (process.env.NODE_ENV === \"development\" && capturedJsonResponse) {\n        const responsePreview =\n          JSON.stringify(capturedJsonResponse).length > 100\n            ? JSON.stringify(capturedJsonResponse).substring(0, 97) + \"...\"\n            : JSON.stringify(capturedJsonResponse);\n        logger.debug(`Response: ${responsePreview}`);\n      }\n    }\n  });\n\n  next();\n});\n\n// CORS and cookie domain handling\napp.use((req, res, next) => {\n  // Get the origin from the request headers\n  const origin = req.headers.origin || '';\n\n  // Domain handling for cookies - extended to be more permissive\n  const allowedDomains = [\n    'skyvps360.xyz',\n    'www.skyvps360.xyz',\n    'localhost',\n    req.hostname,\n    // You can add specific additional domains here\n  ];\n\n  // Set CORS headers - more permissive approach\n  const allowOrigin = process.env.NODE_ENV === 'development'\n    ? origin  // Allow any origin in development\n    : allowedDomains.includes(new URL(origin).hostname)\n      ? origin\n      : 'https://skyvps360.xyz';\n\n  res.header('Access-Control-Allow-Origin', allowOrigin);\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    return res.status(200).end();\n  }\n\n  // Trust proxy for secure cookies over HTTPS when behind load balancers\n  app.set('trust proxy', 1);\n  next();\n});\n\n// Helper for importing migration files\nconst importPath = (relativePath) => {\n  const isProduction = process.env.NODE_ENV === 'production';\n  const basePath = isProduction ? './dist' : '.';\n  const resolvedPath = path.join(basePath, relativePath);\n  const fileUrl = new URL(`file://${path.resolve(resolvedPath)}`).href;\n  return fileUrl;\n};\n\n// Create default users and test data\nasync function createTestData() {\n  try {\n    // Check if any admin users exist\n    const admins = await db.select().from(users).where(eq(users.isAdmin, true));\n\n    if (admins.length === 0) {\n      // Create default admin user\n      const admin = await storage.createUser({\n        username: \"admin\",\n        password: await hashPassword(\"admin123\"),\n        isAdmin: true,\n        balance: 10000,\n        apiKey: null\n      });\n      logger.success(\"Created default admin user: admin / admin123\");\n\n      // Create a regular user\n      const user = await storage.createUser({\n        username: \"user\",\n        password: await hashPassword(\"user123\"),\n        isAdmin: false,\n        balance: 5000,\n        apiKey: null\n      });\n      logger.success(\"Created default regular user: user / user123\");\n\n      // Create a test server for the regular user\n      const server = await storage.createServer({\n        userId: user.id,\n        name: \"Test Server\",\n        region: \"tor1\",\n        size: \"s-1vcpu-1gb\",\n        dropletId: \"12345\",\n        status: \"active\",\n        ipAddress: \"192.168.1.1\",\n        ipv6Address: null,\n        specs: {\n          memory: 1024,\n          vcpus: 1,\n          disk: 25\n        },\n        application: null,\n        lastMonitored: new Date(),\n        rootPassword: \"Test123!\"\n      });\n\n      // Create a test support ticket\n      const ticket = await storage.createTicket({\n        userId: user.id,\n        serverId: server.id,\n        subject: \"Help with server configuration\",\n        priority: \"normal\",\n        status: \"open\",\n        originalDropletId: server.dropletId\n      });\n\n      // Add a message to the ticket\n      await storage.createMessage({\n        ticketId: ticket.id,\n        userId: user.id,\n        message: \"I need help configuring my server. Can you assist?\"\n      });\n\n      logger.success(\"Created test data (server and support ticket)\");\n    }\n  } catch (error) {\n    logger.error(\"Error creating test data:\", error);\n  }\n}\n\n// Main application startup\n(async () => {\n  try {\n    // Test database connection first\n    await pool.query('SELECT 1');\n    logger.database(\"Database connection successful\");\n\n    // Initialize database tables or run migrations\n    if (process.env.NODE_ENV === 'production') {\n      await initializeDatabase();\n    } else {\n      try {\n        const migrationsPaths = [\n          'migrations/add-snapshots-table.js',\n          'migrations/add-github-token.js',\n          'migrations/add-deployments-table.js',\n          'migrations/fix-deployments-schema.js'\n        ];\n\n        for (const migrationPath of migrationsPaths) {\n          try {\n            const fullPath = importPath(migrationPath);\n            console.log(`Attempting to import migration from: ${fullPath}`);\n            const { runMigration } = await import(fullPath);\n            const result = await runMigration();\n            if (result) {\n              logger.success(`Migration ${migrationPath} completed successfully`);\n            } else {\n              logger.warning(`Migration ${migrationPath} was not needed or already applied`);\n            }\n          } catch (migrationError) {\n            logger.error(`Error running migration ${migrationPath}:`, migrationError);\n          }\n        }\n      } catch (migrationError) {\n        logger.error(\"Error running migrations:\", migrationError);\n      }\n    }\n\n    // Load GitHub credentials from .env\n    loadGitHubCredentials();\n\n    // Create test data including admin user\n    await createTestData();\n\n    // Set up authentication before routes\n    setupAuth(app, {\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        sameSite: 'lax',\n        domain: process.env.NODE_ENV === 'production' ? '.skyvps360.xyz' : undefined,\n      }\n    });\n\n    // Register admin routes\n    registerAdminRoutes(app);\n\n    // Register main routes\n    const server = await registerRoutes(app);\n\n    // API routes - must come before static serving\n    app.use(\"/api/github\", githubRoutes);\n    app.use(\"/api/github/deployments\", githubDeploymentsRoutes);\n    app.use(\"/api/github/webhooks\", githubWebhookRoutes);\n    app.use(\"/api/github/debug\", githubDebugRoutes);\n    app.use(\"/api/github/connections\", githubConnectionsRoutes);\n    app.use(\"/api/app-platform\", appPlatformRoutes);\n    app.use(\"/api/debug\", apiDebugRoutes);\n\n    // Debug routes in production\n    if (process.env.NODE_ENV === 'production') {\n      app.use('/api/debug-prod', debugRoutes);\n    }\n\n    // GitHub OAuth routes\n    app.use(\"/auth/github\", githubRoutes);\n\n    // Special routes before the catch-all\n    app.get(\"/github-guide\", (req, res) => {\n      try {\n        const indexPath = path.resolve(__dirname, '../dist/client/index.html');\n        if (fs.existsSync(indexPath)) {\n          res.sendFile(indexPath);\n        } else {\n          const devIndexPath = path.resolve(__dirname, '../client/index.html');\n          if (fs.existsSync(devIndexPath)) {\n            res.sendFile(devIndexPath);\n          } else {\n            throw new Error('Could not find index.html');\n          }\n        }\n      } catch (e) {\n        logger.error('Error serving index.html for GitHub guide:', e);\n        res.status(500).send('Internal Server Error: Could not load GitHub guide');\n      }\n    });\n\n    // Health check endpoint\n    app.get('/health', (req, res) => {\n      res.status(200).json({ status: 'ok', environment: process.env.NODE_ENV });\n    });\n\n    // Global error handler\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      logger.error(\"Express error handler:\", err);\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      res.status(status).json({ message });\n    });\n\n    // Environment-specific setup\n    if (app.get(\"env\") === \"development\") {\n      logger.info(\"Starting server in development mode with Vite middleware...\");\n      await setupVite(app, server);\n    } else {\n      // Production mode\n      logger.info(\"Starting server in production mode with static files...\");\n\n      // Remove the explicit root handler and use the complete static serving setup\n      // The setupStaticServing function will handle all static files and SPA routes\n      setupStaticServing(app);\n      logger.info(\"Static file serving configured\");\n    }\n\n    // Start the server\n    const port = process.env.NODE_ENV === 'development' ? 5000 : (process.env.PORT || 8080);\n    logger.server(`Starting server on port ${port}, NODE_ENV: ${process.env.NODE_ENV}`);\n\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      logger.success(`Server running on port ${port} and accessible from all network interfaces`);\n    });\n  } catch (error) {\n    logger.error(\"Application startup error:\", error);\n    process.exit(1);\n  }\n})();", "import fs from 'fs';\nimport path from 'path';\nimport express, { Express } from 'express';\nimport { logger } from './logger.js';\n\n/**\n * Sets up static file serving for production environment\n */\nexport function setupStaticServing(app: Express): void {\n  const clientPath = path.join(process.cwd(), 'dist', 'client');\n\n  // Check if client path exists\n  if (!fs.existsSync(clientPath)) {\n    logger.error(`Client path not found: ${clientPath}`);\n    throw new Error('Client path not found');\n  }\n\n  logger.info(`Serving static files from: ${clientPath}`);\n\n  // Serve static files with appropriate cache settings\n  app.use(express.static(clientPath, {\n    maxAge: '1d',\n    index: false // Disable auto-index to handle SPA routing manually\n  }));\n\n  // This catch-all route must be defined AFTER all API routes\n  // but before the 404 handler\n  app.get('*', (req, res) => {\n    // Skip API routes - they should be handled by their own handlers\n    if (req.path.startsWith('/api/')) {\n      return res.status(404).json({ message: 'API endpoint not found' });\n    }\n\n    logger.info(`SPA route handler: ${req.path}`);\n    const indexPath = path.join(clientPath, 'index.html');\n\n    if (fs.existsSync(indexPath)) {\n      res.sendFile(indexPath);\n    } else {\n      logger.error(`index.html not found at ${indexPath}`);\n      res.status(500).send('Server Error: index.html not found');\n    }\n  });\n}\n", "/**\n * Enhanced logger with colors and formatting\n */\n\n// ANSI color codes\nconst colors = {\n  reset: \"\\x1b[0m\",\n  bright: \"\\x1b[1m\",\n  dim: \"\\x1b[2m\",\n  underscore: \"\\x1b[4m\",\n  blink: \"\\x1b[5m\",\n  reverse: \"\\x1b[7m\",\n  hidden: \"\\x1b[8m\",\n\n  // Text colors\n  black: \"\\x1b[30m\",\n  red: \"\\x1b[31m\",\n  green: \"\\x1b[32m\",\n  yellow: \"\\x1b[33m\",\n  blue: \"\\x1b[34m\",\n  magenta: \"\\x1b[35m\",\n  cyan: \"\\x1b[36m\",\n  white: \"\\x1b[37m\",\n\n  // Background colors\n  bgBlack: \"\\x1b[40m\",\n  bgRed: \"\\x1b[41m\",\n  bgGreen: \"\\x1b[42m\",\n  bgYellow: \"\\x1b[43m\",\n  bgBlue: \"\\x1b[44m\",\n  bgMagenta: \"\\x1b[45m\",\n  bgCyan: \"\\x1b[46m\",\n  bgWhite: \"\\x1b[47m\"\n};\n\n// Icons for different log types\nconst icons = {\n  info: \"\u2139\uFE0F\",\n  success: \"\u2705\",\n  warning: \"\u26A0\uFE0F\",\n  error: \"\u274C\",\n  debug: \"\uD83D\uDD0D\",\n  database: \"\uD83D\uDDC4\uFE0F\",\n  server: \"\uD83D\uDE80\",\n  github: \"\uD83D\uDC19\",\n  auth: \"\uD83D\uDD10\",\n  api: \"\uD83C\uDF10\"\n};\n\nconst timestamp = () => {\n  const now = new Date();\n  return `${colors.dim}[${now.toLocaleTimeString()}]${colors.reset}`;\n};\n\nexport const logger = {\n  info: (message: string) => {\n    console.log(`${timestamp()} ${icons.info} ${colors.cyan}${message}${colors.reset}`);\n  },\n\n  success: (message: string) => {\n    console.log(`${timestamp()} ${icons.success} ${colors.green}${message}${colors.reset}`);\n  },\n\n  warning: (message: string) => {\n    console.warn(`${timestamp()} ${icons.warning} ${colors.yellow}${message}${colors.reset}`);\n  },\n\n  error: (message: string, error?: any) => {\n    console.error(`${timestamp()} ${icons.error} ${colors.red}${message}${colors.reset}`);\n    if (error) console.error(`${colors.dim}${error.stack || error}${colors.reset}`);\n  },\n\n  debug: (message: string, data?: any) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`${timestamp()} ${icons.debug} ${colors.magenta}${message}${colors.reset}`);\n      if (data) console.log(data);\n    }\n  },\n\n  database: (message: string) => {\n    console.log(`${timestamp()} ${icons.database} ${colors.blue}[DB]${colors.reset} ${message}`);\n  },\n\n  server: (message: string) => {\n    console.log(`${timestamp()} ${icons.server} ${colors.green}[SERVER]${colors.reset} ${message}`);\n  },\n\n  github: (message: string) => {\n    console.log(`${timestamp()} ${icons.github} ${colors.magenta}[GitHub]${colors.reset} ${message}`);\n  },\n\n  auth: (message: string) => {\n    console.log(`${timestamp()} ${icons.auth} ${colors.cyan}[AUTH]${colors.reset} ${message}`);\n  },\n\n  api: (message: string, method: string, path: string, status?: number, duration?: number) => {\n    const statusColor = status && status >= 400 ? colors.red : colors.green;\n    const methodColor = method === 'GET' ? colors.cyan :\n      method === 'POST' ? colors.green :\n        method === 'PUT' ? colors.yellow :\n          method === 'DELETE' ? colors.red :\n            colors.blue;\n\n    console.log(\n      `${timestamp()} ${icons.api} ${methodColor}${method}${colors.reset} ${path} ` +\n      `${status ? `${statusColor}${status}${colors.reset}` : ''} ` +\n      `${duration ? `${colors.yellow}${duration}ms${colors.reset}` : ''}`\n    );\n  }\n};\n\nexport default logger;\n", "import { Router } from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport os from 'os';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst router = Router();\n\n// Path info\nrouter.get('/paths', (req, res) => {\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  const possiblePaths = [\n    path.join(process.cwd(), 'dist', 'client'),\n    path.join(__dirname, '..', '..', 'dist', 'client'),\n    path.join(__dirname, '..', '..', '..', 'dist', 'client'),\n    path.join(process.cwd(), 'client'),\n    path.join(process.cwd()),\n  ];\n\n  const results = possiblePaths.map(p => ({\n    path: p,\n    exists: fs.existsSync(p),\n    files: fs.existsSync(p) ?\n      fs.readdirSync(p).slice(0, 10) :\n      []\n  }));\n\n  const indexPaths = possiblePaths.map(p => ({\n    path: path.join(p, 'index.html'),\n    exists: fs.existsSync(path.join(p, 'index.html')),\n  }));\n\n  // Also check for specific files\n  const staticFiles = [\n    path.join(process.cwd(), 'dist', 'client', 'assets', 'main.js'),\n    path.join(process.cwd(), 'dist', 'client', 'assets', 'main.css'),\n  ];\n\n  const fileChecks = staticFiles.map(f => ({\n    path: f,\n    exists: fs.existsSync(f)\n  }));\n\n  res.json({\n    environment: process.env.NODE_ENV,\n    cwd: process.cwd(),\n    dirname: __dirname,\n    architecture: os.arch(),\n    hostname: os.hostname(),\n    platform: os.platform(),\n    possiblePaths: results,\n    indexFiles: indexPaths,\n    staticFiles: fileChecks\n  });\n});\n\n// Environment variables\nrouter.get('/env', (req, res) => {\n  const safeEnv = { ...process.env };\n\n  // Remove sensitive data\n  delete safeEnv.DATABASE_URL;\n  delete safeEnv.SESSION_SECRET;\n  delete safeEnv.GITHUB_CLIENT_SECRET;\n  delete safeEnv.PAYPAL_SECRET;\n\n  res.json({\n    NODE_ENV: process.env.NODE_ENV,\n    PORT: process.env.PORT,\n    DOMAIN: process.env.DOMAIN,\n    COOKIE_DOMAIN: process.env.COOKIE_DOMAIN,\n    DEBUG_STATIC: process.env.DEBUG_STATIC,\n    SPA_ROUTING: process.env.SPA_ROUTING\n  });\n});\n\n// Server configuration\nrouter.get('/config', (req, res) => {\n  res.json({\n    staticServing: true,\n    trustProxy: true,\n    cookieSecure: process.env.NODE_ENV === 'production',\n    cookieSameSite: 'lax',\n    cookieDomain: process.env.NODE_ENV === 'production' ? '.skyvps360.xyz' : undefined\n  });\n});\n\nexport default router;\n", "import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport type { Server as HttpServer } from \"http\";\nimport { setupTerminalSocket } from \"./terminal-handler-new\";\nimport type { User } from \"@shared/schema\";\nimport { setupAuth, hashPassword, comparePasswords } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { digitalOcean } from \"./digital-ocean\";\nimport * as schema from \"@shared/schema\";\n// CloudRack key manager has been removed\n// System key manager has been removed\nimport { eq, sql, asc } from \"drizzle-orm\";\nimport crypto from \"crypto\";\nimport { db } from \"./db\";\nimport {\n  insertServerSchema,\n  insertVolumeSchema,\n  users,\n  servers,\n  type Server,\n  type IPBan\n} from \"@shared/schema\";\nimport { createSubscription, capturePayment } from \"./paypal\";\nimport { insertTicketSchema, insertMessageSchema, insertIPBanSchema } from \"@shared/schema\";\nimport { getServerBandwidth, calculateBandwidthOverages as calculateBandwidthOveragesNew } from \"./bandwidth-billing\";\nimport healthRoutes from './routes/health.js';\n\n// Cost constants for server and storage pricing\nconst COSTS = {\n  servers: {\n    // Server hourly costs in cents\n    // Monthly rate converted to hourly rate in cents\n    \"s-1vcpu-1gb\": 7, // ~$5/mo \n    \"s-1vcpu-2gb\": 14, // ~$10/mo\n    \"s-2vcpu-4gb\": 28, // ~$20/mo\n    \"s-1vcpu-512mb-10gb\": 3, // ~$2/mo\n    \"s-1vcpu-1gb-25gb\": 7, // ~$5/mo\n    \"s-1vcpu-2gb-50gb\": 14, // ~$10/mo\n    \"s-2vcpu-2gb\": 18, // ~$13/mo\n    \"s-2vcpu-4gb-80gb\": 28, // ~$20/mo\n    \"s-4vcpu-8gb\": 56, // ~$40/mo\n    \"s-4vcpu-8gb-intel\": 63, // Intel premium instances\n    \"s-8vcpu-16gb\": 112, // ~$80/mo\n    \"c-2\": 35, // CPU-optimized instances\n    \"c-4\": 70,\n    \"c-8\": 140,\n    \"g-2vcpu-8gb\": 60, // General purpose instances\n    \"g-4vcpu-16gb\": 120,\n    \"g-8vcpu-32gb\": 240,\n    // Use a default fallback for any other sizes\n    \"default\": 7 // Default to cheapest plan\n  } as Record<string, number>,\n  storage: {\n    baseRate: 0.00014, // Base rate per GB per hour\n    rateWithMargin: 0.00014071, // Final rate per GB per hour\n    maxSize: 10000, // Maximum volume size in GB (10TB)\n  },\n  bandwidth: {\n    // Bandwidth overage rates\n    overage: 0.01005, // Final rate per GB overage\n    // Free tier per server size (how many GB included per month)\n    includedLimit: {\n      \"s-1vcpu-512mb-10gb\": 500, // 500GB free transfer for the smallest droplet\n      \"s-1vcpu-1gb\": 1000, // 1TB free transfer\n      \"s-1vcpu-2gb\": 2000, // 2TB free transfer\n      \"s-2vcpu-2gb\": 3000, // 3TB free transfer\n      \"s-2vcpu-4gb\": 4000, // 4TB free transfer\n      \"s-4vcpu-8gb\": 5000, // 5TB free transfer\n      \"default\": 1000 // Default to 1TB if size not found\n    }\n  }\n};\n\n// Convert dollar amount to cents\nfunction toCents(dollars: number): number {\n  return Math.round(dollars * 100);\n}\n\n// Hourly billing\nasync function deductHourlyServerCosts() {\n  const allServers = await storage.getAllServers();\n\n  for (const server of allServers) {\n    try {\n      const user = await storage.getUser(server.userId);\n      if (!user) {\n        console.error(`User ${server.userId} not found for server ${server.id}, removing server`);\n        await digitalOcean.deleteDroplet(server.dropletId);\n        await storage.deleteServer(server.id);\n        continue;\n      }\n\n      // Calculate the hourly cost based on server size\n      const serverSizeSlug = server.size as keyof typeof COSTS.servers;\n      const hourlyCost = COSTS.servers[serverSizeSlug] || COSTS.servers.default;\n      const costInCents = hourlyCost; // Already in cents\n\n      console.log(`Server ${server.id} (${server.name}): Hourly cost = ${hourlyCost} cents`);\n\n      if (user.balance < costInCents) {\n        console.warn(`Insufficient balance for user ${user.id} (${user.username}). Required: ${costInCents} cents, Available: ${user.balance} cents`);\n        // If user can't pay, delete the server\n        await digitalOcean.deleteDroplet(server.dropletId);\n        await storage.deleteServer(server.id);\n\n        // Notify user about deletion due to insufficient funds\n        await storage.createTransaction({\n          userId: server.userId,\n          amount: 0, // No charge, just a notification\n          currency: \"USD\",\n          status: \"completed\",\n          type: \"server_deleted_insufficient_funds\",\n          paypalTransactionId: null,\n          createdAt: new Date(),\n          description: `Server \"${server.name}\" was deleted due to insufficient funds. Required: ${costInCents / 100} USD.`\n        });\n        continue;\n      }\n\n      // Deduct the hourly server cost\n      await storage.updateUserBalance(server.userId, -costInCents);\n      await storage.createTransaction({\n        userId: server.userId,\n        amount: -costInCents,\n        currency: \"USD\",\n        status: \"completed\",\n        type: \"hourly_server_charge\",\n        paypalTransactionId: null,\n        createdAt: new Date(),\n        description: `Hourly charge for \"${server.name}\" (${server.size})`\n      });\n    } catch (error) {\n      console.error(`Error processing hourly billing for server ${server.id}:`, error);\n    }\n  }\n}\n\n// Hourly volume billing\nasync function deductHourlyVolumeCosts() {\n  // Get all volumes\n  const allServers = await storage.getAllServers();\n\n  for (const server of allServers) {\n    try {\n      // Get volumes for this server\n      const volumes = await storage.getVolumesByServer(server.id);\n\n      if (volumes.length === 0) continue;\n\n      const user = await storage.getUser(server.userId);\n      if (!user) {\n        console.error(`User ${server.userId} not found for server ${server.id} with volumes`);\n        continue;\n      }\n\n      // Calculate total storage cost for all volumes\n      let totalVolumeHourlyCost = 0;\n\n      for (const volume of volumes) {\n        // Calculate hourly cost\n        const volumeHourlyCost = volume.size * COSTS.storage.rateWithMargin;\n        totalVolumeHourlyCost += volumeHourlyCost;\n      }\n\n      // Convert to cents\n      const volumeCostInCents = toCents(totalVolumeHourlyCost);\n\n      if (volumeCostInCents <= 0) continue;\n\n      console.log(`Server ${server.id} (${server.name}): Volume hourly cost = ${volumeCostInCents} cents`);\n\n      if (user.balance < volumeCostInCents) {\n        console.warn(`Insufficient balance for volume charges: User ${user.id} (${user.username}). Required: ${volumeCostInCents} cents, Available: ${user.balance} cents`);\n        // Don't delete volumes, just track the debt\n        continue;\n      }\n\n      // Deduct the hourly storage cost\n      await storage.updateUserBalance(server.userId, -volumeCostInCents);\n      await storage.createTransaction({\n        userId: server.userId,\n        amount: -volumeCostInCents,\n        currency: \"USD\",\n        status: \"completed\",\n        type: \"hourly_volume_charge\",\n        paypalTransactionId: null,\n        createdAt: new Date(),\n        description: `Hourly volume storage charge for \"${server.name}\" (${volumes.reduce((sum, vol) => sum + vol.size, 0)}GB)`\n      });\n    } catch (error) {\n      console.error(`Error processing hourly volume billing for server ${server.id}:`, error);\n    }\n  }\n}\n\n// Monthly bandwidth overage billing\nasync function calculateBandwidthOverages() {\n  // Get all servers\n  const allServers = await storage.getAllServers();\n\n  // Current date used to determine if monthly reset is needed\n  const currentDate = new Date();\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n\n  for (const server of allServers) {\n    try {\n      // Skip servers that don't have metrics\n      if (!server.lastMonitored) continue;\n\n      const user = await storage.getUser(server.userId);\n      if (!user) continue;\n\n      // Get metrics history\n      const metrics = await storage.getServerMetricHistory(server.id, 1000); // Get a large set of metrics\n\n      // Filter metrics for the current month only\n      const currentMonthMetrics = metrics.filter(metric => {\n        const metricDate = new Date(metric.timestamp);\n        return metricDate.getMonth() === currentMonth && metricDate.getFullYear() === currentYear;\n      });\n\n      if (currentMonthMetrics.length === 0) continue;\n\n      // Calculate total bandwidth used this month (in bytes)\n      let totalBandwidthBytes = 0;\n\n      // Take the difference between the first and last measurement\n      for (const metric of currentMonthMetrics) {\n        totalBandwidthBytes += metric.networkOut; // Only count outbound traffic\n      }\n\n      // Convert bytes to GB\n      const totalBandwidthGB = totalBandwidthBytes / (1024 * 1024 * 1024);\n\n      // Determine the free bandwidth limit for this server size\n      const serverSize = server.size as keyof typeof COSTS.bandwidth.includedLimit;\n      const freeBandwidthLimit = COSTS.bandwidth.includedLimit[serverSize] || COSTS.bandwidth.includedLimit.default;\n\n      // Calculate overage in GB\n      const overageGB = Math.max(0, totalBandwidthGB - freeBandwidthLimit);\n\n      if (overageGB <= 0) continue; // No overage\n\n      console.log(`Server ${server.id} (${server.name}): Bandwidth usage = ${totalBandwidthGB.toFixed(2)}GB, Free limit = ${freeBandwidthLimit}GB, Overage = ${overageGB.toFixed(2)}GB`);\n\n      // Calculate bandwidth overage cost\n      const overageCost = overageGB * COSTS.bandwidth.overage;\n      const overageCostInCents = toCents(overageCost);\n\n      if (overageCostInCents <= 0) continue;\n\n      // Check if we already billed for bandwidth this month\n      const existingBandwidthCharges = await db.query.billingTransactions.findMany({\n        where: sql`user_id = ${server.userId} AND type = 'bandwidth_overage' AND created_at >= ${new Date(currentYear, currentMonth, 1).toISOString()} AND description LIKE ${`%${server.name}%`}`\n      });\n\n      if (existingBandwidthCharges.length > 0) {\n        console.log(`Already billed for bandwidth overage this month for server ${server.id}`);\n        continue;\n      }\n\n      // Deduct the bandwidth overage cost\n      await storage.updateUserBalance(server.userId, -overageCostInCents);\n      await storage.createTransaction({\n        userId: server.userId,\n        amount: -overageCostInCents,\n        currency: \"USD\",\n        status: \"completed\",\n        type: \"bandwidth_overage\",\n        paypalTransactionId: null,\n        createdAt: new Date(),\n        description: `Bandwidth overage charge for \"${server.name}\": ${overageGB.toFixed(2)}GB over ${freeBandwidthLimit}GB limit`\n      });\n    } catch (error) {\n      console.error(`Error processing bandwidth overage for server ${server.id}:`, error);\n    }\n  }\n}\n\n// Run billing jobs\nsetInterval(deductHourlyServerCosts, 60 * 60 * 1000); // Every hour\nsetInterval(deductHourlyVolumeCosts, 60 * 60 * 1000); // Every hour\nsetInterval(calculateBandwidthOveragesNew, 24 * 60 * 60 * 1000); // Once a day using new implementation\n\nasync function checkBalance(userId: number, costInDollars: number) {\n  const costInCents = toCents(costInDollars);\n  const user = await storage.getUser(userId);\n  if (!user || user.balance < costInCents) {\n    throw new Error(\"Insufficient balance. Please add funds to your account.\");\n  }\n}\n\n// Admin middleware to check if the user is an admin\nfunction adminMiddleware(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).send();\n  }\n\n  if (!req.user.isAdmin) {\n    return res.status(403).json({ error: \"Access denied. Admin privileges required.\" });\n  }\n\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<HttpServer> {\n  // Emergency admin password reset (temporary route - should be removed in production)\n  // This route is placed before auth middleware to ensure it's accessible without authentication\n  app.post(\"/api/admin/reset-storm-password\", async (req, res) => {\n    try {\n      console.log(\"Attempting to reset admin (storm) password\");\n      // Find the storm user\n      const adminUser = await storage.getUserByUsername(\"storm\");\n\n      if (!adminUser) {\n        console.log(\"Admin user 'storm' not found\");\n        return res.status(404).json({ message: \"Admin user not found\" });\n      }\n\n      // Set a new password with proper hashing\n      const newPassword = \"admin123\";\n      console.log(`Resetting password for user: ${adminUser.username} (ID: ${adminUser.id})`);\n      const hashedPassword = await hashPassword(newPassword);\n\n      // Update the user with the hashed password\n      await storage.updateUser(adminUser.id, { password: hashedPassword });\n      console.log(\"Admin password reset successfully\");\n\n      res.json({\n        message: \"Admin password has been reset successfully\",\n        username: \"storm\",\n        password: newPassword\n      });\n    } catch (error) {\n      console.error(\"Error resetting admin password:\", error);\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  setupAuth(app);\n\n  app.get(\"/api/regions\", async (_req, res) => {\n    const regions = await digitalOcean.getRegions();\n    res.json(regions);\n  });\n\n  app.get(\"/api/sizes\", async (_req, res) => {\n    const sizes = await digitalOcean.getSizes();\n    res.json(sizes);\n  });\n\n  app.get(\"/api/applications\", async (_req, res) => {\n    const applications = await digitalOcean.getApplications();\n    res.json(applications);\n  });\n\n  app.get(\"/api/distributions\", async (_req, res) => {\n    const distributions = await digitalOcean.getDistributions();\n    res.json(distributions);\n  });\n\n  // Admin API routes have been moved to server/admin/routes.ts\n\n  // Add public maintenance route before admin routes\n  app.get(\"/api/maintenance\", async (_req, res) => {\n    try {\n      const [settings] = await db.select().from(schema.maintenanceSettings).limit(1);\n      res.json(settings || {\n        enabled: false,\n        maintenanceMessage: \"We're currently performing maintenance. Please check back soon.\",\n        comingSoonEnabled: false,\n        comingSoonMessage: \"This feature is coming soon. Stay tuned for updates!\"\n      });\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Admin API routes have been moved to server/admin/routes.ts\n\n  // Add maintenance mode routes after existing admin routes \n  app.patch(\"/api/admin/maintenance\", adminMiddleware, async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const parsed = schema.insertMaintenanceSettingsSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json(parsed.error);\n      }\n\n      // Check if settings exist\n      const [existing] = await db.select().from(schema.maintenanceSettings).limit(1);\n\n      if (existing) {\n        // Update existing settings\n        const [updated] = await db\n          .update(schema.maintenanceSettings)\n          .set({\n            ...parsed.data,\n            updatedAt: new Date(),\n            updatedBy: req.user.id\n          })\n          .where(eq(schema.maintenanceSettings.id, existing.id))\n          .returning();\n        res.json(updated);\n      } else {\n        // Create new settings\n        const [settings] = await db\n          .insert(schema.maintenanceSettings)\n          .values({\n            ...parsed.data,\n            updatedBy: req.user.id\n          })\n          .returning();\n        res.json(settings);\n      }\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  app.get(\"/api/servers\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    // If the user is an admin and specifically requests all servers\n    if (req.user.isAdmin && req.query.all === 'true') {\n      const servers = await storage.getAllServers();\n      res.json(servers);\n    } else {\n      // Regular users or admins not requesting all servers only see their own\n      const servers = await storage.getServersByUser(req.user.id);\n      res.json(servers);\n    }\n  });\n\n  app.get(\"/api/servers/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      // Allow access if the user is the owner or an admin\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Verify status for servers showing as \"restoring\"\n      if (server.status === 'restoring') {\n        try {\n          console.log(`[STATUS CHECK] Verifying status of server ${serverId} (DO ID: ${server.dropletId})`);\n\n          // Check actual status from DigitalOcean\n          const dropletDetails = await digitalOcean.apiRequest<{\n            droplet: {\n              id: number;\n              status: string;\n            }\n          }>(\"GET\", `/droplets/${server.dropletId}`);\n\n          if (dropletDetails?.droplet?.status === 'active') {\n            console.log(`[STATUS FIX] Server ${serverId} showing as 'restoring' but DigitalOcean reports 'active' - fixing`);\n            await storage.updateServer(serverId, {\n              status: 'active',\n              lastMonitored: new Date()\n            });\n\n            // Update the server object to be returned\n            server.status = 'active';\n            server.lastMonitored = new Date();\n          }\n        } catch (statusErr) {\n          console.log(`[STATUS CHECK] Error checking DigitalOcean status: ${statusErr}`);\n          // Continue and return current status if check fails\n        }\n      }\n\n      res.json(server);\n\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // API endpoint for testing password update with our fix\n  app.post(\"/api/servers/:id/test-password-fix\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Generate a test password\n      const testPassword = \"TestFix\" + Math.random().toString(36).slice(-6) + \"!\";\n\n      // Update using our new approach\n      await db.update(schema.servers)\n        .set({\n          rootPassword: testPassword,\n          lastMonitored: new Date()\n        })\n        .where(eq(schema.servers.id, serverId));\n\n      // Return the updated server with new password\n      const updatedServer = await db.query.servers.findFirst({\n        where: eq(schema.servers.id, serverId)\n      });\n\n      // Return the new password\n      res.json({\n        message: \"Password updated with test fix\",\n        password: testPassword,\n        passwordFromDB: updatedServer?.rootPassword,\n        serverId: serverId\n      });\n    } catch (error) {\n      res.status(500).json({\n        message: \"Error updating password: \" + (error as Error).message\n      });\n    }\n  });\n\n  app.post(\"/api/servers\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const parsed = insertServerSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json(parsed.error);\n      }\n\n      // Get the hourly cost for this server size with margin included\n      const sizeSlug = parsed.data.size as keyof typeof COSTS.servers;\n      const hourlyCost = (COSTS.servers[sizeSlug] || COSTS.servers.default) / 100; // Convert from cents to dollars\n      const minimumBalance = toCents(hourlyCost); // Require 1h worth of balance in cents\n      await checkBalance(req.user.id, hourlyCost);\n\n      const auth = req.body.auth || {};\n\n      // Generate a strong random password for the server if not provided\n      const rootPassword = auth.type === \"password\" && auth.value\n        ? auth.value\n        : Math.random().toString(36).slice(-10) +\n        Math.random().toString(36).toUpperCase().slice(-2) +\n        Math.random().toString(36).slice(-2) + '!@#$'[Math.floor(Math.random() * 4)];\n\n      // Create the actual droplet via DigitalOcean API\n      let droplet;\n\n      try {\n        console.log(`[DEBUG] Creating droplet with params:\n          name: ${parsed.data.name},\n          region: ${parsed.data.region},\n          size: ${parsed.data.size},\n          application: ${parsed.data.application},\n          password: ${rootPassword ? \"Set (not shown)\" : \"Not set\"}\n        `);\n\n        // Create droplet with password authentication only\n        let createOptions = {\n          name: parsed.data.name,\n          region: parsed.data.region,\n          size: parsed.data.size,\n          application: parsed.data.application,\n          password: rootPassword // Always use password authentication\n        } as any;\n\n        // Try-catch with detailed error handling for server creation\n        try {\n          droplet = await digitalOcean.createDroplet(createOptions);\n          console.log(`[DEBUG] Droplet created successfully with ID: ${droplet.id}`);\n        } catch (doError) {\n          console.error(`[ERROR] DigitalOcean API error during createDroplet:`, doError);\n\n          // Extract and clean up the error message for the user\n          let errorMessage = (doError as Error).message;\n\n          // Check for common error patterns and provide more helpful messages\n          if (errorMessage.includes('422 Unprocessable Entity')) {\n            if (errorMessage.includes('application') || errorMessage.includes('image')) {\n              throw new Error(\n                \"Application not available in this region. Please try selecting a different application or region. \" +\n                \"For maximum compatibility, try using a Base OS option instead of an application.\"\n              );\n            } else if (errorMessage.includes('size')) {\n              throw new Error(\n                \"Selected size not available in this region. Please try a different server size or region.\"\n              );\n            } else if (errorMessage.includes('name')) {\n              throw new Error(\n                \"Invalid server name. Server names must be valid hostnames containing only letters, numbers, hyphens, and periods.\"\n              );\n            }\n          }\n\n          // Fall back to general error message\n          throw new Error(`Failed to create server: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(`[ERROR] Failed to create server with DigitalOcean:`, error);\n        throw error;\n      }\n\n      // Create the server including rootPassword field and mark as active immediately for billing\n      const server = await storage.createServer({\n        ...parsed.data,\n        userId: req.user.id,\n        dropletId: droplet.id,\n        ipAddress: droplet.ip_address,\n        ipv6Address: null,\n        status: \"active\", // Mark as active immediately for proper billing\n        specs: {\n          memory: 1024,\n          vcpus: 1,\n          disk: 25,\n        },\n        application: parsed.data.application || null,\n        lastMonitored: new Date(), // Set lastMonitored to current time\n        rootPassword: \"\", // Include empty string to satisfy type, will update properly next\n        isSuspended: false, // Server is not suspended by default\n        createdAt: new Date(), // Set creation time to current time\n      });\n\n      // Then update the root password directly\n      await db.update(schema.servers)\n        .set({ rootPassword: rootPassword })\n        .where(eq(schema.servers.id, server.id));\n\n      console.log(`Set initial root password for server ${server.id} (password length: ${(auth.type === \"password\" && auth.value ? auth.value : rootPassword).length})`);\n\n\n      // Deduct balance and create transaction\n      await storage.updateUserBalance(req.user.id, -minimumBalance);\n      await storage.createTransaction({\n        userId: req.user.id,\n        amount: -minimumBalance,\n        currency: \"USD\",\n        status: \"completed\",\n        type: \"server_charge\",\n        paypalTransactionId: null,\n        createdAt: new Date(),\n        description: `Initial charge for server: ${parsed.data.name} (${parsed.data.size})`,\n      });\n\n      // Fetch the updated server with the correct password from the database\n      const updatedServerData = await db.query.servers.findFirst({\n        where: eq(schema.servers.id, server.id)\n      });\n\n      // Return both the server and the password that was saved to the database\n      const effectivePassword = auth.type === \"password\" && auth.value ? auth.value : rootPassword;\n      const responseObj = {\n        ...server,\n        rootPassword: effectivePassword\n      };\n      console.log(`[DEBUG] Returning server with root password (masked): ${effectivePassword.substring(0, 3)}***`);\n      res.status(201).json(responseObj);\n    } catch (error) {\n      res.status(400).json({ message: (error as Error).message });\n    }\n  });\n\n  app.delete(\"/api/servers/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    // Delete the server from DigitalOcean\n    try {\n      await digitalOcean.deleteDroplet(server.dropletId);\n    } catch (error) {\n      console.warn(`Failed to delete droplet ${server.dropletId} from DigitalOcean, but proceeding with local deletion:`, error);\n      // Continue with deletion even if the DigitalOcean API call fails\n      // This allows us to clean up orphaned records in our database\n    }\n\n    // Keep the tickets but remove the server association\n    try {\n      const tickets = await storage.getTicketsByServer(server.id);\n      for (const ticket of tickets) {\n        if (ticket.status === 'open') {\n          await storage.updateTicket(ticket.id, { serverId: null });\n        }\n      }\n    } catch (error) {\n      console.error('Error updating tickets:', error);\n      // Continue with deletion even if updating tickets fails\n    }\n\n    // Delete the server from our database\n    await storage.deleteServer(server.id);\n    res.sendStatus(204);\n  });\n\n  app.get(\"/api/servers/:id/volumes\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const volumes = await storage.getVolumesByServer(server.id);\n    res.json(volumes);\n  });\n\n  app.post(\"/api/servers/:id/volumes\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || server.userId !== req.user.id) {\n      return res.sendStatus(404);\n    }\n\n    const parsed = insertVolumeSchema.safeParse(req.body);\n    if (!parsed.success) {\n      return res.status(400).json(parsed.error);\n    }\n\n    // Validate volume size\n    if (!parsed.data.size || parsed.data.size <= 0 || parsed.data.size > COSTS.storage.maxSize) {\n      return res.status(400).json({\n        message: `Volume size must be between 1GB and ${COSTS.storage.maxSize}GB`\n      });\n    }\n\n    // Calculate hourly storage cost\n    const hourlyCost = parsed.data.size * COSTS.storage.rateWithMargin;\n\n    // Check if user has enough balance for at least 1 hour\n    try {\n      await checkBalance(req.user.id, hourlyCost);\n    } catch (error) {\n      return res.status(400).json({\n        message: `Insufficient balance. Required: $${hourlyCost.toFixed(3)} per hour for ${parsed.data.size}GB`\n      });\n    }\n\n    // Create the volume in DigitalOcean with error handling\n    let doVolume;\n    try {\n      doVolume = await digitalOcean.createVolume({\n        name: parsed.data.name,\n        region: server.region,\n        size_gigabytes: parsed.data.size,\n      });\n    } catch (error: any) {\n      return res.status(400).json({\n        message: error.message || \"Failed to create volume in DigitalOcean. Please try again with a different name.\"\n      });\n    }\n\n    // Create the volume in our database\n    const volume = await storage.createVolume({\n      ...parsed.data,\n      userId: req.user.id,\n      serverId: server.id,\n      volumeId: doVolume.id,\n      region: server.region,\n    });\n\n    // Attach the volume to the droplet\n    try {\n      await digitalOcean.attachVolumeToDroplet(\n        doVolume.id,\n        server.dropletId,\n        server.region\n      );\n      console.log(`Volume ${doVolume.id} attached to droplet ${server.dropletId}`);\n    } catch (error) {\n      console.warn(`Failed to attach volume to droplet, but volume was created:`, error);\n      // We'll continue even if attachment fails - user can try again later\n    }\n\n    // Deduct first hour's cost\n    const costInCents = toCents(hourlyCost);\n    await storage.updateUserBalance(req.user.id, -costInCents);\n    await storage.createTransaction({\n      userId: req.user.id,\n      amount: -costInCents,\n      currency: \"USD\",\n      status: \"completed\",\n      type: \"volume_charge\",\n      paypalTransactionId: null,\n      createdAt: new Date(),\n      description: `Initial charge for volume: ${parsed.data.name} (${parsed.data.size}GB)`,\n    });\n\n    res.status(201).json(volume);\n  });\n\n  app.delete(\"/api/servers/:id/volumes/:volumeId\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const volume = await storage.getVolume(parseInt(req.params.volumeId));\n    if (!volume || volume.serverId !== server.id) {\n      return res.sendStatus(404);\n    }\n\n    // First detach the volume before deletion\n    try {\n      await digitalOcean.detachVolumeFromDroplet(\n        volume.volumeId,\n        server.dropletId,\n        server.region\n      );\n      console.log(`Successfully detached volume ${volume.volumeId} from droplet ${server.dropletId}`);\n\n      // Wait a moment to ensure the detachment completes\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Now try to delete the volume\n      await digitalOcean.deleteVolume(volume.volumeId);\n    } catch (error) {\n      console.warn(`Failed to delete volume ${volume.volumeId} from DigitalOcean, but proceeding with local deletion:`, error);\n      // Continue with deletion even if the DigitalOcean API call fails\n    }\n\n    await storage.deleteVolume(volume.id);\n    res.sendStatus(204);\n  });\n\n  app.patch(\"/api/servers/:id/volumes/:volumeId\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const volume = await storage.getVolume(parseInt(req.params.volumeId));\n    if (!volume || volume.serverId !== server.id) {\n      return res.sendStatus(404);\n    }\n\n    const { size } = req.body;\n    if (!size || size <= volume.size) {\n      return res.status(400).json({ message: \"New size must be greater than current size\" });\n    }\n\n    if (size > COSTS.storage.maxSize) {\n      return res.status(400).json({\n        message: `Maximum volume size is ${COSTS.storage.maxSize}GB`\n      });\n    }\n\n    // Calculate additional cost for the new size\n    const newHourlyCost = size * COSTS.storage.rateWithMargin;\n    const currentHourlyCost = volume.size * COSTS.storage.rateWithMargin;\n    const additionalCost = newHourlyCost - currentHourlyCost;\n\n    // Check if user has enough balance for the size increase\n    try {\n      await checkBalance(req.user.id, additionalCost);\n    } catch (error) {\n      return res.status(400).json({\n        message: `Insufficient balance. Additional cost: $${additionalCost.toFixed(3)} per hour for ${size - volume.size}GB increase`\n      });\n    }\n\n    // Update volume size\n    volume.size = size;\n    await storage.updateVolume(volume);\n\n    // Deduct additional cost\n    const costInCents = toCents(additionalCost);\n    await storage.updateUserBalance(req.user.id, -costInCents);\n    await storage.createTransaction({\n      userId: req.user.id,\n      amount: -costInCents,\n      currency: \"USD\",\n      status: \"completed\",\n      type: \"volume_resize_charge\",\n      paypalTransactionId: null,\n      createdAt: new Date(),\n      description: `Volume resize charge: ${volume.name} (${volume.size - (size - volume.size)}GB to ${volume.size}GB)`,\n    });\n\n    res.json(volume);\n  });\n\n  app.post(\"/api/billing/deposit\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const { amount } = req.body;\n    if (!amount || amount < 5) {\n      return res.status(400).json({ message: \"Minimum deposit amount is $5.00\" });\n    }\n\n    try {\n      const order = await createSubscription(amount);\n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ message: (error as Error).message });\n    }\n  });\n\n  app.post(\"/api/billing/capture/:orderId\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const { orderId } = req.params;\n\n    try {\n      const { payment, amount } = await capturePayment(orderId);\n\n      // Add to user's balance\n      const amountInCents = toCents(amount);\n      await storage.updateUserBalance(req.user.id, amountInCents);\n\n      // Create transaction record\n      await storage.createTransaction({\n        userId: req.user.id,\n        amount: amountInCents,\n        currency: \"USD\",\n        status: \"completed\",\n        type: \"deposit\",\n        paypalTransactionId: payment.id,\n        createdAt: new Date(),\n        description: `PayPal deposit of $${amount.toFixed(2)}`,\n      });\n\n      res.json({ success: true, payment });\n    } catch (error) {\n      res.status(400).json({ message: (error as Error).message });\n    }\n  });\n\n  app.get(\"/api/billing/transactions\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    // Parse query parameters for pagination and filtering\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const startDate = req.query.startDate ? new Date(req.query.startDate as string) : null;\n    const endDate = req.query.endDate ? new Date(req.query.endDate as string) : null;\n\n    // Get all transactions for this user\n    const allTransactions = await storage.getTransactionsByUser(req.user.id);\n\n    // Apply date filtering if provided\n    let filteredTransactions = allTransactions;\n    if (startDate || endDate) {\n      filteredTransactions = allTransactions.filter(tx => {\n        const txDate = new Date(tx.createdAt);\n\n        // Check if transaction date is after startDate (if provided)\n        const afterStartDate = startDate ? txDate >= startDate : true;\n\n        // Check if transaction date is before endDate (if provided)\n        const beforeEndDate = endDate ? txDate <= endDate : true;\n\n        return afterStartDate && beforeEndDate;\n      });\n    }\n\n    // Calculate pagination values\n    const totalItems = filteredTransactions.length;\n    const totalPages = Math.ceil(totalItems / limit);\n    const offset = (page - 1) * limit;\n\n    // Get the paginated subset of transactions\n    const paginatedTransactions = filteredTransactions\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()) // Sort by date descending\n      .slice(offset, offset + limit);\n\n    // Return transactions with pagination metadata\n    res.json({\n      transactions: paginatedTransactions,\n      pagination: {\n        total: totalItems,\n        page,\n        limit,\n        totalPages,\n        hasNextPage: page < totalPages,\n        hasPrevPage: page > 1\n      }\n    });\n  });\n\n  // Documentation section and article reordering endpoints\n  app.patch(\"/api/docs/sections/:id/reorder\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.sendStatus(403);\n\n    try {\n      const sectionId = parseInt(req.params.id);\n      const { order } = req.body;\n\n      if (typeof order !== 'number' || order < 1) {\n        return res.status(400).json({ message: \"Invalid order number\" });\n      }\n\n      // Get all sections to check for conflicts\n      const sections = await storage.getAllDocSections();\n      const targetSection = sections.find(s => s.id === sectionId);\n\n      if (!targetSection) {\n        return res.status(404).json({ message: \"Section not found\" });\n      }\n\n      // If another section already has this order number, shift others\n      if (sections.some(s => s.order === order && s.id !== sectionId)) {\n        // Shift all sections with order >= new order up by one\n        for (const section of sections) {\n          if (section.order >= order && section.id !== sectionId) {\n            await storage.updateDocSection(section.id, { order: section.order + 1 });\n          }\n        }\n      }\n\n      const section = await storage.updateDocSection(sectionId, { order });\n      res.json(section);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Add reordering functionality for articles  \n  app.patch(\"/api/docs/articles/:id/reorder\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.sendStatus(403);\n\n    try {\n      const articleId = parseInt(req.params.id);\n      const { order } = req.body;\n\n      if (typeof order !== 'number' || order < 1) {\n        return res.status(400).json({ message: \"Invalid order number\" });\n      }\n\n      // Get the article to find its section\n      const article = await storage.getDocArticle(articleId);\n      if (!article) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Get all articles in the same section\n      const sectionArticles = await storage.getDocArticlesBySection(article.sectionId);\n\n      // If another article in this section has this order, shift others\n      if (sectionArticles.some(a => a.order === order && a.id !== articleId)) {\n        // Shift all articles with order >= new order up by one\n        for (const existingArticle of sectionArticles) {\n          if (existingArticle.order >= order && existingArticle.id !== articleId) {\n            await storage.updateDocArticle(existingArticle.id, { order: existingArticle.order + 1 });\n          }\n        }\n      }\n\n      const updatedArticle = await storage.updateDocArticle(articleId, { order });\n      res.json(updatedArticle);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Get invoice for a specific transaction\n  app.get(\"/api/billing/transactions/:id/invoice\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const transactionId = parseInt(req.params.id);\n\n      // Get all user transactions\n      const userTransactions = await storage.getTransactionsByUser(req.user.id);\n\n      // Find the specific transaction\n      const transaction = userTransactions.find(tx => tx.id === transactionId);\n\n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n\n      // Get transaction description based on type\n      const description =\n        transaction.type === 'deposit' ? 'Funds added to account' :\n          transaction.type === 'server_charge' ? 'Server creation charge' :\n            transaction.type === 'volume_charge' ? 'Volume storage charge' :\n              transaction.type === 'hourly_server_charge' ? 'Hourly server usage' :\n                'Service charge';\n\n      // Format the invoice date\n      const invoiceDate = new Date(transaction.createdAt);\n      const formattedDate = `${invoiceDate.getFullYear()}-${String(invoiceDate.getMonth() + 1).padStart(2, '0')}-${String(invoiceDate.getDate()).padStart(2, '0')}`;\n\n      // Format the invoice number\n      const invoiceNumber = `INV-${transaction.id.toString().padStart(6, '0')}`;\n\n      // Format amount to dollars with 2 decimal places\n      const formattedAmount = (transaction.amount / 100).toFixed(2);\n\n      // Return invoice data\n      res.json({\n        invoice: {\n          invoiceNumber,\n          date: formattedDate,\n          fullDate: transaction.createdAt,\n        },\n        company: {\n          name: \"CloudRack Services\",\n          address: \"123 Server Avenue, Cloud City\",\n          email: \"billing@cloudrack.ca\",\n          website: \"https://cloudrack.ca\"\n        },\n        customer: {\n          id: req.user.id,\n          name: req.user.username,\n        },\n        transaction: {\n          id: transaction.id,\n          type: transaction.type,\n          description,\n          amount: formattedAmount,\n          currency: transaction.currency,\n          status: transaction.status,\n        },\n        // If we had tax information, it would go here\n        tax: {\n          rate: 0,\n          amount: \"0.00\"\n        },\n        // Total would include tax\n        total: formattedAmount\n      });\n\n      // Note: In a real implementation, we would use a library like PDFKit to generate \n      // a PDF invoice and return it with the appropriate content-type header\n\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Support Ticket Routes\n  app.get(\"/api/tickets\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n    const tickets = await storage.getTicketsByUser(req.user.id);\n    res.json(tickets);\n  });\n\n  app.post(\"/api/tickets\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const parsed = insertTicketSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json(parsed.error);\n      }\n\n      // If serverId is provided, check if the server exists and belongs to the user\n      if (parsed.data.serverId) {\n        const server = await storage.getServer(parsed.data.serverId);\n        if (!server || server.userId !== req.user.id) {\n          return res.status(404).json({ message: \"Server not found\" });\n        }\n\n        // Check if user already has an open ticket for this server\n        const existingTickets = await storage.getTicketsByUser(req.user.id);\n        const hasOpenTicket = existingTickets.some(\n          ticket => ticket.serverId === parsed.data.serverId && ticket.status === 'open'\n        );\n\n        if (hasOpenTicket) {\n          return res.status(400).json({\n            message: \"You already have an open ticket for this server\"\n          });\n        }\n\n        // Store the original droplet ID with the ticket\n        const ticket = await storage.createTicket({\n          userId: req.user.id,\n          serverId: parsed.data.serverId,\n          subject: parsed.data.subject,\n          priority: parsed.data.priority, // Now guaranteed to be string due to schema default\n          originalDropletId: server.dropletId,\n          status: 'open'\n        });\n\n        // Create initial message\n        await storage.createMessage({\n          ticketId: ticket.id,\n          userId: req.user.id,\n          message: parsed.data.message,\n        });\n\n        res.status(201).json(ticket);\n      } else {\n        // Create ticket without server association\n        const ticket = await storage.createTicket({\n          userId: req.user.id,\n          subject: parsed.data.subject,\n          priority: parsed.data.priority, // Now guaranteed to be string due to schema default\n          status: 'open',\n          serverId: null,\n          originalDropletId: null\n        });\n\n        await storage.createMessage({\n          ticketId: ticket.id,\n          userId: req.user.id,\n          message: parsed.data.message,\n        });\n\n        res.status(201).json(ticket);\n      }\n    } catch (error) {\n      res.status(400).json({ message: (error as Error).message });\n    }\n  });\n\n  app.get(\"/api/tickets/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const ticket = await storage.getTicket(parseInt(req.params.id));\n    if (!ticket || (ticket.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const messages = await storage.getMessagesByTicket(ticket.id);\n    res.json({ ticket, messages });\n  });\n\n  app.post(\"/api/tickets/:id/messages\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const ticket = await storage.getTicket(parseInt(req.params.id));\n    if (!ticket || (ticket.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const parsed = insertMessageSchema.safeParse(req.body);\n    if (!parsed.success) {\n      return res.status(400).json(parsed.error);\n    }\n\n    const message = await storage.createMessage({\n      ticketId: ticket.id,\n      userId: req.user.id,\n      message: parsed.data.message,\n    });\n\n    // Update ticket's updated_at timestamp\n    if (ticket.status === 'closed') {\n      await storage.updateTicketStatus(ticket.id, 'open');\n    }\n\n    res.status(201).json(message);\n  });\n\n  app.patch(\"/api/tickets/:id/status\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const ticket = await storage.getTicket(parseInt(req.params.id));\n    if (!ticket || (ticket.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const { status } = req.body;\n    if (!status || ![\"open\", \"closed\"].includes(status)) {\n      return res.status(400).json({ message: \"Invalid status\" });\n    }\n\n    const updatedTicket = await storage.updateTicketStatus(ticket.id, status);\n    res.json(updatedTicket);\n  });\n\n  // Add route to delete tickets (admin only)\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    // Check if user is an admin\n    if (!req.user.isAdmin) {\n      return res.status(403).json({ message: \"Only administrators can delete tickets\" });\n    }\n\n    const ticket = await storage.getTicket(parseInt(req.params.id));\n    if (!ticket) {\n      return res.sendStatus(404);\n    }\n\n    // Delete all messages for the ticket first\n    const messages = await storage.getMessagesByTicket(ticket.id);\n    for (const message of messages) {\n      await storage.deleteMessage(message.id);\n    }\n\n    // Then delete the ticket\n    await storage.deleteTicket(ticket.id);\n    res.sendStatus(204);\n  });\n\n  app.patch(\"/api/tickets/:id/messages/:messageId\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const ticket = await storage.getTicket(parseInt(req.params.id));\n    if (!ticket || (ticket.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const messages = await storage.getMessagesByTicket(ticket.id);\n    const message = messages.find(m => m.id === parseInt(req.params.messageId));\n\n    if (!message || (message.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    // Check if message is within 10-minute edit window\n    const createdAt = new Date(message.createdAt);\n    const now = new Date();\n    const diffInMinutes = (now.getTime() - createdAt.getTime()) / (1000 * 60);\n\n    if (diffInMinutes > 10) {\n      return res.status(400).json({ message: \"Message can no longer be edited\" });\n    }\n\n    const { message: newMessage } = req.body;\n    if (!newMessage || typeof newMessage !== \"string\") {\n      return res.status(400).json({ message: \"Invalid message\" });\n    }\n\n    const updatedMessage = await storage.updateMessage(message.id, { message: newMessage });\n    res.json(updatedMessage);\n  });\n\n\n  // Server Action Routes\n  app.post(\"/api/servers/:id/actions/reboot\", async (req, res) => {\n    if (!req.user) {\n      console.log(\"[AUTH ERROR] User not authenticated for server reboot action\");\n      return res.sendStatus(401);\n    }\n\n    const serverId = parseInt(req.params.id);\n    const server = await storage.getServer(serverId);\n\n    if (!server) {\n      console.log(`[SERVER ERROR] Server ${serverId} not found`);\n      return res.status(404).json({ message: \"Server not found\" });\n    }\n\n    if (server.userId !== req.user.id && !req.user.isAdmin) {\n      console.log(`[AUTH ERROR] User ${req.user.id} not authorized for server ${serverId}`);\n      return res.status(403).json({ message: \"Not authorized\" });\n    }\n\n    try {\n      // Call the DigitalOcean client to reboot the droplet\n      await digitalOcean.performDropletAction(server.dropletId, \"reboot\");\n\n      // Update server status with timestamp for better tracking\n      const updatedServer = await storage.updateServer(server.id, {\n        status: \"rebooting\",\n        lastMonitored: new Date()\n      });\n\n      // After a short delay, set the status back to active\n      setTimeout(async () => {\n        try {\n          await storage.updateServer(server.id, {\n            status: \"active\",\n            lastMonitored: new Date()\n          });\n        } catch (error) {\n          console.error(\"Failed to update server status after reboot:\", error);\n        }\n      }, 5000);\n\n      res.json(updatedServer);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  app.post(\"/api/servers/:id/actions/:action\", async (req, res) => {\n    if (!req.user) {\n      console.log(\"[AUTH ERROR] User not authenticated for server action\");\n      return res.sendStatus(401);\n    }\n\n    const serverId = parseInt(req.params.id);\n    const server = await storage.getServer(serverId);\n\n    if (!server) {\n      console.log(`[SERVER ERROR] Server ${serverId} not found`);\n      return res.status(404).json({ message: \"Server not found\" });\n    }\n\n    if (server.userId !== req.user.id && !req.user.isAdmin) {\n      console.log(`[AUTH ERROR] User ${req.user.id} not authorized for server ${serverId}`);\n      return res.status(403).json({ message: \"Not authorized\" });\n    }\n\n    const action = req.params.action;\n    if (action !== \"start\" && action !== \"stop\") {\n      return res.status(400).json({ message: \"Invalid action\" });\n    }\n\n    try {\n      // Determine the DO API action and new status\n      const doAction = action === \"start\" ? \"power_on\" : \"power_off\";\n      const newStatus = action === \"start\" ? \"active\" : \"off\";\n      const transitionStatus = action === \"start\" ? \"starting\" : \"stopping\";\n\n      // Call DigitalOcean API\n      await digitalOcean.performDropletAction(server.dropletId, doAction as any);\n\n      // Update server status to transition state first with timestamp\n      let updatedServer = await storage.updateServer(server.id, {\n        status: transitionStatus,\n        lastMonitored: new Date()\n      });\n\n      // After a short delay, update to final state\n      setTimeout(async () => {\n        try {\n          await storage.updateServer(server.id, {\n            status: newStatus,\n            lastMonitored: new Date()\n          });\n        } catch (error) {\n          console.error(`Failed to update server status after ${action}:`, error);\n        }\n      }, 5000);\n\n      res.json(updatedServer);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  app.patch(\"/api/servers/:id/password\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const serverId = parseInt(req.params.id);\n    const server = await storage.getServer(serverId);\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const { password, digital_ocean_integration, cloudrack_integration } = req.body;\n    if (!password) {\n      return res.status(400).json({ message: \"Password is required\" });\n    }\n\n    try {\n      // Validate password complexity\n      if (password.length < 8) {\n        return res.status(400).json({\n          message: \"Password must be at least 8 characters long\"\n        });\n      }\n\n      // Store the root password in the database\n      const updatedServer = await db.update(schema.servers)\n        .set({\n          rootPassword: password,\n          // Add a timestamp to lastMonitored to indicate when the password was updated\n          lastMonitored: new Date()\n        })\n        .where(eq(schema.servers.id, serverId))\n        .returning();\n\n      // Log the password update - without showing the actual password\n      console.log(`Root password updated for server ${serverId} by user ${req.user.id}`);\n\n      // For CloudRack integration - in a real implementation with the actual CloudRack API,\n      // we would make an API call here to reset the server's root password.\n      // For demonstration purposes, we are just storing it in our database.\n\n      const useCloudRackApi = req.body.cloudrack_integration || req.body.digital_ocean_integration;\n      if (useCloudRackApi) {\n        console.log(`CloudRack integration flag set for password update on server ${serverId}`);\n        // This would be where we'd make the API call to CloudRack\n      }\n\n      res.json({\n        success: true,\n        message: \"Server root password updated successfully\",\n        // Don't return the password in the response for security\n        passwordUpdated: true\n      });\n    } catch (error) {\n      console.error(`Error updating root password for server ${serverId}:`, error);\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Get server details with sensitive information for terminal authentication\n  app.get(\"/api/servers/:id/details\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n\n      // Query the database directly to get extended server information\n      const serverDetails = await db.query.servers.findFirst({\n        where: eq(schema.servers.id, serverId)\n      });\n\n      if (!serverDetails) {\n        return res.status(404).json({ message: \"Server not found\" });\n      }\n\n      // Check if this server belongs to the current user or if the user is an admin\n      if (serverDetails.userId !== req.user.id && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Not authorized to access this server\" });\n      }\n\n      // Get raw server details to ensure password format is preserved properly\n      const rawResult = await db.execute(\n        sql`SELECT * FROM servers WHERE id = ${serverId}`\n      );\n\n      const rawServerDetails = rawResult.rows[0];\n\n      // Use raw SQL results as a fallback if regular query doesn't work\n      const effectivePassword = serverDetails?.rootPassword ||\n        (rawServerDetails as any)?.root_password;\n\n      // Return only the necessary secured details for terminal authentication\n      return res.json({\n        id: serverDetails.id,\n        rootPassword: effectivePassword,\n        rootPassUpdated: !!effectivePassword,\n        rawFormat: !!rawServerDetails ? 'ok' : 'missing'\n      });\n    } catch (error) {\n      console.error('Error getting server details:', error);\n      return res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // SSH connection test endpoint removed - using password-only authentication system\n  // The password set during server creation is used for both SSH and web terminal access\n\n  app.patch(\"/api/servers/:id/ipv6\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    const { enabled } = req.body;\n    if (typeof enabled !== \"boolean\") {\n      return res.status(400).json({ message: \"Enabled status must be a boolean\" });\n    }\n\n    try {\n      let ipv6Address = null;\n\n      // Only need to call the API if enabling IPv6\n      if (enabled) {\n        // Call DigitalOcean API to enable IPv6\n        await digitalOcean.performDropletAction(server.dropletId, \"enable_ipv6\");\n\n        // Wait for IPv6 to be provisioned\n        console.log(`Waiting for IPv6 to be provisioned for server ${server.id}...`);\n\n        // Wait a short time for the IPv6 to be provisioned\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n        // Fetch the current droplet data to get the IPv6 address\n        try {\n          // Define the type for DigitalOcean droplet response\n          interface DigitalOceanDropletResponse {\n            droplet: {\n              id: number;\n              status: string;\n              networks: {\n                v4?: Array<{\n                  ip_address: string;\n                  type: string; // 'public' or 'private'\n                }>;\n                v6?: Array<{\n                  ip_address: string;\n                  type: string;\n                }>;\n              };\n            };\n          }\n\n          console.log(`Fetching droplet details for ${server.dropletId} to get IPv6 address`);\n          const dropletDetails = await digitalOcean.apiRequest<DigitalOceanDropletResponse>(\n            `/droplets/${server.dropletId}`\n          );\n\n          // Check if IPv6 is available\n          if (dropletDetails?.droplet?.networks?.v6 &&\n            dropletDetails.droplet.networks.v6.length > 0) {\n            ipv6Address = dropletDetails.droplet.networks.v6[0].ip_address;\n            console.log(`Found IPv6 address: ${ipv6Address}`);\n          } else {\n            // Fallback to a placeholder if actual address is not yet available\n            console.log('IPv6 not yet available from API, using placeholder');\n            ipv6Address = server.ipv6Address || '2001:db8:85a3:8d3:1319:8a2e:370:7348';\n          }\n        } catch (apiError) {\n          console.error('Error fetching IPv6 address:', apiError);\n          // Still use the IPv6 placeholder if we can't get the actual address\n          ipv6Address = server.ipv6Address || '2001:db8:85a3:8d3:1319:8a2e:370:7348';\n        }\n      }\n\n      // Update the server record with the new IPv6 address (or null)\n      const updatedServer = await storage.updateServer(server.id, { ipv6Address });\n      res.json(updatedServer);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Firewall Management Routes\n  app.get(\"/api/servers/:id/firewall\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    try {\n      // Check for existing firewall\n      let firewall = await digitalOcean.getFirewallByDropletId(server.dropletId);\n\n      // If no firewall exists, return 404 with a clear message\n      // This is handled by the client to display the \"Enable Firewall\" UI\n      if (!firewall) {\n        console.log(`No firewall found for server ${server.id}`);\n        return res.status(404).json({\n          message: \"No firewall found for this server\",\n          code: \"FIREWALL_NOT_FOUND\"\n        });\n      }\n\n      // Return the firewall configuration\n      res.json(firewall);\n    } catch (error) {\n      console.error(\"Error fetching firewall:\", error);\n      res.status(500).json({\n        message: \"Failed to fetch firewall rules\",\n        error: (error as Error).message,\n        code: \"FIREWALL_FETCH_ERROR\"\n      });\n    }\n  });\n\n  // Update firewall rules\n  app.put(\"/api/servers/:id/firewall\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    try {\n      const { inbound_rules, outbound_rules } = req.body;\n      const action = req.query.action as string; // 'disable' or undefined\n\n      // Special case for disabling the firewall\n      if (action === 'disable') {\n        console.log(`Disabling firewall for server ${server.id}`);\n        const firewall = await digitalOcean.getFirewallByDropletId(server.dropletId);\n\n        if (!firewall) {\n          return res.status(404).json({ message: \"No firewall found for this server\" });\n        }\n\n        // Delete the firewall instead of just removing rules\n        try {\n          if (firewall.id) {\n            // Use the updated deleteFirewall method which handles both mock and real firewalls\n            console.log(`Disabling firewall ${firewall.id} for server ${server.id}`);\n            await digitalOcean.deleteFirewall(firewall.id);\n            return res.json({ success: true, message: \"Firewall disabled successfully\" });\n          } else {\n            return res.status(400).json({ message: \"Invalid firewall ID\" });\n          }\n        } catch (error) {\n          console.error(\"Error disabling firewall:\", error);\n\n          // Even if the API call fails, still try to remove it from our records for a better user experience\n          if (firewall.id) {\n            try {\n              // Try once more directly\n              if (digitalOcean.mockFirewalls && digitalOcean.mockFirewalls[firewall.id]) {\n                delete digitalOcean.mockFirewalls[firewall.id];\n                return res.json({ success: true, message: \"Firewall disabled successfully\" });\n              }\n            } catch (e) {\n              console.log(\"Final attempt to remove firewall also failed:\", e);\n            }\n          }\n\n          // Instead of returning error status, return success with a warning\n          // This keeps the UI functioning even if there's a backend issue\n          return res.json({\n            success: true,\n            warning: true,\n            message: \"Firewall may not have been fully disabled, but UI is operational\"\n          });\n        }\n      }\n\n      // Normal rule update\n      if (!Array.isArray(inbound_rules) || !Array.isArray(outbound_rules)) {\n        return res.status(400).json({ message: \"Invalid firewall rules format\" });\n      }\n\n      try {\n        // Get the current firewall or create a default one if it doesn't exist\n        let firewall = await digitalOcean.getFirewallByDropletId(server.dropletId);\n\n        if (firewall) {\n          console.log(`Updating existing firewall ${firewall.id} for server ${server.id}`);\n          // Update existing firewall\n          firewall = await digitalOcean.updateFirewall(firewall.id!, {\n            inbound_rules,\n            outbound_rules\n          });\n        } else {\n          console.log(`No firewall found for server ${server.id}, creating a new empty firewall`);\n          // Create a new firewall with the provided rules\n          const firewallName = `firewall-${server.name}`;\n\n          try {\n            console.log(`Attempting to create firewall ${firewallName} for server ${server.id} with droplet ID ${server.dropletId}`);\n            firewall = await digitalOcean.createFirewall({\n              name: firewallName,\n              droplet_ids: [parseInt(server.dropletId)],\n              inbound_rules: inbound_rules,\n              outbound_rules: outbound_rules\n            });\n            console.log(`Created new firewall ${firewall.id} for server ${server.id}`);\n          } catch (createError) {\n            console.error(`Failed to create firewall for server ${server.id}:`, createError);\n            console.log(`Creating fallback mock firewall for server ${server.id}`);\n\n            // Create a fallback mock firewall\n            const mockFirewallId = `firewall-fallback-${Math.random().toString(36).substring(6)}`;\n            console.log(`Creating mock firewall with ID ${mockFirewallId}`);\n\n            firewall = {\n              id: mockFirewallId,\n              name: `firewall-fallback-${server.name}`,\n              status: 'active',\n              created_at: new Date().toISOString(),\n              droplet_ids: [parseInt(server.dropletId)],\n              inbound_rules: inbound_rules,\n              outbound_rules: outbound_rules\n            };\n\n            // Store it in the digitalOcean client's mock firewalls\n            digitalOcean.mockFirewalls[mockFirewallId] = firewall;\n            console.log(`Created new firewall ${mockFirewallId} for server ${server.id}`);\n          }\n        }\n\n        res.json(firewall);\n      } catch (error) {\n        console.error(\"Error in firewall update process:\", error);\n\n        // Create a mock response with the requested rules\n        const mockFirewall = {\n          id: `mock-${Math.random().toString(36).substring(7)}`,\n          name: `firewall-${server.name}`,\n          status: 'active',\n          created_at: new Date().toISOString(),\n          droplet_ids: [parseInt(server.dropletId)],\n          inbound_rules,\n          outbound_rules\n        };\n\n        console.log(\"Returning mock firewall as fallback\");\n        res.json(mockFirewall);\n      }\n    } catch (error) {\n      console.error(\"Error updating firewall:\", error);\n\n      // Return a mock firewall with requested rules as a last resort\n      const mockFirewall = {\n        id: `mock-fallback-${Math.random().toString(36).substring(7)}`,\n        name: `firewall-${server.name}`,\n        status: 'active',\n        created_at: new Date().toISOString(),\n        droplet_ids: [parseInt(server.dropletId)],\n        inbound_rules: req.body.inbound_rules || [],\n        outbound_rules: req.body.outbound_rules || []\n      };\n\n      console.log(\"Returning mock firewall after error\");\n      res.json(mockFirewall);\n    }\n  });\n\n  // Add a single firewall rule\n  app.post(\"/api/servers/:id/firewall/rules\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    try {\n      const { rule_type, rule } = req.body;\n\n      if (!rule_type || !rule || !['inbound', 'outbound'].includes(rule_type)) {\n        return res.status(400).json({ message: \"Invalid rule format. Specify 'rule_type' as 'inbound' or 'outbound' and provide a valid rule object.\" });\n      }\n\n      // Get the current firewall\n      let firewall = await digitalOcean.getFirewallByDropletId(server.dropletId);\n\n      if (!firewall) {\n        // If no firewall exists, return an error - user needs to enable a firewall first\n        return res.status(400).json({\n          message: \"No firewall exists for this server. Please enable a firewall first before adding rules.\"\n        });\n      }\n\n      // Add the rule\n      try {\n        // Check if we should treat this as a mock firewall\n        const isMockFirewall = firewall.id && (\n          firewall.id.includes('fallback') ||\n          firewall.id.includes('mock') ||\n          digitalOcean.useMock ||\n          firewall.id.length < 30  // Real DO firewall IDs are long UUIDs\n        );\n\n        if (isMockFirewall) {\n          // For mock firewalls, update the rules directly in our records\n          console.log(`Adding ${rule_type} rule to mock firewall ${firewall.id}`);\n          if (rule_type === 'inbound') {\n            firewall.inbound_rules.push(rule);\n          } else {\n            firewall.outbound_rules.push(rule);\n          }\n\n          // Update the stored firewall\n          if (firewall.id) {\n            digitalOcean.mockFirewalls[firewall.id] = firewall;\n          }\n        } else {\n          // For real DO firewalls, use the API\n          if (firewall.id) {\n            console.log(`Attempting to add ${rule_type} rule to real DO firewall ${firewall.id}`);\n            try {\n              if (rule_type === 'inbound') {\n                await digitalOcean.addRulesToFirewall(firewall.id, [rule], []);\n              } else {\n                await digitalOcean.addRulesToFirewall(firewall.id, [], [rule]);\n              }\n            } catch (apiError) {\n              console.error(`DigitalOcean API error: ${apiError}. Falling back to mock mode.`);\n              // If API call fails, treat it as a mock firewall\n              if (rule_type === 'inbound') {\n                firewall.inbound_rules.push(rule);\n              } else {\n                firewall.outbound_rules.push(rule);\n              }\n              // Store it in mock firewalls\n              digitalOcean.mockFirewalls[firewall.id] = firewall;\n            }\n          } else {\n            throw new Error(\"Firewall ID is missing\");\n          }\n        }\n      } catch (error) {\n        console.error(`Error adding rule to firewall: ${error}`);\n\n        // Instead of using mock data, return a clear error\n        console.error(\"Critical error when adding firewall rule:\", error);\n        throw error;\n      }\n\n      // Get the updated firewall\n      const updatedFirewall = await digitalOcean.getFirewallByDropletId(server.dropletId);\n      res.json(updatedFirewall);\n    } catch (error) {\n      console.error(\"Error adding firewall rule:\", error);\n      res.status(500).json({ message: \"Failed to add firewall rule\" });\n    }\n  });\n\n  // Delete a firewall rule\n  app.delete(\"/api/servers/:id/firewall/rules\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const server = await storage.getServer(parseInt(req.params.id));\n    if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n      return res.sendStatus(404);\n    }\n\n    try {\n      const { rule_type, rule } = req.body;\n\n      if (!rule_type || !rule || !['inbound', 'outbound'].includes(rule_type)) {\n        return res.status(400).json({ message: \"Invalid rule format. Specify 'rule_type' as 'inbound' or 'outbound' and provide a valid rule object.\" });\n      }\n      console.log(`Attempting to delete ${rule_type} rule:`, JSON.stringify(rule));\n\n      // Get the current firewall\n      const firewall = await digitalOcean.getFirewallByDropletId(server.dropletId);\n\n      if (!firewall) {\n        // If no firewall exists, we don't need to delete anything\n        console.log(`No firewall found for server ${server.id} when trying to delete rule`);\n        return res.status(404).json({ message: \"No firewall found for this server\" });\n      }\n      console.log(`Found firewall ${firewall.id} with ${firewall.inbound_rules.length} inbound and ${firewall.outbound_rules.length} outbound rules`);\n\n      // For now, we'll work around the Digital Ocean API limitation by replacing the entire rule set\n      // This is more reliable than trying to delete individual rules which can be problematic\n      try {\n        // Create new arrays excluding the rule we want to delete\n        const updatedInboundRules = rule_type === 'inbound'\n          ? firewall.inbound_rules.filter(r =>\n            !(r.protocol === rule.protocol &&\n              r.ports === rule.ports &&\n              JSON.stringify(r.sources) === JSON.stringify(rule.sources)))\n          : firewall.inbound_rules;\n\n        const updatedOutboundRules = rule_type === 'outbound'\n          ? firewall.outbound_rules.filter(r =>\n            !(r.protocol === rule.protocol &&\n              r.ports === rule.ports &&\n              JSON.stringify(r.destinations) === JSON.stringify(rule.destinations)))\n          : firewall.outbound_rules;\n\n        // Check if we should treat this as a mock firewall\n        const isMockFirewall = firewall.id && (\n          firewall.id.includes('fallback') ||\n          firewall.id.includes('mock') ||\n          digitalOcean.useMock ||\n          firewall.id.length < 30  // Real DO firewall IDs are long UUIDs\n        );\n\n        // Always use the DigitalOcean API directly - no mock fallback\n        if (!firewall.id) {\n          throw new Error(\"Firewall ID is missing\");\n        }\n\n        try {\n          // Make the API request to update the firewall\n          console.log(`Updating firewall ${firewall.id} with DigitalOcean API`);\n          const updatedFirewall = await digitalOcean.updateFirewall(\n            firewall.id,\n            {\n              inbound_rules: updatedInboundRules,\n              outbound_rules: updatedOutboundRules\n            }\n          );\n\n          res.json(updatedFirewall);\n        } catch (apiError) {\n          console.error(`DigitalOcean API error removing rule: ${apiError}`);\n          throw apiError; // Re-throw to be caught by the outer catch block\n        }\n      } catch (updateError) {\n        console.error(\"Error updating firewall rules:\", updateError);\n\n        // No mock fallback - properly handle the error\n        res.status(500).json({\n          message: \"Failed to update firewall rules\",\n          error: (updateError as Error).message\n        });\n      }\n    } catch (error) {\n      console.error(\"Error deleting firewall rule:\", error);\n      res.status(500).json({ message: \"Failed to delete firewall rule\" });\n    }\n  });\n\n  // SSH Key Routes - Removed as part of password-only authentication system\n  // All SSH key functionality has been removed in favor of password-only authentication\n\n  // Password-only authentication system\n  // The password set during server creation is used for both SSH and web terminal access\n\n  // CloudRack key management endpoint removed - using password authentication only\n\n  // System key endpoints removed - using password authentication only\n\n  // System key management endpoint removed - using password authentication only\n\n  // Account Update Route\n  app.patch(\"/api/account\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const { username, currentPassword, newPassword } = req.body;\n    if (!username || !currentPassword) {\n      return res.status(400).json({ message: \"Username and current password are required\" });\n    }\n\n    try {\n      // Get the current user to verify the password\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isPasswordValid = await comparePasswords(currentPassword, currentUser.password);\n      if (!isPasswordValid) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Validate new password if provided\n      if (newPassword && newPassword.length < 6) {\n        return res.status(400).json({ message: \"New password must be at least 6 characters long\" });\n      }\n\n      // Prepare updates\n      const updates: Partial<User> = { username };\n\n      // Check if we need to upgrade the password format\n      if (!newPassword && !currentUser.password.includes('.')) {\n        console.log(`Upgrading password format for user ${currentUser.id} during account update`);\n        try {\n          updates.password = await hashPassword(currentPassword);\n        } catch (error) {\n          console.error(\"Error upgrading password format:\", error);\n          // Continue with other updates even if password upgrade fails\n        }\n      }\n\n      // Hash new password if provided\n      if (newPassword) {\n        try {\n          updates.password = await hashPassword(newPassword);\n        } catch (error) {\n          console.error(\"Error hashing new password:\", error);\n          return res.status(500).json({ message: \"Error updating password. Please try again.\" });\n        }\n      }\n\n      // Update user\n      try {\n        const user = await storage.updateUser(req.user.id, updates);\n\n        // Log the user out if the password was changed\n        if (newPassword) {\n          req.logout((err) => {\n            if (err) {\n              console.error(\"Error logging out after password change:\", err);\n              return res.status(500).json({ message: \"Error during logout process. Please log out manually.\" });\n            }\n            // Return success with a flag indicating logout happened\n            res.json({\n              username: user.username,\n              passwordChanged: true\n            });\n          });\n        } else {\n          // Return success without logout\n          res.json({\n            username: user.username,\n            passwordChanged: false\n          });\n        }\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n        return res.status(500).json({ message: \"Error updating account. Please try again.\" });\n      }\n    } catch (error) {\n      console.error(\"Account update error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"An unexpected error occurred\" });\n    }\n  });\n\n  // API Key Management Routes\n  // Get current API key\n  app.get(\"/api/account/api-key\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ apiKey: user.apiKey });\n    } catch (error) {\n      console.error(\"Error fetching API key:\", error);\n      res.status(500).json({ message: \"Failed to fetch API key\" });\n    }\n  });\n\n  // Generate or regenerate API key\n  app.post(\"/api/account/api-key\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const { password } = req.body;\n    if (!password) {\n      return res.status(400).json({ message: \"Password is required for verification\" });\n    }\n\n    try {\n      // Get the current user to verify the password\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify password\n      const isPasswordValid = await comparePasswords(password, currentUser.password);\n      if (!isPasswordValid) {\n        return res.status(400).json({ message: \"Password is incorrect\" });\n      }\n\n      // Generate a new API key (random string)\n      const apiKey = Array.from(\n        { length: 64 },\n        () => Math.floor(Math.random() * 16).toString(16)\n      ).join('');\n\n      // Update user with new API key\n      const updatedUser = await storage.updateUser(req.user.id, { apiKey });\n\n      res.json({\n        apiKey: updatedUser.apiKey,\n        message: \"API key generated successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error generating API key:\", error);\n      res.status(500).json({ message: \"Failed to generate API key\" });\n    }\n  });\n\n  // Server Metrics Routes\n  // Get the latest metrics for a server\n  app.get(\"/api/servers/:id/metrics/latest\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Get the latest metric from the database\n      const latestMetric = await storage.getLatestServerMetric(serverId);\n\n      if (!latestMetric) {\n        // If no metrics exist, fetch from DigitalOcean and create a new one\n        const doMetrics = await digitalOcean.getServerMetrics(server.dropletId);\n\n        // Convert to our metric format\n        const newMetric = {\n          serverId,\n          cpuUsage: Math.round(doMetrics.cpu),\n          memoryUsage: Math.round(doMetrics.memory),\n          diskUsage: Math.round(doMetrics.disk),\n          networkIn: doMetrics.network_in,\n          networkOut: doMetrics.network_out,\n          loadAverage: doMetrics.load_average,\n          uptimeSeconds: doMetrics.uptime_seconds,\n          timestamp: new Date()\n        };\n\n        // Store the metric\n        const savedMetric = await storage.createServerMetric(newMetric);\n\n        // Update the server's last monitored timestamp\n        await storage.updateServer(serverId, {\n          lastMonitored: savedMetric.timestamp\n        });\n\n        return res.json(savedMetric);\n      }\n\n      // Check if we need to refresh the metrics (if older than 5 minutes)\n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n      if (latestMetric.timestamp < fiveMinutesAgo) {\n        // Fetch fresh metrics from DigitalOcean\n        const doMetrics = await digitalOcean.getServerMetrics(server.dropletId);\n\n        // Convert to our metric format and save\n        const newMetric = {\n          serverId,\n          cpuUsage: Math.round(doMetrics.cpu),\n          memoryUsage: Math.round(doMetrics.memory),\n          diskUsage: Math.round(doMetrics.disk),\n          networkIn: doMetrics.network_in,\n          networkOut: doMetrics.network_out,\n          loadAverage: doMetrics.load_average,\n          uptimeSeconds: doMetrics.uptime_seconds,\n          timestamp: new Date()\n        };\n\n        // Store the metric\n        const savedMetric = await storage.createServerMetric(newMetric);\n\n        // Update the server's last monitored timestamp\n        await storage.updateServer(serverId, {\n          lastMonitored: savedMetric.timestamp\n        });\n\n        return res.json(savedMetric);\n      }\n\n      // Return the latest metric\n      return res.json(latestMetric);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Get historical metrics for a server\n  app.get(\"/api/servers/:id/metrics/history\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Get limit from query parameters, default to 24\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 24;\n\n      // Get metrics history\n      const metrics = await storage.getServerMetricHistory(serverId, limit);\n\n      return res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Get bandwidth usage for a server\n  app.get(\"/api/servers/:id/bandwidth\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Get bandwidth data using our new system\n      const bandwidthData = await getServerBandwidth(serverId);\n\n      return res.json(bandwidthData);\n    } catch (error) {\n      console.error(`Error getting bandwidth data:`, error);\n      res.status(500).json({\n        message: \"Failed to retrieve bandwidth data\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Get all snapshots for a server\n  app.get(\"/api/servers/:id/snapshots\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Get all snapshots for this server\n      const snapshots = await storage.getSnapshotsByServer(serverId);\n\n      return res.json(snapshots);\n    } catch (error) {\n      console.error(`Error getting server snapshots:`, error);\n      res.status(500).json({\n        message: \"Failed to retrieve server snapshots\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Create a new snapshot for a server\n  app.post(\"/api/servers/:id/snapshots\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Check if user already has 2 snapshots for this server (limit)\n      const existingSnapshots = await storage.getSnapshotsByServer(serverId);\n      if (existingSnapshots.length >= 2) {\n        return res.status(400).json({\n          message: \"Snapshot limit reached. Delete an existing snapshot before creating a new one.\"\n        });\n      }\n\n      const { name } = req.body;\n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        return res.status(400).json({ message: \"Valid snapshot name is required\" });\n      }\n\n      // Create the snapshot in DigitalOcean\n      const snapshotId = await digitalOcean.createDropletSnapshot(server.dropletId, name);\n\n      // Initially set the size to the server disk size, but we'll update this \n      // when we get the actual size from DigitalOcean\n      const initialSizeGb = server.specs?.disk || 25; // Default to 25GB if not specified\n\n      console.log(`Creating snapshot for server ${serverId} with name ${name} and initial size ${initialSizeGb}GB`);\n\n      // Create the snapshot record in our database\n      const newSnapshot = await storage.createSnapshot({\n        userId: server.userId,\n        serverId: serverId,\n        name: name,\n        snapshotId: snapshotId,\n        sizeGb: initialSizeGb,\n        createdAt: new Date(),\n        status: 'creating',\n        description: `Snapshot for server ${server.name}`,\n        expiresAt: null\n      });\n\n      // Schedule a delayed task to update the actual snapshot size from DigitalOcean\n      // We'll do this after 3 seconds to give time for the snapshot to be created\n      setTimeout(async () => {\n        try {\n          console.log(`Fetching actual size for snapshot ${snapshotId}`);\n          const snapshotDetails = await digitalOcean.getSnapshotDetails(snapshotId);\n\n          if (snapshotDetails && snapshotDetails.size_gigabytes) {\n            console.log(`Updating snapshot ${newSnapshot.id} with actual size: ${snapshotDetails.size_gigabytes}GB`);\n            await storage.updateSnapshot(newSnapshot.id, {\n              sizeGb: snapshotDetails.size_gigabytes,\n              status: 'completed'\n            });\n          }\n        } catch (error) {\n          console.error(`Error updating snapshot size:`, error);\n          // We'll still keep the snapshot in the database with the initial size\n        }\n      }, 3000); // 3 second delay\n\n      // Create a billing transaction for the snapshot\n      // Snapshots are billed at $0.06 per GB per month + 0.5% markup\n      const pricePerGbPerMonth = 0.06 * 1.005; // With 0.5% markup\n      const costInDollars = pricePerGbPerMonth * initialSizeGb;\n\n      await storage.createTransaction({\n        userId: server.userId,\n        amount: toCents(costInDollars),\n        type: 'charge',\n        status: 'completed',\n        description: `Snapshot creation: ${name} (${initialSizeGb}GB)`,\n        createdAt: new Date(),\n        currency: 'USD',\n        paypalTransactionId: null\n      });\n\n      // Deduct the cost from user balance\n      await storage.updateUserBalance(server.userId, -toCents(costInDollars));\n\n      return res.status(201).json(newSnapshot);\n    } catch (error) {\n      console.error(`Error creating snapshot:`, error);\n      res.status(500).json({\n        message: \"Failed to create snapshot\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Get a specific snapshot\n  app.get(\"/api/snapshots/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const snapshotId = parseInt(req.params.id);\n      const snapshot = await storage.getSnapshot(snapshotId);\n\n      if (!snapshot || (snapshot.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Get detailed info from DigitalOcean\n      try {\n        const snapshotDetails = await digitalOcean.getSnapshotDetails(snapshot.snapshotId);\n\n        // Update the snapshot size if it's different\n        if (snapshotDetails.size_gigabytes !== snapshot.sizeGb) {\n          await storage.updateSnapshot(snapshot.id, {\n            sizeGb: snapshotDetails.size_gigabytes\n          });\n          snapshot.sizeGb = snapshotDetails.size_gigabytes;\n        }\n\n        return res.json({\n          ...snapshot,\n          details: snapshotDetails\n        });\n      } catch (doError) {\n        console.warn(`Error getting DigitalOcean snapshot details:`, doError);\n        // Return basic info if DO API fails\n        return res.json(snapshot);\n      }\n    } catch (error) {\n      console.error(`Error getting snapshot details:`, error);\n      res.status(500).json({\n        message: \"Failed to retrieve snapshot details\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Delete a snapshot\n  // Delete a snapshot\n  app.delete(\"/api/servers/:id/snapshots/:snapshotId\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const snapshotId = parseInt(req.params.snapshotId);\n\n      console.log(`Processing snapshot deletion request for snapshot ${snapshotId} on server ${serverId}`);\n\n      // First check if server belongs to user\n      const server = await storage.getServer(serverId);\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        console.log(`User ${req.user.id} attempted to delete snapshot ${snapshotId} but doesn't own server ${serverId}`);\n        return res.status(404).json({ message: \"Server not found\" });\n      }\n\n      // Then check if snapshot exists and belongs to this server\n      const snapshot = await storage.getSnapshot(snapshotId);\n      if (!snapshot || snapshot.serverId !== serverId) {\n        console.log(`Snapshot ${snapshotId} not found or doesn't belong to server ${serverId}`);\n        return res.status(404).json({ message: \"Snapshot not found\" });\n      }\n\n      // Delete from DigitalOcean\n      console.log(`Starting snapshot deletion process for snapshot ${snapshotId} (DO ID: ${snapshot.snapshotId})`);\n\n      try {\n        // The digitalOcean.deleteSnapshot method already has mock mode handling\n        await digitalOcean.deleteSnapshot(snapshot.snapshotId);\n        console.log(`Successfully deleted snapshot ${snapshotId} from DigitalOcean`);\n      } catch (doError) {\n        console.warn(`Error deleting DigitalOcean snapshot:`, doError);\n        // Continue with DB deletion even if DO deletion fails\n        if (process.env.NODE_ENV === 'production') {\n          console.error(`Production error deleting snapshot ${snapshotId}: ${doError}`);\n        } else {\n          console.log(`[DEV] Continuing with database deletion despite DigitalOcean API error`);\n        }\n      }\n\n      // Delete from database\n      console.log(`Removing snapshot ${snapshotId} from database`);\n      await storage.deleteSnapshot(snapshotId);\n      console.log(`Successfully removed snapshot ${snapshotId} from database`);\n\n      // We don't refund snapshot costs - they are non-refundable\n\n      return res.status(200).json({ message: \"Snapshot deleted successfully\" });\n    } catch (error) {\n      console.error(`Error deleting snapshot:`, error);\n      res.status(500).json({\n        message: \"Failed to delete snapshot\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Keep the original endpoint for backward compatibility\n  app.delete(\"/api/snapshots/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const snapshotId = parseInt(req.params.id);\n      console.log(`Processing legacy snapshot deletion request for snapshot ${snapshotId}`);\n\n      const snapshot = await storage.getSnapshot(snapshotId);\n\n      if (!snapshot || (snapshot.userId !== req.user.id && !req.user.isAdmin)) {\n        console.log(`User ${req.user.id} attempted to delete snapshot ${snapshotId} but doesn't own it or it doesn't exist`);\n        return res.sendStatus(404);\n      }\n\n      // Delete from DigitalOcean\n      console.log(`Starting legacy snapshot deletion process for snapshot ${snapshotId} (DO ID: ${snapshot.snapshotId})`);\n\n      try {\n        // The digitalOcean.deleteSnapshot method already has mock mode handling\n        await digitalOcean.deleteSnapshot(snapshot.snapshotId);\n        console.log(`Successfully deleted snapshot ${snapshotId} from DigitalOcean (legacy endpoint)`);\n      } catch (doError) {\n        console.warn(`Error deleting DigitalOcean snapshot:`, doError);\n        // Continue with DB deletion even if DO deletion fails\n        if (process.env.NODE_ENV === 'production') {\n          console.error(`Production error deleting snapshot ${snapshotId}: ${doError}`);\n        } else {\n          console.log(`[DEV] Continuing with database deletion despite DigitalOcean API error (legacy endpoint)`);\n        }\n      }\n\n      // Delete from database\n      console.log(`Removing snapshot ${snapshotId} from database (legacy endpoint)`);\n      await storage.deleteSnapshot(snapshotId);\n      console.log(`Successfully removed snapshot ${snapshotId} from database (legacy endpoint)`);\n\n      return res.status(200).json({ message: \"Snapshot deleted successfully\" });\n    } catch (error) {\n      console.error(`Error deleting snapshot:`, error);\n      res.status(500).json({\n        message: \"Failed to delete snapshot\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Restore a server from a snapshot\n  app.post(\"/api/servers/:id/snapshots/:snapshotId/restore\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const snapshotId = parseInt(req.params.snapshotId);\n\n      // First check if server belongs to user\n      const server = await storage.getServer(serverId);\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.status(404).json({ message: \"Server not found\" });\n      }\n\n      // Then check if snapshot exists and belongs to this server\n      const snapshot = await storage.getSnapshot(snapshotId);\n      if (!snapshot || snapshot.serverId !== serverId) {\n        return res.status(404).json({ message: \"Snapshot not found\" });\n      }\n\n      // Verify that the snapshot belongs to the user\n      if (snapshot.userId !== req.user.id && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"You don't have permission to access this snapshot\" });\n      }\n\n      try {\n        // Restore the server from the snapshot\n        if (digitalOcean.useMock) {\n          console.log(`[MOCK] Restoring droplet ${server.dropletId} from snapshot ${snapshot.snapshotId}`);\n          // In mock mode, just immediately update the status\n        } else {\n          // Real mode - call the Digital Ocean API\n          await digitalOcean.restoreDropletFromSnapshot(server.dropletId, snapshot.snapshotId);\n        }\n\n        // Update server status to indicate restore in progress\n        await storage.updateServer(serverId, {\n          status: 'restoring',\n          lastMonitored: new Date()\n        });\n\n        // Set a timeout to automatically check and update the status after the restore\n        setTimeout(async () => {\n          try {\n            const server = await storage.getServer(serverId);\n            if (server && server.status === 'restoring') {\n              // Only update if it's still in 'restoring' state to avoid overwriting other status changes\n              console.log(`Auto-checking restore status for server ${serverId}`);\n              await storage.updateServer(serverId, {\n                status: 'active',\n                lastMonitored: new Date()\n              });\n              console.log(`Server ${serverId} restore status automatically updated to 'active'`);\n            }\n          } catch (error) {\n            console.error(`Error auto-updating restore status for server ${serverId}:`, error);\n          }\n        }, 120000); // 2 minutes should be enough for most restore operations\n      } catch (err) {\n        console.error(`Error during snapshot restore: ${err}`);\n        // Even if Digital Ocean fails, we can simulate success in development\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(`[DEV] Simulating successful snapshot restore despite DO API error`);\n          await storage.updateServer(serverId, {\n            status: 'restoring',\n            lastMonitored: new Date()\n          });\n        } else {\n          throw err; // In production, propagate the error\n        }\n      }\n\n      return res.json({\n        message: \"Server restore initiated successfully\",\n        status: 'restoring'\n      });\n    } catch (error) {\n      console.error(`Error restoring server from snapshot:`, error);\n      res.status(500).json({\n        message: \"Failed to restore server from snapshot\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Force refresh metrics for a server\n  app.post(\"/api/servers/:id/metrics/refresh\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    try {\n      const serverId = parseInt(req.params.id);\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.sendStatus(404);\n      }\n\n      // Fetch fresh server details from DigitalOcean to update IP addresses\n      try {\n        // Define the type for DigitalOcean droplet response\n        interface DigitalOceanDropletResponse {\n          droplet: {\n            id: number;\n            status: string;\n            networks: {\n              v4?: Array<{\n                ip_address: string;\n                type: string; // 'public' or 'private'\n              }>;\n              v6?: Array<{\n                ip_address: string;\n                type: string;\n              }>;\n            };\n          };\n        }\n\n        // Fetch droplet details with proper typing\n        const dropletDetails = await digitalOcean.apiRequest<DigitalOceanDropletResponse>(\n          `/droplets/${server.dropletId}`\n        );\n\n        // Update server with latest IP information if available\n        if (dropletDetails?.droplet && dropletDetails.droplet.networks) {\n          // Create server update data object with proper typing to avoid confusion with Node's http.Server\n          const serverUpdateData = {\n            lastMonitored: new Date()\n          } as {\n            lastMonitored: Date;\n            ipAddress?: string | null;\n            ipv6Address?: string | null;\n            status?: string;\n          };\n\n          // Update IPv4 address\n          if (dropletDetails.droplet.networks.v4 && dropletDetails.droplet.networks.v4.length > 0) {\n            const publicIp = dropletDetails.droplet.networks.v4.find(\n              (network) => network.type === 'public'\n            );\n            if (publicIp) {\n              serverUpdateData.ipAddress = publicIp.ip_address;\n            }\n          }\n\n          // Update IPv6 address\n          if (dropletDetails.droplet.networks.v6 && dropletDetails.droplet.networks.v6.length > 0) {\n            serverUpdateData.ipv6Address = dropletDetails.droplet.networks.v6[0].ip_address;\n          }\n\n          // Update server status directly from DigitalOcean API\n          if (dropletDetails.droplet.status) {\n            // Map DigitalOcean status values to our application's status values\n            let mappedStatus = dropletDetails.droplet.status;\n\n            // Log the actual status from DigitalOcean for debugging\n            console.log(`[STATUS DEBUG] Server ${serverId} DO status: ${dropletDetails.droplet.status}`);\n\n            // Simplify status representation\n            if (mappedStatus === 'active' || mappedStatus === 'running') {\n              serverUpdateData.status = 'active';\n            } else if (mappedStatus === 'new' || mappedStatus === 'off') {\n              serverUpdateData.status = 'off';\n            } else {\n              // Pass through any other statuses as-is\n              serverUpdateData.status = mappedStatus;\n            }\n\n            console.log(`[STATUS DEBUG] Server ${serverId} mapped status: ${serverUpdateData.status}`);\n          }\n\n          await storage.updateServer(serverId, serverUpdateData);\n        }\n      } catch (ipError) {\n        console.error(\"Failed to fetch IP information:\", ipError);\n        // Continue with metrics even if IP update fails\n      }\n\n      // Fetch fresh metrics from DigitalOcean\n      const doMetrics = await digitalOcean.getServerMetrics(server.dropletId);\n\n      // Convert to our metric format and save\n      const newMetric = {\n        serverId,\n        cpuUsage: Math.round(doMetrics.cpu),\n        memoryUsage: Math.round(doMetrics.memory),\n        diskUsage: Math.round(doMetrics.disk),\n        networkIn: doMetrics.network_in,\n        networkOut: doMetrics.network_out,\n        loadAverage: doMetrics.load_average,\n        uptimeSeconds: doMetrics.uptime_seconds,\n        timestamp: new Date()\n      };\n\n      // Store the metric\n      const savedMetric = await storage.createServerMetric(newMetric);\n\n      // Fetch the updated server to return with the metrics\n      const updatedServer = await storage.getServer(serverId);\n\n      return res.json({\n        metric: savedMetric,\n        server: updatedServer\n      });\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Setup the terminal websocket handler\n  setupTerminalSocket(httpServer);\n\n  // TEST ENDPOINT for password authentication validation\n  app.get(\"/api/test/password/:id\", async (req, res) => {\n    if (!req.user) return res.sendStatus(401);\n\n    const serverId = parseInt(req.params.id);\n\n    try {\n      const server = await storage.getServer(serverId);\n\n      if (!server || (server.userId !== req.user.id && !req.user.isAdmin)) {\n        return res.status(404).json({ message: \"Server not found or access denied\" });\n      }\n\n      // Get the raw server data from the database to check password field\n      const serverData = await db.query.servers.findFirst({\n        where: eq(schema.servers.id, serverId)\n      });\n\n      // Return password information for testing\n      const password = serverData?.rootPassword || \"\";\n      res.json({\n        serverId: serverId,\n        hasPassword: !!password,\n        passwordLength: password.length,\n        passwordMasked: password ? `${password.substring(0, 3)}***${password.substring(password.length - 2)}` : null,\n        passwordStorageMethod: \"db.update\",\n        lastUpdated: serverData?.lastMonitored || null\n      });\n    } catch (error) {\n      console.error(\"Error checking password:\", error);\n      res.status(500).json({\n        message: \"Error checking password: \" + (error as Error).message\n      });\n    }\n  });\n\n  // Documentation API Routes\n  app.get(\"/api/docs/sections\", async (_req, res) => {\n    try {\n      // Get all sections with their articles\n      const sections = await db.query.docSections.findMany({\n        orderBy: [asc(schema.docSections.order)]\n      });\n\n      const articles = await db.query.docArticles.findMany({\n        orderBy: [asc(schema.docArticles.order)]\n      });\n\n      // Group articles by section\n      const sectionsWithArticles = sections.map(section => {\n        const sectionArticles = articles.filter(article => article.sectionId === section.id);\n        return {\n          ...section,\n          children: sectionArticles\n        };\n      });\n\n      res.json(sectionsWithArticles);\n    } catch (error) {\n      console.error(\"Error fetching documentation:\", error);\n      res.status(500).json({ message: \"Failed to fetch documentation\" });\n    }\n  });\n\n  app.post(\"/api/docs/sections\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admin access required\" });\n\n    try {\n      const { title, order } = req.body;\n\n      if (!title) {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n\n      // Create new section\n      const section = await db.insert(schema.docSections)\n        .values({\n          title,\n          order: order || 0\n        })\n        .returning();\n\n      res.status(201).json(section[0]);\n    } catch (error) {\n      console.error(\"Error creating section:\", error);\n      res.status(500).json({ message: \"Failed to create section\" });\n    }\n  });\n\n  app.patch(\"/api/docs/sections/:id\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admin access required\" });\n\n    try {\n      const sectionId = parseInt(req.params.id);\n      const { title } = req.body;\n\n      if (!title) {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n\n      // Update section\n      const section = await db.update(schema.docSections)\n        .set({ title })\n        .where(eq(schema.docSections.id, sectionId))\n        .returning();\n\n      if (section.length === 0) {\n        return res.status(404).json({ message: \"Section not found\" });\n      }\n\n      res.json(section[0]);\n    } catch (error) {\n      console.error(\"Error updating section:\", error);\n      res.status(500).json({ message: \"Failed to update section\" });\n    }\n  });\n\n  app.delete(\"/api/docs/sections/:id\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admin access required\" });\n\n    try {\n      const sectionId = parseInt(req.params.id);\n\n      // First delete all articles in this section\n      await db.delete(schema.docArticles)\n        .where(eq(schema.docArticles.sectionId, sectionId));\n\n      // Then delete the section\n      await db.delete(schema.docSections)\n        .where(eq(schema.docSections.id, sectionId));\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting section:\", error);\n      res.status(500).json({ message: \"Failed to delete section\" });\n    }\n  });\n\n  app.post(\"/api/docs/articles\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admin access required\" });\n\n    try {\n      const { sectionId, title, content, order } = req.body;\n\n      if (!sectionId || !title || !content) {\n        return res.status(400).json({ message: \"SectionId, title, and content are required\" });\n      }\n\n      // Create new article\n      const article = await db.insert(schema.docArticles)\n        .values({\n          sectionId: parseInt(sectionId),\n          title,\n          content,\n          order: order || 0,\n          lastUpdated: new Date()\n        })\n        .returning();\n\n      res.status(201).json(article[0]);\n    } catch (error) {\n      console.error(\"Error creating article:\", error);\n      res.status(500).json({ message: \"Failed to create article\" });\n    }\n  });\n\n  app.patch(\"/api/docs/articles/:id\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admin access required\" });\n\n    try {\n      const articleId = parseInt(req.params.id);\n      const { sectionId, title, content } = req.body;\n\n      if (!title || !content) {\n        return res.status(400).json({ message: \"Title and content are required\" });\n      }\n\n      // Update article\n      const updateData: any = {\n        title,\n        content,\n        lastUpdated: new Date()\n      };\n\n      if (sectionId) {\n        updateData.sectionId = parseInt(sectionId);\n      }\n\n      const article = await db.update(schema.docArticles)\n        .set(updateData)\n        .where(eq(schema.docArticles.id, articleId))\n        .returning();\n\n      if (article.length === 0) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      res.json(article[0]);\n    } catch (error) {\n      console.error(\"Error updating article:\", error);\n      res.status(500).json({ message: \"Failed to update article\" });\n    }\n  });\n\n  app.delete(\"/api/docs/articles/:id\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admin access required\" });\n\n    try {\n      const articleId = parseInt(req.params.id);\n\n      await db.delete(schema.docArticles)\n        .where(eq(schema.docArticles.id, articleId));\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting article:\", error);\n      res.status(500).json({ message: \"Failed to delete article\" });\n    }\n  });\n\n  // Add reordering functionality for sections\n  app.patch(\"/api/docs/sections/:id/reorder\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.sendStatus(403);\n\n    try {\n      const sectionId = parseInt(req.params.id);\n      const { order } = req.body;\n\n      if (typeof order !== 'number' || order < 1) {\n        return res.status(400).json({ message: \"Invalid order number\" });\n      }\n\n      const section = await storage.updateDocSection(sectionId, { order });\n      res.json(section);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Add reordering functionality for articles  \n  app.patch(\"/api/docs/articles/:id/reorder\", async (req, res) => {\n    if (!req.user?.isAdmin) return res.sendStatus(403);\n\n    try {\n      const articleId = parseInt(req.params.id);\n      const { order } = req.body;\n\n      if (typeof order !== 'number' || order < 1) {\n        return res.status(400).json({ message: \"Invalid order number\" });\n      }\n\n      const article = await storage.updateDocArticle(articleId, { order });\n      res.json(article);\n    } catch (error) {\n      res.status(500).json({ message: (error as Error).message });\n    }\n  });\n\n  // Add health check route\n  app.use('/api/health', healthRoutes);\n\n  return httpServer;\n}\n", "import { Server } from 'socket.io';\nimport { Server as HttpServer } from 'http';\nimport { Client, ClientChannel, ConnectConfig } from 'ssh2';\nimport { storage } from './storage';\nimport { log } from './vite';\nimport * as http from 'http';\nimport { db } from './db';\nimport { servers } from '@shared/schema';\nimport { eq, sql } from 'drizzle-orm';\n\n// Extend the Server type to include rootPassword\ninterface ExtendedServer {\n  id: number;\n  userId: number;\n  name: string;\n  dropletId: string;\n  region: string;\n  size: string;\n  status: string;\n  ipAddress: string | null;\n  ipv6Address: string | null;\n  specs: { memory: number; vcpus: number; disk: number; } | null;\n  application: string | null;\n  lastMonitored: Date | null;\n  rootPassword?: string;\n}\n\nexport function setupTerminalSocket(server: HttpServer) {\n  const io = new Server(server, {\n    cors: {\n      origin: '*',\n      methods: ['GET', 'POST']\n    }\n  });\n  \n  // Use default namespace for simpler client connection\n  io.on('connection', async (socket) => {\n    const serverId = socket.handshake.query.serverId as string;\n    const userId = socket.handshake.query.userId as string;\n    \n    if (!serverId || !userId) {\n      socket.emit('error', 'Missing server ID or user ID');\n      socket.disconnect();\n      return;\n    }\n    \n    log(`Terminal connection request for server ${serverId} from user ${userId}`, 'terminal');\n    \n    try {\n      // Verify server ownership\n      const server = await storage.getServer(parseInt(serverId)) as unknown as ExtendedServer;\n      if (!server) {\n        socket.emit('error', 'Server not found');\n        socket.disconnect();\n        return;\n      }\n      \n      if (server.userId !== parseInt(userId)) {\n        socket.emit('error', 'Unauthorized access to server');\n        socket.disconnect();\n        return;\n      }\n      \n      if (!server.ipAddress) {\n        socket.emit('error', 'Server IP address not available');\n        socket.disconnect();\n        return;\n      }\n      \n      // Get server details including root password directly from the database\n      // Use raw SQL to ensure we're getting the password\n      const rawResult = await db.execute(\n        sql`SELECT * FROM servers WHERE id = ${parseInt(serverId)}`\n      );\n      \n      // Extract the server details from the raw result\n      const rawServerDetails = rawResult.rows[0];\n      log(`Server ${serverId} raw details: ${JSON.stringify(rawServerDetails)}`, 'terminal');\n      \n      // Also try the regular query approach\n      const serverDetails = await db.query.servers.findFirst({\n        where: eq(servers.id, parseInt(serverId))\n      });\n      \n      if (serverDetails) {\n        log(`Server query from schema - rootPassword: ${serverDetails.rootPassword ? 'present' : 'missing'}`, 'terminal');\n      }\n      \n      // Use raw SQL results as a fallback if regular query doesn't work\n      const effectiveServerDetails = serverDetails?.rootPassword ? serverDetails : rawServerDetails;\n      \n      // Check if we have a password for this server\n      // Since we have both raw SQL results (with snake_case) and schema results (with camelCase)\n      // we need to check both formats\n      const hasRootPassword = !!effectiveServerDetails?.rootPassword || \n                             !!(effectiveServerDetails as any)?.root_password;\n      \n      // Get the actual password value, preferring the schema version if available\n      let rootPasswordValue = effectiveServerDetails?.rootPassword || \n                              (effectiveServerDetails as any)?.root_password;\n                              \n      // Try to clean the password - remove any unwanted characters or fix formatting\n      if (rootPasswordValue) {\n        // Trim any whitespace\n        rootPasswordValue = rootPasswordValue.trim();\n        \n        // Log the cleaned password details\n        log(`Original password: ${rootPasswordValue.substring(0, 3)}... (${rootPasswordValue.length} chars)`, 'terminal');\n        \n        // If the password looks like a hash (contains dots or $ signs) but is not properly formatted,\n        // we need to handle it differently\n        if (rootPasswordValue.includes('.') || (rootPasswordValue.includes('$') && !rootPasswordValue.startsWith('$'))) {\n          log(`Password appears to be in a hashed format, will use with caution`, 'terminal');\n        }\n      }\n      \n      // Debug log the password length if it exists\n      if (hasRootPassword) {\n        log(`Server ${serverId} has root password with length: ${rootPasswordValue?.length}`, 'terminal');\n        log(`First few characters of password: ${rootPasswordValue?.substring(0, 3)}...`, 'terminal');\n      }\n      \n      log(`Server ${serverId} root password status: ${hasRootPassword ? 'Available' : 'Not available'}`, 'terminal');\n      \n      // Create a new SSH client\n      const sshClient = new Client();\n      let sshStream: ClientChannel | null = null;\n      \n      // Notify client of connection attempt\n      socket.emit('status', { \n        status: 'connecting',\n        message: `Connecting to ${server.name} (${server.ipAddress})...`\n      });\n      \n      // Set up SSH client event handlers\n      sshClient.on('ready', () => {\n        log(`SSH connection established for server ${server.id}`, 'terminal');\n        socket.emit('status', { \n          status: 'connected',\n          message: 'Connected using password authentication'\n        });\n        \n        // Create a shell session\n        sshClient.shell((err, stream) => {\n          if (err) {\n            log(`Failed to create shell: ${err.message}`, 'terminal');\n            socket.emit('error', `Failed to create shell: ${err.message}`);\n            socket.disconnect();\n            return;\n          }\n          \n          sshStream = stream;\n          socket.emit('ready');\n          \n          // Forward data from SSH to the client\n          stream.on('data', (data: Buffer) => {\n            socket.emit('data', data.toString('utf-8'));\n          });\n          \n          stream.on('close', () => {\n            log(`SSH stream closed for server ${server.id}`, 'terminal');\n            socket.emit('status', { status: 'disconnected' });\n            sshClient.end();\n          });\n          \n          stream.stderr.on('data', (data: Buffer) => {\n            socket.emit('data', data.toString('utf-8'));\n          });\n        });\n      });\n      \n      sshClient.on('error', (err) => {\n        log(`SSH error for server ${server.id}: ${err.message}`, 'terminal');\n        \n        // Create more user-friendly error messages\n        let userMessage = `SSH error: ${err.message}`;\n        \n        if (err.message.includes('All configured authentication methods failed')) {\n          userMessage = 'Authentication failed. Please check your password settings or reset your server password.';\n        } else if (err.message.includes('connect ETIMEDOUT')) {\n          userMessage = 'Connection timed out. Server may be starting up or behind a firewall.';\n        } else if (err.message.includes('connect ECONNREFUSED')) {\n          userMessage = 'Connection refused. SSH service may not be running on the server.';\n        }\n        \n        socket.emit('error', userMessage);\n        socket.disconnect();\n      });\n      \n      sshClient.on('end', () => {\n        log(`SSH connection ended for server ${server.id}`, 'terminal');\n        socket.emit('status', { status: 'disconnected' });\n      });\n      \n      sshClient.on('close', () => {\n        log(`SSH connection closed for server ${server.id}`, 'terminal');\n        socket.emit('status', { status: 'disconnected' });\n      });\n      \n      // Handle keyboard-interactive authentication\n      sshClient.on('keyboard-interactive', (name, instructions, lang, prompts, finish) => {\n        log(`Keyboard-interactive auth initiated: name=${name}, prompts=${JSON.stringify(prompts)}`, 'terminal');\n        \n        // If it's a password prompt and we have the root password, use it\n        if (prompts.length > 0 && hasRootPassword) {\n          // Log detailed information about the prompt for debugging\n          for (let i = 0; i < prompts.length; i++) {\n            log(`Prompt ${i}: ${prompts[i].prompt}, echo: ${prompts[i].echo}`, 'terminal');\n          }\n          \n          log(`Responding to keyboard-interactive with stored password (${rootPasswordValue?.substring(0, 3)}...)`, 'terminal');\n          \n          // Use the discovered password value from earlier\n          finish([rootPasswordValue]);\n          \n          // Notify the client that we're trying keyboard-interactive authentication\n          socket.emit('status', { \n            status: 'auth_in_progress',\n            message: 'Attempting keyboard-interactive authentication'\n          });\n        } else {\n          // Otherwise inform the user authentication failed\n          log(`Keyboard-interactive auth failed - no password available or no prompts received`, 'terminal');\n          log(`Prompts received: ${prompts.length}`, 'terminal');\n          log(`Password available: ${hasRootPassword}`, 'terminal');\n          socket.emit('error', 'Authentication failed - password required');\n          sshClient.end();\n        }\n      });\n      \n      // Forward data from client to SSH\n      socket.on('data', (data: string) => {\n        if (sshStream) {\n          sshStream.write(data);\n        }\n      });\n      \n      // Handle resize events\n      socket.on('resize', (data: { rows: number, cols: number }) => {\n        if (sshStream) {\n          try {\n            sshStream.setWindow(data.rows, data.cols, data.cols * 8, data.rows * 10);\n          } catch (err) {\n            log(`Terminal resize error: ${err}`, 'terminal');\n          }\n        }\n      });\n      \n      // Handle disconnect\n      socket.on('disconnect', () => {\n        log(`Socket disconnected for server ${server.id}`, 'terminal');\n        if (sshClient) {\n          sshClient.end();\n        }\n      });\n      \n      // Connect to the SSH server using password authentication only\n      try {\n        const config: ConnectConfig = {\n          host: server.ipAddress,\n          port: 22,\n          username: 'root',\n          readyTimeout: 30000, // 30 seconds\n          keepaliveInterval: 10000,\n          tryKeyboard: true, // Enable keyboard-interactive auth\n          debug: (message: string) => {\n            log(`SSH Debug: ${message}`, 'terminal');\n          }\n        };\n        \n        // Check if we have a root password\n        if (hasRootPassword) {\n          // Set the password for direct authentication\n          config.password = rootPasswordValue;\n          \n          // Debug log the password details\n          log(`Connecting to SSH server at ${server.ipAddress} with password auth`, 'terminal');\n          log(`Password being used for SSH auth: ${rootPasswordValue?.substring(0, 3)}... (length: ${rootPasswordValue?.length})`, 'terminal');\n          \n          socket.emit('status', { \n            status: 'auth_in_progress',\n            message: 'Attempting password authentication'\n          });\n        } else {\n          // No root password available - inform the user\n          log(`No root password available for server ${server.id}`, 'terminal');\n          socket.emit('error', 'No root password found for this server. Please reset your server password.');\n          socket.disconnect();\n          return;\n        }\n        \n        // Add debug for hostname verification to avoid common SSH errors\n        config.hostVerifier = () => true;\n        \n        // Connect to the SSH server\n        sshClient.connect(config);\n      } catch (error) {\n        log(`SSH connection failed: ${(error as Error).message}`, 'terminal');\n        socket.emit('error', `Failed to connect: ${(error as Error).message}`);\n        socket.disconnect();\n      }\n    } catch (error) {\n      log(`Terminal setup error: ${(error as Error).message}`, 'terminal');\n      socket.emit('error', `Terminal error: ${(error as Error).message}`);\n      socket.disconnect();\n    }\n  });\n  \n  return io;\n}", "import { pgTable, text, serial, integer, boolean, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  apiKey: text(\"api_key\"),\n  githubToken: text(\"github_token\"), // Added GitHub token field\n  balance: integer(\"balance\").notNull().default(0), // Balance in cents\n  isAdmin: boolean(\"is_admin\").notNull().default(false), // Admin flag\n  isSuspended: boolean(\"is_suspended\").notNull().default(false), // Account suspension flag\n  created: timestamp(\"created\").notNull().defaultNow(),\n  updated: timestamp(\"updated\").notNull().defaultNow(),\n});\n\nexport const servers = pgTable(\"servers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  dropletId: text(\"droplet_id\").notNull(),\n  region: text(\"region\").notNull(),\n  size: text(\"size\").notNull(),\n  status: text(\"status\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  ipv6Address: text(\"ipv6_address\"),\n  specs: jsonb(\"specs\").$type<{\n    memory: number;\n    vcpus: number;\n    disk: number;\n  }>(),\n  application: text(\"application\"), // Added application field\n  lastMonitored: timestamp(\"last_monitored\"),\n  rootPassword: text(\"root_password\"), // Store root password for SSH access\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(), // Server creation timestamp\n  isSuspended: boolean(\"is_suspended\").notNull().default(false), // Account suspension flag\n});\n\n// Server metrics table for monitoring\nexport const serverMetrics = pgTable(\"server_metrics\", {\n  id: serial(\"id\").primaryKey(),\n  serverId: integer(\"server_id\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  cpuUsage: integer(\"cpu_usage\").notNull(), // Percentage: 0-100\n  memoryUsage: integer(\"memory_usage\").notNull(), // Percentage: 0-100\n  diskUsage: integer(\"disk_usage\").notNull(), // Percentage: 0-100\n  networkIn: integer(\"network_in\").notNull(), // Bytes\n  networkOut: integer(\"network_out\").notNull(), // Bytes\n  loadAverage: jsonb(\"load_average\").$type<number[]>().notNull(),\n  uptimeSeconds: integer(\"uptime_seconds\").notNull(),\n});\n\nexport const volumes = pgTable(\"volumes\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  serverId: integer(\"server_id\").notNull(),\n  name: text(\"name\").notNull(),\n  volumeId: text(\"volume_id\").notNull(),\n  size: integer(\"size\").notNull(),\n  region: text(\"region\").notNull(),\n});\n\nexport const billingTransactions = pgTable(\"billing_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  amount: integer(\"amount\").notNull(), // in cents\n  currency: text(\"currency\").notNull(),\n  status: text(\"status\").notNull(), // completed, pending, failed\n  type: text(\"type\").notNull(), // deposit, hourly_server_charge, hourly_volume_charge, bandwidth_overage, server_deleted_insufficient_funds\n  paypalTransactionId: text(\"paypal_transaction_id\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  description: text(\"description\").default(''), // Optional description for the transaction, default empty string\n});\n\n// Updated: Support Tickets with server relation\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  serverId: integer(\"server_id\"), // Optional - allows tickets to persist after server deletion\n  subject: text(\"subject\").notNull(),\n  status: text(\"status\").notNull(), // open, closed, pending\n  priority: text(\"priority\").notNull().default('normal'), // low, normal, high\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  originalDropletId: text(\"original_droplet_id\"), // Store the original droplet ID for reference\n});\n\n// Support Messages with real-time chat support\nexport const supportMessages = pgTable(\"support_messages\", {\n  id: serial(\"id\").primaryKey(),\n  ticketId: integer(\"ticket_id\").notNull(),\n  userId: integer(\"user_id\").notNull(), // sender (can be admin or user)\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  isRead: boolean(\"is_read\").notNull().default(false), // For real-time chat notifications\n});\n\nexport const sshKeys = pgTable(\"ssh_keys\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  publicKey: text(\"public_key\").notNull(),\n  isCloudRackKey: boolean(\"is_cloudrack_key\").notNull().default(false),\n  isSystemKey: boolean(\"is_system_key\").notNull().default(false), // Added for the system key identification\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Add IP ban functionality\nexport const ipBans = pgTable(\"ip_bans\", {\n  id: serial(\"id\").primaryKey(),\n  ipAddress: text(\"ip_address\").notNull().unique(),\n  reason: text(\"reason\"),\n  bannedBy: integer(\"banned_by\").notNull(), // Admin user ID who created the ban\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  expiresAt: timestamp(\"expires_at\"), // Optional expiration date, null means permanent\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\n// Snapshots table for storing server snapshots\nexport const snapshots = pgTable(\"snapshots\", {\n  id: serial(\"id\").primaryKey(),\n  serverId: integer(\"server_id\").notNull(),\n  userId: integer(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  snapshotId: text(\"snapshot_id\").notNull(),\n  sizeGb: integer(\"size_gb\").notNull(), // Size in GB\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"in-progress\"), // in-progress, completed, error\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  expiresAt: timestamp(\"expires_at\"), // Optional expiration date for auto-delete\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  isAdmin: true,\n  isSuspended: true,\n  balance: true,\n  apiKey: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(billingTransactions).pick({\n  userId: true,\n  amount: true,\n  currency: true,\n  status: true,\n  type: true,\n  paypalTransactionId: true,\n  createdAt: true,\n  description: true,\n});\n\nexport const insertServerSchema = createInsertSchema(servers).pick({\n  name: true,\n  region: true,\n  size: true,\n}).extend({\n  application: z.string().optional(),\n});\n\nexport const insertVolumeSchema = createInsertSchema(volumes).pick({\n  name: true,\n  size: true,\n});\n\n// Updated: Support Ticket Schema with server relation\nexport const insertTicketSchema = createInsertSchema(supportTickets).pick({\n  subject: true,\n  priority: true,\n  serverId: true,\n}).extend({\n  message: z.string().min(1, \"Initial message is required\"),\n  priority: z.string().default(\"normal\"),\n  serverId: z.number().optional(),\n});\n\nexport const insertMessageSchema = createInsertSchema(supportMessages).pick({\n  message: true,\n});\n\nexport const insertSSHKeySchema = createInsertSchema(sshKeys).pick({\n  name: true,\n  publicKey: true,\n}).extend({\n  isCloudRackKey: z.boolean().default(false),\n  isSystemKey: z.boolean().default(false),\n});\n\nexport const insertIPBanSchema = createInsertSchema(ipBans).pick({\n  ipAddress: true,\n  reason: true,\n}).extend({\n  expiresAt: z.date().optional(),\n});\n\nexport const insertSnapshotSchema = createInsertSchema(snapshots).pick({\n  serverId: true,\n  name: true,\n  description: true,\n}).extend({\n  expiresAt: z.date().optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Server = typeof servers.$inferSelect;\nexport type ServerMetric = typeof serverMetrics.$inferSelect;\nexport type Volume = typeof volumes.$inferSelect;\nexport type BillingTransaction = typeof billingTransactions.$inferSelect;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type SupportMessage = typeof supportMessages.$inferSelect;\nexport type InsertSSHKey = z.infer<typeof insertSSHKeySchema>;\nexport type SSHKey = typeof sshKeys.$inferSelect;\nexport type InsertIPBan = z.infer<typeof insertIPBanSchema>;\nexport type IPBan = typeof ipBans.$inferSelect;\nexport type InsertSnapshot = z.infer<typeof insertSnapshotSchema>;\nexport type Snapshot = typeof snapshots.$inferSelect;\n\n// Documentation schema\nexport const docSections = pgTable(\"doc_sections\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  order: integer(\"order\").notNull(),\n});\n\nexport const docArticles = pgTable(\"doc_articles\", {\n  id: serial(\"id\").primaryKey(),\n  sectionId: integer(\"section_id\").notNull().references(() => docSections.id, { onDelete: 'cascade' }),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  order: integer(\"order\").notNull(),\n  lastUpdated: timestamp(\"last_updated\").notNull().defaultNow(),\n});\n\n// Insert schemas for documentation\nexport const insertDocSectionSchema = createInsertSchema(docSections).pick({\n  title: true,\n  order: true,\n});\n\n// Maintenance settings table\nexport const maintenanceSettings = pgTable(\"maintenance_settings\", {\n  id: serial(\"id\").primaryKey(),\n  enabled: boolean(\"enabled\").notNull().default(false),\n  maintenanceMessage: text(\"maintenance_message\").default(\"We're currently performing maintenance. Please check back soon.\"),\n  comingSoonEnabled: boolean(\"coming_soon_enabled\").notNull().default(false),\n  comingSoonMessage: text(\"coming_soon_message\").default(\"This feature is coming soon. Stay tuned for updates!\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  updatedBy: integer(\"updated_by\").notNull(), // Admin user ID who last updated settings\n});\n\nexport const insertMaintenanceSettingsSchema = createInsertSchema(maintenanceSettings).pick({\n  enabled: true,\n  maintenanceMessage: true,\n  comingSoonEnabled: true,\n  comingSoonMessage: true,\n  updatedBy: true,\n});\n\nexport const insertDocArticleSchema = createInsertSchema(docArticles).pick({\n  sectionId: true,\n  title: true,\n  content: true,\n  order: true,\n});\n\nexport type DocSection = typeof docSections.$inferSelect;\nexport type DocArticle = typeof docArticles.$inferSelect;\nexport type InsertDocSection = z.infer<typeof insertDocSectionSchema>;\nexport type InsertDocArticle = z.infer<typeof insertDocArticleSchema>;\nexport type MaintenanceSettings = typeof maintenanceSettings.$inferSelect;\nexport type InsertMaintenanceSettings = z.infer<typeof insertMaintenanceSettingsSchema>;", "\nimport pg from 'pg';\nconst { Pool } = pg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nconsole.log(\"NODE_ENV:\", process.env.NODE_ENV);\n\n// Use direct connection without WebSocket\nconsole.log(\"Configuring direct PostgreSQL connection without WebSocket\");\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configure pool with more robust settings for Replit\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  max: 10, // Reduced number of clients to avoid overloading\n  idleTimeoutMillis: 10000, // Shorter idle timeout\n  connectionTimeoutMillis: 10000, // Longer connection timeout\n  ssl: process.env.NODE_ENV === 'development' ? \n    { rejectUnauthorized: true } : \n    { rejectUnauthorized: false },\n  keepAlive: true, // Enable keep-alive to prevent idle connections from being terminated\n  keepAliveInitialDelayMillis: 5000 // Start keep-alive probing after 5 seconds of inactivity\n});\n\n// Handle pool errors\npool.on('error', (err) => {\n  console.error('Database pool error:', err);\n  // Only exit on critical errors\n  if (err.code === 'PROTOCOL_CONNECTION_LOST') {\n    console.error('Database connection was closed.');\n    process.exit(-1);\n  }\n});\n\n// Add connection success logging\npool.on('connect', () => {\n  console.log('Successfully connected to database');\n});\n\nexport const db = drizzle(pool, { schema });\n", "import { users, servers, volumes, billingTransactions, supportTickets, supportMessages, sshKeys, serverMetrics, ipBans, snapshots, docSections, docArticles, type User, type Server, type Volume, type InsertUser, type BillingTransaction, type SupportTicket, type SupportMessage, type SSHKey, type ServerMetric, type IPBan, type InsertIPBan, type Snapshot, type InsertSnapshot, type DocSection, type DocArticle, type InsertDocSection, type InsertDocArticle } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, isNull } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\nimport { sql } from 'drizzle-orm';\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>; // Added for admin dashboard\n  createUser(user: InsertUser): Promise<User>;\n  updateUserBalance(userId: number, amount: number): Promise<User>;\n  updateUser(id: number, updates: Partial<User>): Promise<User>;\n\n  getServer(id: number): Promise<Server | undefined>;\n  getServersByUser(userId: number): Promise<Server[]>;\n  getAllServers(): Promise<Server[]>; // Already exists, confirmed\n  createServer(server: Omit<Server, \"id\">): Promise<Server>;\n  updateServer(id: number, updates: Partial<Server>): Promise<Server>;\n  deleteServer(id: number): Promise<void>;\n\n  getVolume(id: number): Promise<Volume | undefined>;\n  getVolumesByServer(serverId: number): Promise<Volume[]>;\n  getUnattachedVolumes(): Promise<Volume[]>;\n  createVolume(volume: Omit<Volume, \"id\">): Promise<Volume>;\n  deleteVolume(id: number): Promise<void>;\n  updateVolume(volume: Volume): Promise<Volume>;\n\n  // Server metrics methods\n  createServerMetric(metric: Omit<ServerMetric, \"id\">): Promise<ServerMetric>;\n  getLatestServerMetric(serverId: number): Promise<ServerMetric | undefined>;\n  getServerMetricHistory(serverId: number, limit?: number): Promise<ServerMetric[]>;\n\n  createTransaction(transaction: Omit<BillingTransaction, \"id\">): Promise<BillingTransaction>;\n  getTransactionsByUser(userId: number): Promise<BillingTransaction[]>;\n  getAllTransactions(): Promise<BillingTransaction[]>; // Added for admin dashboard\n\n  createTicket(ticket: Omit<SupportTicket, \"id\" | \"createdAt\" | \"updatedAt\">): Promise<SupportTicket>;\n  getTicket(id: number): Promise<SupportTicket | undefined>;\n  getTicketsByUser(userId: number): Promise<SupportTicket[]>;\n  getTicketsByServer(serverId: number): Promise<SupportTicket[]>;\n  getAllTickets(): Promise<SupportTicket[]>;\n  updateTicketStatus(id: number, status: string): Promise<SupportTicket>;\n  updateTicketPriority(id: number, priority: string): Promise<SupportTicket>;\n  updateTicket(id: number, updates: Partial<SupportTicket>): Promise<SupportTicket>;\n  deleteTicket(id: number): Promise<void>;\n\n  createMessage(message: Omit<SupportMessage, \"id\" | \"createdAt\" | \"isRead\">): Promise<SupportMessage>;\n  getMessagesByTicket(ticketId: number): Promise<SupportMessage[]>;\n  updateMessage(id: number, updates: Partial<SupportMessage>): Promise<SupportMessage>;\n  deleteMessage(id: number): Promise<void>;\n\n  getSSHKeysByUser(userId: number): Promise<SSHKey[]>;\n  createSSHKey(key: Omit<SSHKey, \"id\">): Promise<SSHKey>;\n  getSSHKey(id: number): Promise<SSHKey | undefined>;\n  updateSSHKey(id: number, updates: Partial<SSHKey>): Promise<SSHKey>;\n  deleteSSHKey(id: number): Promise<void>;\n\n  // IP Ban functionality\n  getIPBan(ipAddress: string): Promise<IPBan | undefined>;\n  getAllIPBans(): Promise<IPBan[]>;\n  createIPBan(ban: Omit<IPBan, \"id\" | \"createdAt\">): Promise<IPBan>;\n  updateIPBan(id: number, updates: Partial<IPBan>): Promise<IPBan>;\n  deleteIPBan(id: number): Promise<void>;\n\n  // Snapshot functionality\n  getSnapshot(id: number): Promise<Snapshot | undefined>;\n  getSnapshotsByServer(serverId: number): Promise<Snapshot[]>;\n  getSnapshotsByUser(userId: number): Promise<Snapshot[]>;\n  createSnapshot(snapshot: Omit<Snapshot, \"id\">): Promise<Snapshot>;\n  updateSnapshot(id: number, updates: Partial<Snapshot>): Promise<Snapshot>;\n  deleteSnapshot(id: number): Promise<void>;\n\n  // Documentation methods\n  createDocSection(section: InsertDocSection): Promise<DocSection>;\n  getDocSection(id: number): Promise<DocSection | undefined>;\n  getAllDocSections(): Promise<DocSection[]>;\n  updateDocSection(id: number, updates: Partial<DocSection>): Promise<DocSection>;\n  deleteDocSection(id: number): Promise<void>;\n\n  createDocArticle(article: InsertDocArticle): Promise<DocArticle>;\n  getDocArticle(id: number): Promise<DocArticle | undefined>;\n  getDocArticlesBySection(sectionId: number): Promise<DocArticle[]>;\n  getAllDocArticles(): Promise<DocArticle[]>;\n  updateDocArticle(id: number, updates: Partial<DocArticle>): Promise<DocArticle>;\n  deleteDocArticle(id: number): Promise<void>;\n\n  sessionStore: session.Store;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    // Configure session store with more robust settings\n    this.sessionStore = new PostgresSessionStore({\n      pool,\n      createTableIfMissing: true,\n      tableName: 'session', // Specify the table name explicitly\n      schemaName: 'public', // Specify the schema name\n      ttl: 86400, // Session time-to-live in seconds (24 hours)\n      disableTouch: false, // Update expiration on session reads\n      // Error handler for the session store\n      errorLog: (error) => {\n        console.error('Session store error:', error.message);\n      }\n    });\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserBalance(userId: number, amount: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ balance: sql`balance + ${amount}` })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getServer(id: number): Promise<Server | undefined> {\n    const [server] = await db.select().from(servers).where(eq(servers.id, id));\n    return server;\n  }\n\n  async getServersByUser(userId: number): Promise<Server[]> {\n    try {\n      // Use raw SQL query with snake_case column names\n      const query = `SELECT id, user_id, name, droplet_id, region, size, status, ip_address, \n        ipv6_address, specs, application, last_monitored, root_password, is_suspended, created_at\n        FROM servers WHERE user_id = $1`;\n      const result = await pool.query(query, [userId]);\n\n      // Convert snake_case keys to camelCase\n      return result.rows.map(row => ({\n        id: Number(row.id),\n        userId: Number(row.user_id),\n        name: String(row.name),\n        dropletId: String(row.droplet_id),\n        region: String(row.region),\n        size: String(row.size),\n        status: String(row.status),\n        ipAddress: row.ip_address ? String(row.ip_address) : null,\n        ipv6Address: row.ipv6_address ? String(row.ipv6_address) : null,\n        specs: row.specs,\n        application: row.application ? String(row.application) : null,\n        lastMonitored: row.last_monitored ? new Date(row.last_monitored) : null,\n        rootPassword: row.root_password ? String(row.root_password) : null,\n        isSuspended: Boolean(row.is_suspended),\n        createdAt: row.created_at ? new Date(row.created_at) : new Date()\n      }));\n    } catch (error) {\n      console.error(\"Error getting servers by user:\", error);\n      // Return empty array instead of throwing\n      return [];\n    }\n  }\n\n  async createServer(server: Omit<Server, \"id\">): Promise<Server> {\n    const [newServer] = await db.insert(servers).values(server).returning();\n    return newServer;\n  }\n\n  async getAllServers(): Promise<Server[]> {\n    try {\n      // Use raw SQL query with snake_case column names\n      const query = `SELECT id, user_id, name, droplet_id, region, size, status, ip_address, \n        ipv6_address, specs, application, last_monitored, root_password, is_suspended, created_at\n        FROM servers`;\n      const result = await pool.query(query);\n\n      // Convert snake_case keys to camelCase\n      return result.rows.map(row => ({\n        id: Number(row.id),\n        userId: Number(row.user_id),\n        name: String(row.name),\n        dropletId: String(row.droplet_id),\n        region: String(row.region),\n        size: String(row.size),\n        status: String(row.status),\n        ipAddress: row.ip_address ? String(row.ip_address) : null,\n        ipv6Address: row.ipv6_address ? String(row.ipv6_address) : null,\n        specs: row.specs,\n        application: row.application ? String(row.application) : null,\n        lastMonitored: row.last_monitored ? new Date(row.last_monitored) : null,\n        rootPassword: row.root_password ? String(row.root_password) : null,\n        isSuspended: Boolean(row.is_suspended),\n        createdAt: row.created_at ? new Date(row.created_at) : new Date()\n      }));\n    } catch (error) {\n      console.error(\"Error getting all servers:\", error);\n      // Return empty array instead of throwing\n      return [];\n    }\n  }\n\n  async updateServer(id: number, updates: Partial<Server>): Promise<Server> {\n    const [updatedServer] = await db\n      .update(servers)\n      .set(updates)\n      .where(eq(servers.id, id))\n      .returning();\n    return updatedServer;\n  }\n\n  async deleteServer(id: number): Promise<void> {\n    await db.delete(servers).where(eq(servers.id, id));\n  }\n\n  async getVolume(id: number): Promise<Volume | undefined> {\n    const [volume] = await db.select().from(volumes).where(eq(volumes.id, id));\n    return volume;\n  }\n\n  async getVolumesByServer(serverId: number): Promise<Volume[]> {\n    return await db.select().from(volumes).where(eq(volumes.serverId, serverId));\n  }\n\n  async getUnattachedVolumes(): Promise<Volume[]> {\n    return await db.select().from(volumes).where(isNull(volumes.serverId));\n  }\n\n  async createVolume(volume: Omit<Volume, \"id\">): Promise<Volume> {\n    const [newVolume] = await db.insert(volumes).values(volume).returning();\n    return newVolume;\n  }\n\n  async deleteVolume(id: number): Promise<void> {\n    await db.delete(volumes).where(eq(volumes.id, id));\n  }\n\n  async updateVolume(volume: Volume): Promise<Volume> {\n    const [updatedVolume] = await db\n      .update(volumes)\n      .set(volume)\n      .where(eq(volumes.id, volume.id))\n      .returning();\n    return updatedVolume;\n  }\n\n  async createTransaction(transaction: Omit<BillingTransaction, \"id\">): Promise<BillingTransaction> {\n    const [newTransaction] = await db.insert(billingTransactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getTransactionsByUser(userId: number): Promise<BillingTransaction[]> {\n    return await db\n      .select()\n      .from(billingTransactions)\n      .where(eq(billingTransactions.userId, userId))\n      .orderBy(billingTransactions.createdAt);\n  }\n\n  async getAllTransactions(): Promise<BillingTransaction[]> {\n    return await db\n      .select()\n      .from(billingTransactions)\n      .orderBy(desc(billingTransactions.createdAt));\n  }\n\n  async createTicket(ticket: Omit<SupportTicket, \"id\" | \"createdAt\" | \"updatedAt\">): Promise<SupportTicket> {\n    const [newTicket] = await db.insert(supportTickets)\n      .values({\n        ...ticket,\n        status: 'open',\n      })\n      .returning();\n    return newTicket;\n  }\n\n  async getTicket(id: number): Promise<SupportTicket | undefined> {\n    const [ticket] = await db.select().from(supportTickets).where(eq(supportTickets.id, id));\n    return ticket;\n  }\n\n  async getTicketsByUser(userId: number): Promise<SupportTicket[]> {\n    return await db.select()\n      .from(supportTickets)\n      .where(eq(supportTickets.userId, userId))\n      .orderBy(sql`${supportTickets.updatedAt} DESC`);\n  }\n\n  async getTicketsByServer(serverId: number): Promise<SupportTicket[]> {\n    return await db.select()\n      .from(supportTickets)\n      .where(eq(supportTickets.serverId, serverId))\n      .orderBy(sql`${supportTickets.updatedAt} DESC`);\n  }\n\n  async getAllTickets(): Promise<SupportTicket[]> {\n    return await db.select()\n      .from(supportTickets)\n      .orderBy(sql`${supportTickets.updatedAt} DESC`);\n  }\n\n  async updateTicketStatus(id: number, status: string): Promise<SupportTicket> {\n    const [updatedTicket] = await db.update(supportTickets)\n      .set({\n        status,\n        updatedAt: sql`CURRENT_TIMESTAMP`\n      })\n      .where(eq(supportTickets.id, id))\n      .returning();\n    return updatedTicket;\n  }\n\n  async updateTicketPriority(id: number, priority: string): Promise<SupportTicket> {\n    const [updatedTicket] = await db.update(supportTickets)\n      .set({\n        priority,\n        updatedAt: sql`CURRENT_TIMESTAMP`\n      })\n      .where(eq(supportTickets.id, id))\n      .returning();\n    return updatedTicket;\n  }\n\n  async updateTicket(id: number, updates: Partial<SupportTicket>): Promise<SupportTicket> {\n    const [updatedTicket] = await db.update(supportTickets)\n      .set({\n        ...updates,\n        updatedAt: sql`CURRENT_TIMESTAMP`\n      })\n      .where(eq(supportTickets.id, id))\n      .returning();\n    return updatedTicket;\n  }\n\n  async createMessage(message: Omit<SupportMessage, \"id\" | \"createdAt\" | \"isRead\">): Promise<SupportMessage> {\n    const [newMessage] = await db.insert(supportMessages)\n      .values({\n        ...message,\n        isRead: false\n      })\n      .returning();\n    return newMessage;\n  }\n\n  async getMessagesByTicket(ticketId: number): Promise<SupportMessage[]> {\n    return await db.select()\n      .from(supportMessages)\n      .where(eq(supportMessages.ticketId, ticketId))\n      .orderBy(sql`${supportMessages.createdAt} ASC`);\n  }\n\n  async updateMessage(id: number, updates: Partial<SupportMessage>): Promise<SupportMessage> {\n    const [updatedMessage] = await db.update(supportMessages)\n      .set(updates)\n      .where(eq(supportMessages.id, id))\n      .returning();\n    return updatedMessage;\n  }\n\n  async deleteMessage(id: number): Promise<void> {\n    await db.delete(supportMessages).where(eq(supportMessages.id, id));\n  }\n\n  async deleteTicket(id: number): Promise<void> {\n    await db.delete(supportTickets).where(eq(supportTickets.id, id));\n  }\n\n  async getSSHKeysByUser(userId: number): Promise<SSHKey[]> {\n    return await db.select().from(sshKeys).where(eq(sshKeys.userId, userId));\n  }\n\n  async createSSHKey(key: Omit<SSHKey, \"id\">): Promise<SSHKey> {\n    const [newKey] = await db.insert(sshKeys).values(key).returning();\n    return newKey;\n  }\n\n  async getSSHKey(id: number): Promise<SSHKey | undefined> {\n    const [key] = await db.select().from(sshKeys).where(eq(sshKeys.id, id));\n    return key;\n  }\n\n  async updateSSHKey(id: number, updates: Partial<SSHKey>): Promise<SSHKey> {\n    const [updatedKey] = await db.update(sshKeys)\n      .set(updates)\n      .where(eq(sshKeys.id, id))\n      .returning();\n    return updatedKey;\n  }\n\n  async deleteSSHKey(id: number): Promise<void> {\n    await db.delete(sshKeys).where(eq(sshKeys.id, id));\n  }\n\n  // Server metrics implementation\n  async createServerMetric(metric: Omit<ServerMetric, \"id\">): Promise<ServerMetric> {\n    const [newMetric] = await db.insert(serverMetrics).values(metric).returning();\n    return newMetric;\n  }\n\n  async getLatestServerMetric(serverId: number): Promise<ServerMetric | undefined> {\n    const [metric] = await db\n      .select()\n      .from(serverMetrics)\n      .where(eq(serverMetrics.serverId, serverId))\n      .orderBy(desc(serverMetrics.timestamp))\n      .limit(1);\n    return metric;\n  }\n\n  async getServerMetricHistory(serverId: number, limit: number = 24): Promise<ServerMetric[]> {\n    return await db\n      .select()\n      .from(serverMetrics)\n      .where(eq(serverMetrics.serverId, serverId))\n      .orderBy(desc(serverMetrics.timestamp))\n      .limit(limit);\n  }\n\n  // IP Ban Implementation\n  async getIPBan(ipAddress: string): Promise<IPBan | undefined> {\n    const [ban] = await db.select()\n      .from(ipBans)\n      .where(eq(ipBans.ipAddress, ipAddress));\n    return ban;\n  }\n\n  async getAllIPBans(): Promise<IPBan[]> {\n    return await db.select()\n      .from(ipBans)\n      .orderBy(desc(ipBans.createdAt));\n  }\n\n  async createIPBan(ban: Omit<IPBan, \"id\" | \"createdAt\">): Promise<IPBan> {\n    const [newBan] = await db.insert(ipBans)\n      .values(ban)\n      .returning();\n    return newBan;\n  }\n\n  async updateIPBan(id: number, updates: Partial<IPBan>): Promise<IPBan> {\n    const [updatedBan] = await db.update(ipBans)\n      .set(updates)\n      .where(eq(ipBans.id, id))\n      .returning();\n    return updatedBan;\n  }\n\n  async deleteIPBan(id: number): Promise<void> {\n    await db.delete(ipBans).where(eq(ipBans.id, id));\n  }\n\n  // Snapshot implementation\n  async getSnapshot(id: number): Promise<Snapshot | undefined> {\n    const [snapshot] = await db.select()\n      .from(snapshots)\n      .where(eq(snapshots.id, id));\n    return snapshot;\n  }\n\n  async getSnapshotsByServer(serverId: number): Promise<Snapshot[]> {\n    return await db.select()\n      .from(snapshots)\n      .where(eq(snapshots.serverId, serverId))\n      .orderBy(desc(snapshots.createdAt));\n  }\n\n  async getSnapshotsByUser(userId: number): Promise<Snapshot[]> {\n    return await db.select()\n      .from(snapshots)\n      .where(eq(snapshots.userId, userId))\n      .orderBy(desc(snapshots.createdAt));\n  }\n\n  async createSnapshot(snapshot: Omit<Snapshot, \"id\">): Promise<Snapshot> {\n    const [newSnapshot] = await db.insert(snapshots)\n      .values(snapshot)\n      .returning();\n    return newSnapshot;\n  }\n\n  async updateSnapshot(id: number, updates: Partial<Snapshot>): Promise<Snapshot> {\n    const [updatedSnapshot] = await db.update(snapshots)\n      .set(updates)\n      .where(eq(snapshots.id, id))\n      .returning();\n    return updatedSnapshot;\n  }\n\n  async deleteSnapshot(id: number): Promise<void> {\n    await db.delete(snapshots).where(eq(snapshots.id, id));\n  }\n\n  // Documentation methods implementation\n  async createDocSection(section: InsertDocSection): Promise<DocSection> {\n    const [newSection] = await db.insert(docSections).values(section).returning();\n    return newSection;\n  }\n\n  async getDocSection(id: number): Promise<DocSection | undefined> {\n    const [section] = await db.select().from(docSections).where(eq(docSections.id, id));\n    return section;\n  }\n\n  async getAllDocSections(): Promise<DocSection[]> {\n    return await db.select().from(docSections).orderBy(docSections.order);\n  }\n\n  async updateDocSection(id: number, updates: Partial<DocSection>): Promise<DocSection> {\n    const [section] = await db.update(docSections)\n      .set(updates)\n      .where(eq(docSections.id, id))\n      .returning();\n    return section;\n  }\n\n  async deleteDocSection(id: number): Promise<void> {\n    await db.delete(docSections).where(eq(docSections.id, id));\n  }\n\n  async createDocArticle(article: InsertDocArticle): Promise<DocArticle> {\n    const [newArticle] = await db.insert(docArticles).values(article).returning();\n    return newArticle;\n  }\n\n  async getDocArticle(id: number): Promise<DocArticle | undefined> {\n    const [article] = await db.select().from(docArticles).where(eq(docArticles.id, id));\n    return article;\n  }\n\n  async getDocArticlesBySection(sectionId: number): Promise<DocArticle[]> {\n    return await db.select()\n      .from(docArticles)\n      .where(eq(docArticles.sectionId, sectionId))\n      .orderBy(docArticles.order);\n  }\n\n  async getAllDocArticles(): Promise<DocArticle[]> {\n    return await db.select().from(docArticles).orderBy(docArticles.order);\n  }\n\n  async updateDocArticle(id: number, updates: Partial<DocArticle>): Promise<DocArticle> {\n    const [article] = await db.update(docArticles)\n      .set(updates)\n      .where(eq(docArticles.id, id))\n      .returning();\n    return article;\n  }\n\n  async deleteDocArticle(id: number): Promise<void> {\n    await db.delete(docArticles).where(eq(docArticles.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();", "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\n\n// Simple logger for debugging\nexport function log(msg: string, level: 'info' | 'error' = 'info') {\n  const timestamp = new Date().toLocaleTimeString();\n  const prefix = level === 'error' ? '\u274C' : '\u2139\uFE0F';\n\n  // Fix: Use direct console methods instead of bracket notation\n  if (level === 'error') {\n    console.error(`[${timestamp}] ${prefix} [vite] ${msg}`);\n  } else {\n    console.log(`[${timestamp}] ${prefix} [vite] ${msg}`);\n  }\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  try {\n    // Basic Vite server configuration\n    const vite = await createViteServer({\n      configFile: path.resolve(__dirname, \"..\", \"vite.config.ts\"),\n      server: {\n        middlewareMode: true,\n        hmr: { server },\n        watch: {\n          // Reduce excessive file watching\n          usePolling: false,\n          interval: 1000,\n        },\n        // Add these lines to allow all hosts\n        cors: true,\n        host: '0.0.0.0',\n        strictPort: false,\n      },\n      appType: \"custom\",\n      logLevel: 'info',\n      clearScreen: false,\n      optimizeDeps: {\n        force: true, // Force dependency pre-bundling to avoid issues\n      },\n    });\n\n    // Apply Vite middleware\n    app.use(vite.middlewares);\n\n    // Add CORS headers middleware\n    app.use((req, res, next) => {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n      res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n      if (req.method === 'OPTIONS') {\n        return res.status(200).end();\n      }\n      next();\n    });\n\n    // Simple SPA catch-all route\n    app.use('*', async (req, res, next) => {\n      const url = req.originalUrl;\n\n      try {\n        // Look for index.html in client directory (could be cached if performance is an issue)\n        const indexPath = path.resolve(__dirname, \"..\", \"client\", \"index.html\");\n\n        if (!fs.existsSync(indexPath)) {\n          log(`Cannot find index.html at ${indexPath}`, 'error');\n          return next(new Error(`Cannot find index.html at ${indexPath}`));\n        }\n\n        // Read the HTML and transform with Vite\n        const template = await fs.promises.readFile(indexPath, 'utf-8');\n        const html = await vite.transformIndexHtml(url, template);\n\n        res.status(200).set({ \"Content-Type\": \"text/html\" }).end(html);\n      } catch (e) {\n        vite.ssrFixStacktrace(e as Error);\n        log(`Error processing the request: ${(e as Error).message}`, 'error');\n        next(e);\n      }\n    });\n\n    log(\"Vite middleware successfully set up\");\n    return { vite, server };\n  } catch (error) {\n    log(`Failed to setup Vite: ${(error as Error).message}`, 'error');\n    throw error;\n  }\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"..\", \"dist\", \"client\");\n\n  if (!fs.existsSync(distPath)) {\n    log(`Could not find the build directory: ${distPath}`, 'error');\n    throw new Error(`Could not find the build directory: ${distPath}`);\n  }\n\n  app.use(express.static(distPath));\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n\n  log(`Static files will be served from: ${distPath}`);\n}\n", "import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express, Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser { }\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string) {\n  // Handle plaintext passwords - TEMPORARY SOLUTION\n  // This is for compatibility with existing accounts that might have plaintext passwords\n  // First check if password is stored in plaintext format (not recommended!)\n  if (!stored.includes(\".\")) {\n    console.log(\"WARNING: Plaintext password detected, comparing directly\");\n    // If the password is stored in plaintext, check if it matches directly\n    const match = supplied === stored;\n\n    // Automatically upgrade to secure hash if plaintext password matches\n    if (match) {\n      console.log(\"Password matches plaintext - password should be upgraded\");\n    }\n\n    return match;\n  }\n\n  // Normal case - password is stored with proper hash format\n  try {\n    const [hashed, salt] = stored.split(\".\");\n    if (!hashed || !salt) {\n      console.error(\"Invalid password hash or salt format\");\n      return false;\n    }\n\n    const hashedBuf = Buffer.from(hashed, \"hex\");\n    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n    return timingSafeEqual(hashedBuf, suppliedBuf);\n  } catch (error) {\n    console.error(\"Error comparing passwords:\", error);\n    return false;\n  }\n}\n\nexport function setupAuth(app: Express, cookieOptions = {}) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"your-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production', // Secure in production\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      sameSite: \"lax\",\n      ...(process.env.COOKIE_DOMAIN && { domain: process.env.COOKIE_DOMAIN }),\n      ...cookieOptions\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return done(null, false);\n      }\n\n      // Check if account is suspended\n      if (user.isSuspended) {\n        return done(null, false, { message: 'Account is suspended. Please contact support.' });\n      }\n\n      const passwordMatches = await comparePasswords(password, user.password);\n\n      if (!passwordMatches) {\n        return done(null, false);\n      }\n\n      // Automatic password upgrade if plain text password was detected\n      if (!user.password.includes(\".\")) {\n        try {\n          console.log(`Upgrading password hash for user ${user.id}`);\n          const hashedPassword = await hashPassword(password);\n          await storage.updateUser(user.id, { password: hashedPassword });\n\n          // Get the updated user\n          const updatedUser = await storage.getUser(user.id);\n          if (updatedUser) {\n            return done(null, updatedUser);\n          }\n        } catch (error) {\n          console.error(\"Error upgrading password hash:\", error);\n          // Continue login even if upgrade fails\n        }\n      }\n\n      return done(null, user);\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        return done(null, false);\n      }\n\n      // Check if account has been suspended since last login\n      if (user.isSuspended) {\n        return done(null, false);\n      }\n\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n\nexport function requireAuth(req, res, next) {\n  // Check if user is authenticated\n  if (!req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Add the missing requireAdmin middleware\nexport const requireAdmin = (req: Request, res: Response, next: NextFunction) => {\n  // Check if user is authenticated\n  if (!req.user) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  // Check if user has admin privileges\n  // You'll need to adjust this logic based on your authentication system\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: 'Forbidden: Admin access required' });\n  }\n\n  // User is an admin, proceed to the next middleware or route handler\n  next();\n}\n", "import { Server, Volume } from \"@shared/schema\";\nimport fetch from \"node-fetch\";\n\nexport interface Region {\n  slug: string;\n  name: string;\n  sizes: string[];\n  available: boolean;\n}\n\nexport interface Size {\n  slug: string;\n  memory: number;\n  vcpus: number;\n  disk: number;\n  transfer: number;\n  price_monthly: number;\n  available?: boolean;\n  processor_type?: \"regular\" | \"intel\" | \"amd\" | \"gpu\";\n}\n\nexport interface Distribution {\n  slug: string;\n  name: string;\n  description: string;\n}\n\nexport interface Application {\n  slug: string;\n  name: string;\n  description: string;\n  type: string;\n  distribution?: string; // References a distribution slug (optional for backward compatibility)\n}\n\nexport interface FirewallRule {\n  id?: string;\n  type?: \"inbound\" | \"outbound\";\n  protocol: \"tcp\" | \"udp\" | \"icmp\";\n  ports: string;\n  sources?: {\n    addresses?: string[];\n    load_balancer_uids?: string[];\n    tags?: string[];\n  };\n  destinations?: {\n    addresses?: string[];\n    load_balancer_uids?: string[];\n    tags?: string[];\n  };\n}\n\nexport interface Firewall {\n  id?: string;\n  name: string;\n  status?: \"waiting\" | \"active\" | \"errored\";\n  created_at?: string;\n  droplet_ids: number[];\n  inbound_rules: FirewallRule[];\n  outbound_rules: FirewallRule[];\n}\n\n// Support both mock and real DigitalOcean API\nexport class DigitalOceanClient {\n  private apiKey: string;\n  public useMock: boolean;\n  private apiBaseUrl = \"https://api.digitalocean.com/v2\";\n\n  constructor() {\n    this.apiKey = process.env.DIGITAL_OCEAN_API_KEY || \"\";\n\n    // Force useMock to false - NEVER use mock data\n    this.useMock = false;\n\n    if (!this.apiKey) {\n      console.error(\n        \"ERROR: DigitalOcean API key not found. API calls will fail.\",\n      );\n      // Don't use mock data - we want real API interactions only\n    }\n  }\n\n  // Default mock data\n  private mockRegions: Region[] = [\n    {\n      slug: \"nyc1\",\n      name: \"New York 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"fra1\",\n      name: \"Frankfurt 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"sfo1\",\n      name: \"San Francisco 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"ams3\",\n      name: \"Amsterdam 3\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"sgp1\",\n      name: \"Singapore 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"lon1\",\n      name: \"London 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"blr1\",\n      name: \"Bangalore 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n    {\n      slug: \"tor1\",\n      name: \"Toronto 1\",\n      sizes: [\"s-1vcpu-1gb\", \"s-1vcpu-2gb\", \"s-2vcpu-4gb\", \"s-4vcpu-8gb\"],\n      available: true,\n    },\n  ];\n\n  private mockSizes: Size[] = [\n    // Regular droplets (Standard)\n    {\n      slug: \"s-1vcpu-1gb\",\n      memory: 1024,\n      vcpus: 1,\n      disk: 25,\n      transfer: 1000,\n      price_monthly: 7,\n      processor_type: \"regular\",\n    },\n    {\n      slug: \"s-1vcpu-2gb\",\n      memory: 2048,\n      vcpus: 1,\n      disk: 50,\n      transfer: 2000,\n      price_monthly: 12,\n      processor_type: \"regular\",\n    },\n    {\n      slug: \"s-2vcpu-4gb\",\n      memory: 4096,\n      vcpus: 2,\n      disk: 80,\n      transfer: 4000,\n      price_monthly: 22,\n      processor_type: \"regular\",\n    },\n    {\n      slug: \"s-4vcpu-8gb\",\n      memory: 8192,\n      vcpus: 4,\n      disk: 160,\n      transfer: 5000,\n      price_monthly: 42,\n      processor_type: \"regular\",\n    },\n\n    // Intel Optimized droplets\n    {\n      slug: \"c-2-intel\",\n      memory: 4096,\n      vcpus: 2,\n      disk: 80,\n      transfer: 4000,\n      price_monthly: 28,\n      processor_type: \"intel\",\n    },\n    {\n      slug: \"c-4-intel\",\n      memory: 8192,\n      vcpus: 4,\n      disk: 160,\n      transfer: 5000,\n      price_monthly: 54,\n      processor_type: \"intel\",\n    },\n    {\n      slug: \"c-8-intel\",\n      memory: 16384,\n      vcpus: 8,\n      disk: 320,\n      transfer: 6000,\n      price_monthly: 106,\n      processor_type: \"intel\",\n    },\n\n    // AMD droplets\n    {\n      slug: \"c-2-amd\",\n      memory: 4096,\n      vcpus: 2,\n      disk: 80,\n      transfer: 4000,\n      price_monthly: 26,\n      processor_type: \"amd\",\n    },\n    {\n      slug: \"c-4-amd\",\n      memory: 8192,\n      vcpus: 4,\n      disk: 160,\n      transfer: 5000,\n      price_monthly: 50,\n      processor_type: \"amd\",\n    },\n    {\n      slug: \"c-8-amd\",\n      memory: 16384,\n      vcpus: 8,\n      disk: 320,\n      transfer: 6000,\n      price_monthly: 98,\n      processor_type: \"amd\",\n    },\n  ];\n\n  private mockDistributions: Distribution[] = [\n    {\n      slug: \"ubuntu-20-04\",\n      name: \"Ubuntu 20.04\",\n      description: \"Clean Ubuntu 20.04 LTS installation\",\n    },\n    {\n      slug: \"debian-11\",\n      name: \"Debian 11\",\n      description: \"Clean Debian 11 installation\",\n    },\n    {\n      slug: \"centos-stream-9\",\n      name: \"CentOS Stream 9\",\n      description: \"Clean CentOS Stream 9 installation\",\n    },\n    {\n      slug: \"fedora-36\",\n      name: \"Fedora 36\",\n      description: \"Clean Fedora 36 installation\",\n    },\n    {\n      slug: \"rocky-linux-9\",\n      name: \"Rocky Linux 9\",\n      description: \"Clean Rocky Linux 9 installation\",\n    },\n    {\n      slug: \"ubuntu-22-04\",\n      name: \"Ubuntu 22.04\",\n      description: \"Clean Ubuntu 22.04 LTS installation\",\n    },\n    {\n      slug: \"debian-12\",\n      name: \"Debian 12\",\n      description: \"Clean Debian 12 installation\",\n    },\n    {\n      slug: \"almalinux-9\",\n      name: \"AlmaLinux 9\",\n      description: \"Clean AlmaLinux 9 installation\",\n    },\n  ];\n\n  private mockApplications: Application[] = [\n    // Web Development\n    {\n      slug: \"nodejs\",\n      name: \"Node.js\",\n      description: \"Node.js with npm and nvm\",\n      type: \"application\",\n      distribution: \"ubuntu-20-04\",\n    },\n    {\n      slug: \"python\",\n      name: \"Python\",\n      description: \"Python 3 on Ubuntu 20.04\",\n      type: \"application\",\n    },\n    {\n      slug: \"docker\",\n      name: \"Docker\",\n      description: \"Docker on Ubuntu 20.04\",\n      type: \"application\",\n    },\n    {\n      slug: \"lamp\",\n      name: \"LAMP\",\n      description: \"LAMP on Ubuntu 20.04\",\n      type: \"application\",\n    },\n    {\n      slug: \"lemp\",\n      name: \"LEMP\",\n      description: \"Nginx, MySQL, PHP on Ubuntu 20.04\",\n      type: \"application\",\n    },\n    {\n      slug: \"mean\",\n      name: \"MEAN\",\n      description: \"MongoDB, Express, Angular, Node.js\",\n      type: \"application\",\n    },\n    {\n      slug: \"mern\",\n      name: \"MERN\",\n      description: \"MongoDB, Express, React, Node.js\",\n      type: \"application\",\n    },\n\n    // CMS Systems\n    {\n      slug: \"wordpress\",\n      name: \"WordPress\",\n      description: \"WordPress with LAMP stack\",\n      type: \"cms\",\n    },\n    {\n      slug: \"ghost\",\n      name: \"Ghost\",\n      description: \"Ghost blogging platform\",\n      type: \"cms\",\n    },\n    {\n      slug: \"drupal\",\n      name: \"Drupal\",\n      description: \"Drupal CMS on LAMP stack\",\n      type: \"cms\",\n    },\n    {\n      slug: \"joomla\",\n      name: \"Joomla\",\n      description: \"Joomla CMS on LAMP stack\",\n      type: \"cms\",\n    },\n\n    // E-commerce\n    {\n      slug: \"woocommerce\",\n      name: \"WooCommerce\",\n      description: \"WordPress with WooCommerce\",\n      type: \"ecommerce\",\n    },\n    {\n      slug: \"magento\",\n      name: \"Magento\",\n      description: \"Magento e-commerce platform\",\n      type: \"ecommerce\",\n    },\n    {\n      slug: \"prestashop\",\n      name: \"PrestaShop\",\n      description: \"PrestaShop e-commerce platform\",\n      type: \"ecommerce\",\n    },\n\n    // Data Science\n    {\n      slug: \"jupyter\",\n      name: \"Jupyter Notebook\",\n      description: \"Python with Jupyter for data science\",\n      type: \"data-science\",\n    },\n    {\n      slug: \"rstudio\",\n      name: \"R Studio Server\",\n      description: \"R Studio for statistical computing\",\n      type: \"data-science\",\n    },\n    {\n      slug: \"tensorflow\",\n      name: \"TensorFlow\",\n      description: \"TensorFlow with Python for machine learning\",\n      type: \"data-science\",\n    },\n\n    // Databases\n    {\n      slug: \"mongodb\",\n      name: \"MongoDB\",\n      description: \"MongoDB NoSQL database\",\n      type: \"database\",\n    },\n    {\n      slug: \"postgres\",\n      name: \"PostgreSQL\",\n      description: \"PostgreSQL database server\",\n      type: \"database\",\n    },\n    {\n      slug: \"mysql\",\n      name: \"MySQL\",\n      description: \"MySQL database server\",\n      type: \"database\",\n    },\n    {\n      slug: \"redis\",\n      name: \"Redis\",\n      description: \"Redis in-memory data store\",\n      type: \"database\",\n    },\n    {\n      slug: \"couchdb\",\n      name: \"CouchDB\",\n      description: \"Apache CouchDB document database\",\n      type: \"database\",\n    },\n\n    // CI/CD and DevOps\n    {\n      slug: \"jenkins\",\n      name: \"Jenkins\",\n      description: \"Jenkins CI/CD server\",\n      type: \"devops\",\n    },\n    {\n      slug: \"gitlab\",\n      name: \"GitLab CE\",\n      description: \"GitLab Community Edition\",\n      type: \"devops\",\n    },\n    {\n      slug: \"prometheus\",\n      name: \"Prometheus\",\n      description: \"Prometheus monitoring system\",\n      type: \"devops\",\n    },\n    {\n      slug: \"grafana\",\n      name: \"Grafana\",\n      description: \"Grafana analytics & monitoring\",\n      type: \"devops\",\n    },\n\n    // Game Servers\n    {\n      slug: \"minecraft\",\n      name: \"Minecraft Server\",\n      description: \"Ready-to-play Minecraft Java Edition server\",\n      type: \"game-server\",\n    },\n    {\n      slug: \"csgo\",\n      name: \"CS:GO Server\",\n      description: \"Counter-Strike: Global Offensive game server\",\n      type: \"game-server\",\n    },\n    {\n      slug: \"valheim\",\n      name: \"Valheim Server\",\n      description: \"Valheim dedicated server for multiplayer\",\n      type: \"game-server\",\n    },\n    {\n      slug: \"rust\",\n      name: \"Rust Server\",\n      description: \"Rust dedicated game server\",\n      type: \"game-server\",\n    },\n    {\n      slug: \"ark\",\n      name: \"ARK: Survival Evolved\",\n      description: \"ARK: Survival Evolved dedicated server\",\n      type: \"game-server\",\n    },\n\n    // Discord Bots\n    {\n      slug: \"discordjs\",\n      name: \"Discord.js Bot\",\n      description: \"Node.js environment optimized for Discord.js bots\",\n      type: \"bot\",\n    },\n    {\n      slug: \"discordpy\",\n      name: \"Discord.py Bot\",\n      description: \"Python environment for Discord.py bots\",\n      type: \"bot\",\n    },\n  ];\n\n  // Helper method to map application slugs to valid image IDs\n  private getImageForApplication(appSlug?: string): string {\n    if (!appSlug) {\n      return \"ubuntu-20-04-x64\"; // Default to Ubuntu LTS if no app specified\n    }\n\n    // Log the application selection\n    console.log(`Attempting to create droplet with application: ${appSlug}`);\n\n    try {\n      // For marketplace applications, we need to use the proper format\n      // DO marketplace slugs are usually in the format: marketplace-slug\n      const marketplaceSlug = appSlug.includes(\"marketplace:\")\n        ? appSlug.replace(\"marketplace:\", \"\")\n        : appSlug;\n\n      // Common marketplace applications and their correct slugs\n      const marketplaceMap: Record<string, string> = {\n        wordpress: \"wordpress-20-04\",\n        lamp: \"lamp-20-04\",\n        lemp: \"lemp-20-04\",\n        mean: \"mean-20-04\",\n        docker: \"docker-20-04\",\n        mongodb: \"mongodb-20-04\",\n        mysql: \"mysql-20-04\",\n        postgresql: \"postgresql-20-04\",\n        nodejs: \"nodejs-20-04\",\n        ghost: \"ghost-20-04\",\n        drupal: \"drupal-20-04\",\n        jenkins: \"jenkins-20-04\",\n        gitlab: \"gitlab-20-04\",\n        discordjs: \"nodejs-20-04\", // Use Node.js image for Discord.js bots\n        discordpy: \"python-20-04\", // Use Python image for Discord.py bots\n        minecraft: \"docker-20-04\", // Use Docker for game servers\n        csgo: \"docker-20-04\",\n        valheim: \"docker-20-04\",\n      };\n\n      // If we have a mapped slug, use it, otherwise try the original slug\n      const imageSlug = marketplaceMap[marketplaceSlug] || marketplaceSlug;\n      console.log(`Using image slug: ${imageSlug} for application: ${appSlug}`);\n      return imageSlug;\n    } catch (error) {\n      console.error(\"Error mapping application to image:\", error);\n      // Fallback to Ubuntu LTS if something goes wrong\n      return \"ubuntu-20-04-x64\";\n    }\n  }\n\n  // Helper method for API requests\n  // Public method to allow direct API requests when needed\n  // Basic simplified API request function to fix the issues\n  async apiRequest<T>(\n    method: string,\n    endpoint: string,\n    data?: any,\n  ): Promise<T> {\n    try {\n      // Handle special case for legacy code where parameters may be in the wrong order\n      let actualMethod = method;\n      let actualEndpoint = endpoint;\n      let actualData = data;\n\n      // If the method looks like a URL/endpoint, swap the parameters\n      if (method && method.startsWith(\"/\")) {\n        actualEndpoint = method;\n\n        if (\n          [\"GET\", \"POST\", \"PUT\", \"DELETE\"].includes(\n            String(endpoint).toUpperCase(),\n          )\n        ) {\n          actualMethod = endpoint;\n        } else {\n          actualMethod = \"GET\";\n          actualData = endpoint; // The second param was actually data\n        }\n      }\n\n      // Strip the base URL if it was included by mistake\n      if (actualEndpoint.includes(\"api.digitalocean.com\")) {\n        actualEndpoint = actualEndpoint.substring(\n          actualEndpoint.indexOf(\"/v2\") + 3,\n        );\n      }\n\n      // Ensure endpoint starts with /\n      if (!actualEndpoint.startsWith(\"/\")) {\n        actualEndpoint = \"/\" + actualEndpoint;\n      }\n\n      // Construct the full URL\n      const fullUrl = `${this.apiBaseUrl}${actualEndpoint}`;\n\n      console.log(`[API REQUEST] ${actualMethod} ${fullUrl}`);\n\n      const response = await fetch(fullUrl, {\n        method: actualMethod,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body:\n          actualMethod !== \"GET\" && actualData\n            ? JSON.stringify(actualData)\n            : undefined,\n      });\n\n      if (!response.ok) {\n        // Try to parse error response as JSON, but handle case where it might not be JSON\n        try {\n          const errorText = await response.text();\n          const errorJson = errorText ? JSON.parse(errorText) : {};\n          throw new Error(\n            `DigitalOcean API Error: ${JSON.stringify(errorJson)}`,\n          );\n        } catch (parseError) {\n          throw new Error(\n            `DigitalOcean API Error: ${response.status} ${response.statusText}`,\n          );\n        }\n      }\n\n      // For DELETE operations, the response might be empty\n      if (actualMethod === \"DELETE\") {\n        if (\n          response.status === 204 ||\n          response.headers.get(\"content-length\") === \"0\"\n        ) {\n          return {} as T;\n        }\n      }\n\n      // Try to parse JSON response, but handle case where it might be empty\n      try {\n        const text = await response.text();\n        return text ? (JSON.parse(text) as T) : ({} as T);\n      } catch (parseError) {\n        console.warn(`Could not parse response as JSON: ${parseError}`);\n        return {} as T;\n      }\n    } catch (error) {\n      console.error(`Error in DigitalOcean API request:`, error);\n      throw error;\n    }\n  }\n\n  // Public methods that support both mock and real API\n  async getRegions(): Promise<Region[]> {\n    if (this.useMock) {\n      return this.mockRegions;\n    }\n\n    try {\n      const response = await this.apiRequest<{ regions: Region[] }>(\n        \"GET\",\n        `${this.apiBaseUrl}/regions`,\n      );\n      return response.regions.filter((region) => region.available);\n    } catch (error) {\n      console.error(\n        \"Error fetching regions, falling back to mock data:\",\n        error,\n      );\n      return this.mockRegions;\n    }\n  }\n\n  async getSizes(): Promise<Size[]> {\n    if (this.useMock) {\n      return this.mockSizes;\n    }\n\n    try {\n      const response = await this.apiRequest<{ sizes: Size[] }>(\n        \"GET\",\n        `${this.apiBaseUrl}/sizes`,\n      );\n\n      // Filter and add processor_type property to each size object\n      const filteredSizes = response.sizes\n        .filter((size) => size.available && size.price_monthly > 0)\n        .map((size) => {\n          // Determine processor type based on slug pattern\n          let processor_type: \"regular\" | \"intel\" | \"amd\" = \"regular\";\n\n          if (size.slug.includes(\"-intel\")) {\n            processor_type = \"intel\";\n          } else if (size.slug.includes(\"-amd\")) {\n            processor_type = \"amd\";\n          }\n\n          return {\n            ...size,\n            processor_type,\n          };\n        });\n\n      return filteredSizes;\n    } catch (error) {\n      console.error(\"Error fetching sizes, falling back to mock data:\", error);\n      return this.mockSizes;\n    }\n  }\n\n  async getDistributions(): Promise<Distribution[]> {\n    try {\n      // Connect to DigitalOcean API to get distributions\n      // The DigitalOcean API returns an array in the 'images' field, not 'distributions'\n      const response = await this.apiRequest<{ images: any[] }>(\n        \"GET\",\n        `${this.apiBaseUrl}/images?type=distribution&per_page=100`,\n      );\n\n      if (!response.images || response.images.length === 0) {\n        console.warn(\n          \"No distributions returned from DigitalOcean API, using default distributions\",\n        );\n        // Return sensible defaults instead of failing\n        return [\n          {\n            slug: \"ubuntu-20-04-x64\",\n            name: \"Ubuntu 20.04 LTS\",\n            description: \"Ubuntu 20.04 LTS distribution image\",\n          },\n          {\n            slug: \"debian-11-x64\",\n            name: \"Debian 11\",\n            description: \"Debian 11 distribution image\",\n          },\n          {\n            slug: \"centos-stream-9-x64\",\n            name: \"CentOS Stream 9\",\n            description: \"CentOS Stream 9 distribution image\",\n          },\n        ];\n      }\n\n      // Map the response to our expected format\n      return response.images.map((image) => ({\n        slug: image.slug,\n        name: image.name,\n        description: image.description || `${image.name} distribution image`,\n      }));\n    } catch (error) {\n      console.error(\n        \"Error fetching distributions from DigitalOcean API:\",\n        error,\n      );\n      // Return sensible defaults instead of crashing\n      return [\n        {\n          slug: \"ubuntu-20-04-x64\",\n          name: \"Ubuntu 20.04 LTS\",\n          description: \"Ubuntu 20.04 LTS distribution image\",\n        },\n        {\n          slug: \"debian-11-x64\",\n          name: \"Debian 11\",\n          description: \"Debian 11 distribution image\",\n        },\n      ];\n    }\n  }\n\n  async getApplications(): Promise<Application[]> {\n    try {\n      // Connect to DigitalOcean API to get applications (marketplace images)\n      const response = await this.apiRequest<{ images: any[] }>(\n        \"GET\",\n        `${this.apiBaseUrl}/images?type=application&per_page=100`,\n      );\n\n      if (!response.images || response.images.length === 0) {\n        console.warn(\n          \"No application images returned from DigitalOcean API, using default applications\",\n        );\n        // Return sensible defaults instead of failing\n        return [\n          {\n            slug: \"wordpress\",\n            name: \"WordPress on Ubuntu 20.04\",\n            description:\n              \"WordPress is an open source content management system.\",\n            type: \"cms\",\n          },\n          {\n            slug: \"lamp\",\n            name: \"LAMP on Ubuntu 20.04\",\n            description: \"LAMP stack with Apache, MySQL, and PHP.\",\n            type: \"application\",\n          },\n          {\n            slug: \"docker\",\n            name: \"Docker on Ubuntu 20.04\",\n            description: \"Docker platform for container-based applications.\",\n            type: \"application\",\n          },\n          {\n            slug: \"nodejs\",\n            name: \"Node.js on Ubuntu 20.04\",\n            description:\n              \"Node.js runtime for server-side JavaScript applications.\",\n            type: \"application\",\n          },\n        ];\n      }\n\n      // Map the marketplace images to our Application format\n      return response.images.map((image) => ({\n        slug: image.slug,\n        name: image.name,\n        description: image.description || `${image.name} application`,\n        type: this.determineAppType(image.name),\n      }));\n    } catch (error) {\n      console.error(\n        \"Error fetching applications from DigitalOcean API:\",\n        error,\n      );\n      // Return sensible defaults to prevent crashing\n      return [\n        {\n          slug: \"wordpress\",\n          name: \"WordPress on Ubuntu 20.04\",\n          description: \"WordPress is an open source content management system.\",\n          type: \"cms\",\n        },\n        {\n          slug: \"lamp\",\n          name: \"LAMP on Ubuntu 20.04\",\n          description: \"LAMP stack with Apache, MySQL, and PHP.\",\n          type: \"application\",\n        },\n        {\n          slug: \"nodejs\",\n          name: \"Node.js on Ubuntu 20.04\",\n          description:\n            \"Node.js runtime for server-side JavaScript applications.\",\n          type: \"application\",\n        },\n      ];\n    }\n  }\n\n  // Helper method to determine application type based on name\n  private determineAppType(name: string): string {\n    name = name.toLowerCase();\n\n    if (\n      name.includes(\"wordpress\") ||\n      name.includes(\"drupal\") ||\n      name.includes(\"joomla\")\n    ) {\n      return \"cms\";\n    } else if (\n      name.includes(\"shop\") ||\n      name.includes(\"commerce\") ||\n      name.includes(\"store\")\n    ) {\n      return \"ecommerce\";\n    } else if (\n      name.includes(\"node\") ||\n      name.includes(\"php\") ||\n      name.includes(\"python\") ||\n      name.includes(\"ruby\") ||\n      name.includes(\"django\") ||\n      name.includes(\"lamp\")\n    ) {\n      return \"application\";\n    } else if (\n      name.includes(\"mongodb\") ||\n      name.includes(\"mysql\") ||\n      name.includes(\"postgresql\") ||\n      name.includes(\"redis\")\n    ) {\n      return \"database\";\n    } else if (\n      name.includes(\"jenkins\") ||\n      name.includes(\"gitlab\") ||\n      name.includes(\"prometheus\") ||\n      name.includes(\"grafana\")\n    ) {\n      return \"devops\";\n    } else if (name.includes(\"game\")) {\n      return \"game-server\";\n    } else {\n      return \"application\"; // Default type\n    }\n  }\n\n  async createDroplet(options: {\n    name: string;\n    region: string;\n    size: string;\n    application?: string;\n    ssh_keys?: string[];\n    password?: string;\n    ipv6?: boolean;\n  }): Promise<{ id: string; ip_address: string; ipv6_address?: string }> {\n    if (this.useMock) {\n      // Mock droplet creation with optional IPv6\n      const mockResponse: {\n        id: string;\n        ip_address: string;\n        ipv6_address?: string;\n      } = {\n        id: Math.random().toString(36).substring(7),\n        ip_address: `${Math.floor(Math.random() * 256)}.${Math.floor(\n          Math.random() * 256,\n        )}.${Math.floor(Math.random() * 256)}.${Math.floor(Math.random() * 256)}`,\n      };\n\n      if (options.ipv6) {\n        mockResponse.ipv6_address = `2001:db8:${Math.floor(Math.random() * 9999)}:${Math.floor(\n          Math.random() * 9999,\n        )}:${Math.floor(Math.random() * 9999)}:${Math.floor(Math.random() * 9999)}::/64`;\n      }\n\n      // Create a default firewall for this droplet\n      this.setupDefaultFirewall(mockResponse.id);\n\n      return mockResponse;\n    }\n\n    try {\n      // Prepare droplet creation data\n      const dropletData: any = {\n        name: options.name,\n        region: options.region,\n        size: options.size,\n        image:\n          this.getImageForApplication(options.application) ||\n          \"ubuntu-20-04-x64\", // Default to Ubuntu if no app specified\n        ssh_keys: options.ssh_keys || [],\n        ipv6: !!options.ipv6,\n        monitoring: true, // Enable monitoring by default\n      };\n\n      // Handle proper password setup with cloud-init user-data script\n      if (options.password) {\n        // This more comprehensive cloud-init script properly sets the password\n        // and ensures SSH password authentication is enabled\n        dropletData.user_data = `#cloud-config\npassword: ${options.password}\nchpasswd: { expire: False }\nssh_pwauth: True\n\nruncmd:\n  - echo \"PasswordAuthentication yes\" >> /etc/ssh/sshd_config\n  - echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\n  - systemctl restart ssh\n`;\n      }\n\n      const response = await this.apiRequest<{ droplet: any }>(\n        \"/droplets\",\n        \"POST\",\n        dropletData,\n      );\n\n      // In real API, the droplet is being created asynchronously,\n      // so we need to poll for the IP address\n      let ipAddress = null;\n      let ipv6Address = null;\n      let attempts = 0;\n\n      while ((!ipAddress || (options.ipv6 && !ipv6Address)) && attempts < 20) {\n        await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait 5 seconds\n\n        const dropletDetails = await this.apiRequest<{ droplet: any }>(\n          `/droplets/${response.droplet.id}`,\n        );\n\n        // Extract IP addresses from networks\n        if (dropletDetails.droplet.networks?.v4?.length > 0) {\n          const publicIp = dropletDetails.droplet.networks.v4.find(\n            (network: any) => network.type === \"public\",\n          );\n          if (publicIp) {\n            ipAddress = publicIp.ip_address;\n          }\n        }\n\n        if (options.ipv6 && dropletDetails.droplet.networks?.v6?.length > 0) {\n          ipv6Address = dropletDetails.droplet.networks.v6[0].ip_address;\n        }\n\n        attempts++;\n      }\n\n      return {\n        id: response.droplet.id.toString(),\n        ip_address: ipAddress || \"pending\",\n        ...(options.ipv6 && ipv6Address ? { ipv6_address: ipv6Address } : {}),\n      };\n    } catch (error) {\n      console.error(\"Error creating droplet:\", error);\n      throw error;\n    }\n  }\n\n  async createVolume(options: {\n    name: string;\n    region: string;\n    size_gigabytes: number;\n    description?: string;\n  }): Promise<{ id: string }> {\n    if (this.useMock) {\n      // Prevent duplicate volume names in mock mode\n      const mockId = `vol-${options.name.replace(/\\s+/g, \"-\").toLowerCase()}-${Math.random().toString(36).substring(2, 7)}`;\n      return {\n        id: mockId,\n      };\n    }\n\n    try {\n      const response = await this.apiRequest<{ volume: any }>(\n        \"/volumes\",\n        \"POST\",\n        {\n          name: options.name,\n          region: options.region,\n          size_gigabytes: options.size_gigabytes,\n          description: options.description || `Volume for ${options.name}`,\n        },\n      );\n\n      return {\n        id: response.volume.id,\n      };\n    } catch (error: any) {\n      console.error(\"Error creating volume:\", error);\n\n      // Handle 409 Conflict errors (likely duplicate volume name)\n      if (error.message && error.message.includes(\"409 Conflict\")) {\n        throw new Error(\n          `A volume with name \"${options.name}\" already exists. Please use a different name.`,\n        );\n      }\n\n      // Return a more user-friendly error\n      throw new Error(\n        `Failed to create volume: ${error.message || \"Unknown error\"}`,\n      );\n    }\n  }\n\n  async deleteDroplet(id: string): Promise<void> {\n    if (this.useMock) {\n      console.log(`Mock deletion of droplet ${id} successful`);\n      return; // Mock deletion just returns\n    }\n\n    try {\n      await this.apiRequest(`/droplets/${id}`, \"DELETE\");\n    } catch (error: any) {\n      // Check if it's a 404 error, which means the droplet doesn't exist\n      if (error.message && error.message.includes(\"404 Not Found\")) {\n        console.log(\n          `Droplet ${id} not found on DigitalOcean, it may have been already deleted`,\n        );\n        return; // Consider a 404 as a successful deletion\n      }\n\n      console.error(`Error deleting droplet ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async deleteVolume(id: string): Promise<void> {\n    if (this.useMock) {\n      console.log(`Mock deletion of volume ${id} successful`);\n      return; // Mock deletion always succeeds\n    }\n\n    try {\n      await this.apiRequest(`/volumes/${id}`, \"DELETE\");\n    } catch (error: any) {\n      // Log the error but don't throw, to allow the UI flow to continue\n      console.error(`Error deleting volume ${id}:`, error);\n\n      // If this is a 409 Conflict error, it could be because the volume is still attached\n      if (error.message && error.message.includes(\"409 Conflict\")) {\n        console.warn(\n          `Volume ${id} may still be attached to a droplet. Will proceed with local deletion.`,\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async performDropletAction(\n    dropletId: string,\n    action: \"power_on\" | \"power_off\" | \"reboot\" | \"enable_ipv6\",\n  ): Promise<void> {\n    if (this.useMock) {\n      console.log(`[MOCK] Performing action ${action} on droplet ${dropletId}`);\n\n      // In mock mode, we should still simulate the action for proper feedback\n      // This ensures the UI updates appropriately even in mock mode\n      if (action === \"reboot\") {\n        // Simulate a reboot action with appropriate logging\n        console.log(`[MOCK] Rebooting droplet ${dropletId}`);\n      } else if (action === \"power_on\") {\n        console.log(`[MOCK] Powering on droplet ${dropletId}`);\n      } else if (action === \"power_off\") {\n        console.log(`[MOCK] Powering off droplet ${dropletId}`);\n      } else if (action === \"enable_ipv6\") {\n        console.log(`[MOCK] Enabling IPv6 on droplet ${dropletId}`);\n      }\n\n      return; // Return after logging the mock action\n    }\n\n    try {\n      // We need to directly use the endpoint to make it more robust\n      const endpoint = `/droplets/${dropletId}/actions`;\n      const method = \"POST\";\n      const data = { type: action };\n\n      await this.apiRequest(endpoint, method, data);\n\n      console.log(`Successfully performed ${action} on droplet ${dropletId}`);\n    } catch (error) {\n      console.error(\n        `Error performing ${action} on droplet ${dropletId}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  // New method to attach volumes to droplets\n  async attachVolumeToDroplet(\n    volumeId: string,\n    dropletId: string,\n    region: string,\n  ): Promise<void> {\n    if (this.useMock) {\n      return; // Mock attachment just returns success\n    }\n\n    try {\n      await this.apiRequest(`/volumes/${volumeId}/actions`, \"POST\", {\n        type: \"attach\",\n        droplet_id: parseInt(dropletId),\n        region,\n      });\n\n      // Wait for the attachment to complete (this would be async in real DO API)\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n\n      console.log(\n        `Successfully attached volume ${volumeId} to droplet ${dropletId}`,\n      );\n    } catch (error) {\n      console.error(\n        `Error attaching volume ${volumeId} to droplet ${dropletId}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  // New method to detach volumes from droplets\n  async detachVolumeFromDroplet(\n    volumeId: string,\n    dropletId: string,\n    region: string,\n  ): Promise<void> {\n    if (this.useMock) {\n      return; // Mock detachment just returns success\n    }\n\n    try {\n      await this.apiRequest(`/volumes/${volumeId}/actions`, \"POST\", {\n        type: \"detach\",\n        droplet_id: parseInt(dropletId),\n        region,\n      });\n\n      // Wait for the detachment to complete (this would be async in real DO API)\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n\n      console.log(\n        `Successfully detached volume ${volumeId} from droplet ${dropletId}`,\n      );\n    } catch (error) {\n      console.error(\n        `Error detaching volume ${volumeId} from droplet ${dropletId}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getServerMetrics(dropletId: string): Promise<any> {\n    if (this.useMock || process.env.FORCE_MOCK_METRICS === \"true\") {\n      // Use mock data if no API key or explicitly forced\n      return this.generateMockMetrics();\n    }\n\n    try {\n      // Prepare the query parameters\n      let url = `/monitoring/metrics?host_id=${dropletId}`;\n      url += `&start=${encodeURIComponent(new Date(Date.now() - 1800000).toISOString())}`; // 30 minutes ago\n      url += `&end=${encodeURIComponent(new Date().toISOString())}`;\n      // Add metrics parameters\n      [\n        \"cpu\",\n        \"memory\",\n        \"disk\",\n        \"network\",\n        \"load_1\",\n        \"load_5\",\n        \"load_15\",\n      ].forEach((metric) => {\n        url += `&metrics[]=${metric}`;\n      });\n\n      // Fetch real metrics from DigitalOcean API with manually constructed URL\n      const response = await this.apiRequest<any>(url);\n\n      // Process and format the response\n      if (response && response.data) {\n        // Extract latest values from timeseries data\n        const metrics = {\n          cpu: this.getLatestMetricValue(response.data.cpu) || 0,\n          memory: this.getLatestMetricValue(response.data.memory) || 0,\n          disk: this.getLatestMetricValue(response.data.disk) || 0,\n          network_in: this.getLatestMetricValue(response.data.network_in) || 0,\n          network_out:\n            this.getLatestMetricValue(response.data.network_out) || 0,\n          load_average: [\n            this.getLatestMetricValue(response.data.load_1) || 0,\n            this.getLatestMetricValue(response.data.load_5) || 0,\n            this.getLatestMetricValue(response.data.load_15) || 0,\n          ],\n          uptime_seconds: response.data.uptime || 3600, // Default to 1 hour if not available\n        };\n        return metrics;\n      }\n\n      // Fallback to mock data if API response format isn't as expected\n      console.warn(\"Unexpected DigitalOcean metrics format, using mock data\");\n      return this.generateMockMetrics();\n    } catch (error) {\n      console.error(\"Error fetching metrics from DigitalOcean:\", error);\n      // Fallback to mock data on error\n      return this.generateMockMetrics();\n    }\n  }\n\n  // Helper to extract the latest metric value from a timeseries\n  private getLatestMetricValue(\n    timeseries: Array<{ time: string; value: number }> | undefined,\n  ): number | null {\n    if (!timeseries || !Array.isArray(timeseries) || timeseries.length === 0) {\n      return null;\n    }\n\n    // Sort by timestamp descending and take the first (latest) value\n    return timeseries.sort(\n      (a, b) => new Date(b.time).getTime() - new Date(a.time).getTime(),\n    )[0].value;\n  }\n\n  // Helper to generate consistent mock metrics\n  private generateMockMetrics() {\n    return {\n      cpu: Math.floor(Math.random() * 70) + 10, // 10-80%\n      memory: Math.floor(Math.random() * 60) + 20, // 20-80%\n      disk: Math.floor(Math.random() * 30) + 20, // 20-50%\n      network_in: Math.floor(Math.random() * 10000000), // 0-10MB\n      network_out: Math.floor(Math.random() * 5000000), // 0-5MB\n      load_average: [Math.random() * 2, Math.random() * 1.5, Math.random() * 1],\n      uptime_seconds: 3600 * 24 * Math.floor(Math.random() * 30 + 1), // 1-30 days\n    };\n  }\n\n  // Mock firewall data\n  public mockFirewalls: Record<string, Firewall> = {};\n  // Create default firewall for a droplet - this is public so it can be called from routes\n  public setupDefaultFirewall(dropletId: string): Firewall {\n    // Always create a default firewall regardless of mock mode\n    // This ensures firewalls are available for all droplets\n    const existingFirewall = Object.values(this.mockFirewalls).find(\n      (firewall) => firewall.droplet_ids.includes(parseInt(dropletId)),\n    );\n\n    if (existingFirewall) {\n      return existingFirewall;\n    }\n\n    // Create a new firewall with NO default rules as required\n    // Users must explicitly add rules through the UI\n    const firewallId = `firewall-${Math.random().toString(36).substring(7)}`;\n    const newFirewall: Firewall = {\n      id: firewallId,\n      name: `firewall-${dropletId}`,\n      status: \"active\",\n      created_at: new Date().toISOString(),\n      droplet_ids: [parseInt(dropletId)],\n      // Start with empty rule sets\n      inbound_rules: [],\n      outbound_rules: [],\n    };\n\n    // Store the firewall in our mock collection\n    this.mockFirewalls[firewallId] = newFirewall;\n    console.log(\n      `Created default firewall for droplet ${dropletId}: ${firewallId}`,\n    );\n\n    return newFirewall;\n  }\n\n  // Firewall methods\n  async getFirewalls(): Promise<Firewall[]> {\n    try {\n      console.log(\"Fetching all firewalls from DigitalOcean API\");\n      const response = await this.apiRequest<{ firewalls: Firewall[] }>(\n        \"/firewalls\",\n      );\n\n      if (response && response.firewalls) {\n        console.log(\n          `Retrieved ${response.firewalls.length} real firewalls from DigitalOcean API`,\n        );\n        return response.firewalls;\n      } else {\n        console.log(\"No firewalls returned from DigitalOcean API\");\n        return [];\n      }\n    } catch (error) {\n      console.error(\"Error fetching firewalls from DigitalOcean API:\", error);\n      throw error; // Don't fall back to mock data\n    }\n  }\n\n  async getFirewallByDropletId(dropletId: string): Promise<Firewall | null> {\n    const dropletIdNumber = parseInt(dropletId);\n\n    // Make a direct API call to get firewalls - no mock usage\n    try {\n      console.log(\n        `Fetching firewalls for droplet ${dropletId} from DigitalOcean API`,\n      );\n      const response = await this.apiRequest<{ firewalls: Firewall[] }>(\n        \"/firewalls\",\n      );\n\n      if (!response.firewalls || response.firewalls.length === 0) {\n        console.log(`No firewalls found on DigitalOcean account`);\n        return null;\n      }\n\n      // Find the firewall that has this droplet ID in its droplet_ids array\n      const firewall = response.firewalls.find(\n        (firewall) =>\n          firewall.droplet_ids &&\n          firewall.droplet_ids.includes(dropletIdNumber),\n      );\n\n      if (firewall) {\n        console.log(\n          `Found real DigitalOcean firewall ${firewall.id} for droplet ${dropletId}`,\n        );\n        return firewall;\n      } else {\n        console.log(`No firewall found for server ${dropletId}`);\n        return null;\n      }\n    } catch (error) {\n      console.error(\n        `Error fetching firewall for droplet ${dropletId} from DigitalOcean API:`,\n        error,\n      );\n      console.log(`No firewall found for server ${dropletId}`);\n      return null; // Don't create any mock fallbacks, just return null\n    }\n  }\n\n  async createFirewall(options: {\n    name: string;\n    droplet_ids: number[];\n    inbound_rules: FirewallRule[];\n    outbound_rules: FirewallRule[];\n  }): Promise<Firewall> {\n    // Always attempt to use the real API, no more mock fallbacks\n    try {\n      // Check if a firewall already exists for this droplet to avoid 409 Conflict\n      const existingFirewall = await this.getFirewallByDropletId(\n        options.droplet_ids[0].toString(),\n      );\n      if (\n        existingFirewall &&\n        existingFirewall.id &&\n        !existingFirewall.id.includes(\"firewall-\")\n      ) {\n        console.log(\n          \"Real DigitalOcean firewall already exists for droplet, updating instead of creating\",\n        );\n        return await this.updateFirewall(existingFirewall.id, {\n          inbound_rules: options.inbound_rules,\n          outbound_rules: options.outbound_rules,\n        });\n      }\n\n      // Create a new firewall through the real API\n      console.log(\"Creating new real DigitalOcean firewall with rules:\", {\n        inbound_count: options.inbound_rules.length,\n        outbound_count: options.outbound_rules.length,\n      });\n\n      const response = await this.apiRequest<{ firewall: Firewall }>(\n        \"/firewalls\",\n        \"POST\",\n        options,\n      );\n\n      console.log(\n        \"Successfully created real DigitalOcean firewall:\",\n        response.firewall.id,\n      );\n      return response.firewall;\n    } catch (error) {\n      console.error(\n        \"ERROR: Failed to create real DigitalOcean firewall:\",\n        error,\n      );\n      throw new Error(`Failed to create DigitalOcean firewall: ${error}`);\n    }\n  }\n\n  async updateFirewall(\n    firewallId: string,\n    updates: Partial<Firewall>,\n  ): Promise<Firewall> {\n    // Log more details for debugging\n    console.log(`updateFirewall called for ${firewallId}`, {\n      has_inbound_rules: !!updates.inbound_rules,\n      inbound_count: updates.inbound_rules?.length || 0,\n      has_outbound_rules: !!updates.outbound_rules,\n      outbound_count: updates.outbound_rules?.length || 0,\n      droplet_count: updates.droplet_ids?.length || 0,\n    });\n\n    // Handle local mock firewalls (containing 'firewall-')\n    if (firewallId.includes(\"firewall-\")) {\n      console.log(\n        `WARNING: Cannot update a mock firewall ID with real DigitalOcean API. Creating a real one instead.`,\n      );\n\n      // We need to create a real firewall since this is a mock ID\n      try {\n        // Get the droplet IDs from the mock firewall\n        const dropletIds = this.mockFirewalls[firewallId]?.droplet_ids || [];\n        if (dropletIds.length === 0) {\n          throw new Error(`Mock firewall ${firewallId} has no droplet IDs`);\n        }\n\n        // Create a new real firewall\n        const newFirewall = await this.createFirewall({\n          name: updates.name || `firewall-${dropletIds[0]}`,\n          droplet_ids: dropletIds,\n          inbound_rules: updates.inbound_rules || [],\n          outbound_rules: updates.outbound_rules || [],\n        });\n\n        // Delete the mock firewall\n        delete this.mockFirewalls[firewallId];\n\n        return newFirewall;\n      } catch (error) {\n        console.error(`Failed to migrate mock firewall to real one:`, error);\n        throw new Error(`Cannot update mock firewall with real API: ${error}`);\n      }\n    }\n\n    // This is a real firewall ID, update it\n    try {\n      console.log(`Updating real DigitalOcean firewall ${firewallId}`);\n      const response = await this.apiRequest<{ firewall: Firewall }>(\n        `/firewalls/${firewallId}`,\n        \"PUT\",\n        updates,\n      );\n      console.log(\n        `Successfully updated real DigitalOcean firewall: ${firewallId}`,\n      );\n      return response.firewall;\n    } catch (error) {\n      console.error(\n        `ERROR: Failed to update real DigitalOcean firewall ${firewallId}:`,\n        error,\n      );\n      throw new Error(`Failed to update DigitalOcean firewall: ${error}`);\n    }\n  }\n\n  async addDropletsToFirewall(\n    firewallId: string,\n    dropletIds: number[],\n  ): Promise<void> {\n    // Handle mock firewalls - migrate to real firewall if possible\n    if (firewallId.includes(\"firewall-\")) {\n      console.log(\n        `WARNING: Cannot add droplets to a mock firewall. Need to create a real firewall.`,\n      );\n\n      try {\n        // See if we can get the existing mock firewall\n        const mockFirewall = this.mockFirewalls[firewallId];\n        if (!mockFirewall) {\n          throw new Error(`Mock firewall ${firewallId} not found`);\n        }\n\n        // Create a real firewall with all droplets combined\n        const allDropletIds = [\n          ...new Set([...mockFirewall.droplet_ids, ...dropletIds]),\n        ];\n\n        await this.createFirewall({\n          name: mockFirewall.name || `firewall-migrated`,\n          droplet_ids: allDropletIds,\n          inbound_rules: mockFirewall.inbound_rules || [],\n          outbound_rules: mockFirewall.outbound_rules || [],\n        });\n\n        // Remove the mock firewall\n        delete this.mockFirewalls[firewallId];\n        return;\n      } catch (error) {\n        console.error(\n          `Failed to migrate mock firewall ${firewallId} to real firewall:`,\n          error,\n        );\n        throw new Error(\n          `Cannot add droplets to mock firewall with real API: ${error}`,\n        );\n      }\n    }\n\n    // This is a real firewall ID, make the real API call\n    try {\n      console.log(\n        `Adding droplets ${dropletIds.join(\", \")} to real firewall ${firewallId}`,\n      );\n      await this.apiRequest(`/firewalls/${firewallId}/droplets`, \"POST\", {\n        droplet_ids: dropletIds,\n      });\n      console.log(`Successfully added droplets to real firewall ${firewallId}`);\n    } catch (error) {\n      console.error(`Error adding droplets to firewall ${firewallId}:`, error);\n      throw new Error(\n        `Failed to add droplets to DigitalOcean firewall: ${error}`,\n      );\n    }\n  }\n\n  async removeDropletsFromFirewall(\n    firewallId: string,\n    dropletIds: number[],\n  ): Promise<void> {\n    // Handle mock firewalls\n    if (firewallId.includes(\"firewall-\")) {\n      console.log(\n        `WARNING: Cannot remove droplets from a mock firewall with real API calls`,\n      );\n\n      try {\n        const mockFirewall = this.mockFirewalls[firewallId];\n        if (!mockFirewall) {\n          throw new Error(`Mock firewall ${firewallId} not found`);\n        }\n\n        // Create a real firewall but exclude the droplets to be removed\n        const remainingDropletIds = mockFirewall.droplet_ids.filter(\n          (id) => !dropletIds.includes(id),\n        );\n\n        if (remainingDropletIds.length > 0) {\n          await this.createFirewall({\n            name: mockFirewall.name || `firewall-migrated`,\n            droplet_ids: remainingDropletIds,\n            inbound_rules: mockFirewall.inbound_rules || [],\n            outbound_rules: mockFirewall.outbound_rules || [],\n          });\n        }\n\n        // Remove the mock firewall\n        delete this.mockFirewalls[firewallId];\n        return;\n      } catch (error) {\n        console.error(\n          `Failed to migrate mock firewall ${firewallId} to real firewall:`,\n          error,\n        );\n        throw new Error(\n          `Cannot remove droplets from mock firewall with real API: ${error}`,\n        );\n      }\n    }\n\n    // This is a real firewall ID, make the real API call\n    try {\n      console.log(\n        `Removing droplets ${dropletIds.join(\", \")} from real firewall ${firewallId}`,\n      );\n      await this.apiRequest(`/firewalls/${firewallId}/droplets`, \"DELETE\", {\n        droplet_ids: dropletIds,\n      });\n      console.log(\n        `Successfully removed droplets from real firewall ${firewallId}`,\n      );\n    } catch (error) {\n      console.error(\n        `Error removing droplets from firewall ${firewallId}:`,\n        error,\n      );\n      throw new Error(\n        `Failed to remove droplets from DigitalOcean firewall: ${error}`,\n      );\n    }\n  }\n\n  async addRulesToFirewall(\n    firewallId: string,\n    inboundRules: FirewallRule[] = [],\n    outboundRules: FirewallRule[] = [],\n  ): Promise<void> {\n    // Handle mock firewalls - migrate to real firewall\n    if (firewallId.includes(\"firewall-\")) {\n      console.log(\n        `WARNING: Cannot add rules to a mock firewall with real API. Creating a real one.`,\n      );\n\n      try {\n        const mockFirewall = this.mockFirewalls[firewallId];\n        if (!mockFirewall) {\n          throw new Error(`Mock firewall ${firewallId} not found`);\n        }\n\n        const combinedInboundRules = [\n          ...(mockFirewall.inbound_rules || []),\n          ...inboundRules,\n        ];\n        const combinedOutboundRules = [\n          ...(mockFirewall.outbound_rules || []),\n          ...outboundRules,\n        ];\n\n        if (mockFirewall.droplet_ids.length === 0) {\n          throw new Error(`Mock firewall ${firewallId} has no droplet IDs`);\n        }\n\n        await this.createFirewall({\n          name: mockFirewall.name || `firewall-migrated`,\n          droplet_ids: mockFirewall.droplet_ids,\n          inbound_rules: combinedInboundRules,\n          outbound_rules: combinedOutboundRules,\n        });\n\n        // Remove the mock firewall\n        delete this.mockFirewalls[firewallId];\n        return;\n      } catch (error) {\n        console.error(\n          `Failed to migrate mock firewall ${firewallId} to real firewall:`,\n          error,\n        );\n        throw new Error(\n          `Cannot add rules to mock firewall with real API: ${error}`,\n        );\n      }\n    }\n\n    // This is a real firewall ID, make the real API call\n    try {\n      console.log(`Adding rules to real firewall ${firewallId}: `, {\n        inbound: inboundRules.length,\n        outbound: outboundRules.length,\n      });\n      await this.apiRequest(`/firewalls/${firewallId}/rules`, \"POST\", {\n        inbound_rules: inboundRules,\n        outbound_rules: outboundRules,\n      });\n      console.log(`Successfully added rules to real firewall ${firewallId}`);\n    } catch (error) {\n      console.error(`Error adding rules to firewall ${firewallId}:`, error);\n      throw new Error(`Failed to add rules to DigitalOcean firewall: ${error}`);\n    }\n  }\n\n  async removeRulesFromFirewall(\n    firewallId: string,\n    inboundRules: FirewallRule[] = [],\n    outboundRules: FirewallRule[] = [],\n  ): Promise<void> {\n    // Handle mock firewalls - migrate to real firewall\n    if (firewallId.includes(\"firewall-\")) {\n      console.log(\n        `WARNING: Cannot remove rules from a mock firewall with real API. Creating a real one.`,\n      );\n\n      try {\n        const mockFirewall = this.mockFirewalls[firewallId];\n        if (!mockFirewall) {\n          throw new Error(`Mock firewall ${firewallId} not found`);\n        }\n\n        // Remove rules from the mock firewall\n        const inboundPorts = inboundRules.map((rule) => rule.ports);\n        const remainingInboundRules = (mockFirewall.inbound_rules || []).filter(\n          (rule) => !inboundPorts.includes(rule.ports),\n        );\n\n        const outboundPorts = outboundRules.map((rule) => rule.ports);\n        const remainingOutboundRules = (\n          mockFirewall.outbound_rules || []\n        ).filter((rule) => !outboundPorts.includes(rule.ports));\n\n        if (mockFirewall.droplet_ids.length === 0) {\n          throw new Error(`Mock firewall ${firewallId} has no droplet IDs`);\n        }\n\n        await this.createFirewall({\n          name: mockFirewall.name || `firewall-migrated`,\n          droplet_ids: mockFirewall.droplet_ids,\n          inbound_rules: remainingInboundRules,\n          outbound_rules: remainingOutboundRules,\n        });\n\n        // Remove the mock firewall\n        delete this.mockFirewalls[firewallId];\n        return;\n      } catch (error) {\n        console.error(\n          `Failed to migrate mock firewall ${firewallId} to real firewall:`,\n          error,\n        );\n        throw new Error(\n          `Cannot remove rules from mock firewall with real API: ${error}`,\n        );\n      }\n    }\n\n    // This is a real firewall ID, make the real API call\n    try {\n      console.log(`Removing rules from real firewall ${firewallId}: `, {\n        inbound: inboundRules.length,\n        outbound: outboundRules.length,\n      });\n      await this.apiRequest(`/firewalls/${firewallId}/rules`, \"DELETE\", {\n        inbound_rules: inboundRules,\n        outbound_rules: outboundRules,\n      });\n      console.log(\n        `Successfully removed rules from real firewall ${firewallId}`,\n      );\n    } catch (error) {\n      console.error(`Error removing rules from firewall ${firewallId}:`, error);\n      throw new Error(\n        `Failed to remove rules from DigitalOcean firewall: ${error}`,\n      );\n    }\n  }\n\n  async deleteFirewall(firewallId: string): Promise<void> {\n    // Handle mock firewalls\n    if (firewallId.includes(\"firewall-\")) {\n      console.log(`Deleting mock firewall: ${firewallId}`);\n      if (this.mockFirewalls && this.mockFirewalls[firewallId]) {\n        delete this.mockFirewalls[firewallId];\n        console.log(`Successfully deleted mock firewall: ${firewallId}`);\n      } else {\n        console.log(\n          `Mock firewall not found: ${firewallId}, but operation succeeded`,\n        );\n      }\n      return;\n    }\n\n    // This is a real firewall ID, make the real API call\n    try {\n      console.log(`Deleting real DigitalOcean firewall: ${firewallId}`);\n      await this.apiRequest(`/firewalls/${firewallId}`, \"DELETE\");\n      console.log(\n        `Successfully deleted real DigitalOcean firewall: ${firewallId}`,\n      );\n    } catch (error) {\n      console.error(\n        `Error deleting real DigitalOcean firewall ${firewallId}:`,\n        error,\n      );\n      throw new Error(`Failed to delete DigitalOcean firewall: ${error}`);\n    }\n  }\n\n  /**\n   * Create a snapshot of a droplet\n   * @param dropletId The ID of the droplet to snapshot\n   * @param name The name of the snapshot\n   * @returns The ID of the created snapshot\n   */\n  async createDropletSnapshot(\n    dropletId: string,\n    name: string,\n  ): Promise<string> {\n    // For mock mode, generate a fake snapshot ID\n    if (this.useMock || dropletId.includes(\"droplet-\")) {\n      console.log(`Creating mock snapshot for droplet ${dropletId}`);\n      // Mock snapshot ID generation\n      const snapshotId = `snapshot-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n      return snapshotId;\n    }\n\n    // This is a real API call\n    try {\n      console.log(\n        `Creating real snapshot for DigitalOcean droplet ${dropletId}`,\n      );\n      const url = `${this.apiBaseUrl}/droplets/${dropletId}/actions`;\n      const response = await this.apiRequest<{\n        action: {\n          id: number;\n          status: string;\n          type: string;\n          resource_id: number;\n        };\n      }>(\"POST\", url, {\n        type: \"snapshot\",\n        name: name,\n      });\n\n      // In a real implementation, we'd need to poll the action status until completion\n      // For now, we'll just return a generated snapshot ID\n      return `snapshot-${response.action.id}`;\n    } catch (error) {\n      console.error(`Error creating snapshot for droplet ${dropletId}:`, error);\n      throw new Error(`Failed to create snapshot: ${error}`);\n    }\n  }\n\n  /**\n   * Get a list of snapshots for a droplet\n   * @param dropletId The ID of the droplet\n   * @returns An array of snapshot objects\n   */\n  async getDropletSnapshots(dropletId: string): Promise<\n    {\n      id: string;\n      name: string;\n      created_at: string;\n      size_gigabytes: number;\n    }[]\n  > {\n    // For mock mode, return mock data\n    if (this.useMock || dropletId.includes(\"droplet-\")) {\n      console.log(`Getting mock snapshots for droplet ${dropletId}`);\n      // Return mock snapshots data\n      return [\n        {\n          id: `snapshot-mock-1-${dropletId}`,\n          name: `Snapshot 1 for droplet ${dropletId}`,\n          created_at: new Date(\n            Date.now() - 7 * 24 * 60 * 60 * 1000,\n          ).toISOString(),\n          size_gigabytes: 20,\n        },\n        {\n          id: `snapshot-mock-2-${dropletId}`,\n          name: `Snapshot 2 for droplet ${dropletId}`,\n          created_at: new Date(\n            Date.now() - 3 * 24 * 60 * 60 * 1000,\n          ).toISOString(),\n          size_gigabytes: 25,\n        },\n      ];\n    }\n\n    // This is a real API call\n    try {\n      console.log(\n        `Getting real snapshots for DigitalOcean droplet ${dropletId}`,\n      );\n      const url = `${this.apiBaseUrl}/droplets/${dropletId}/snapshots`;\n      const response = await this.apiRequest<{ snapshots: any[] }>(\"GET\", url);\n\n      return response.snapshots.map((snapshot) => ({\n        id: snapshot.id,\n        name: snapshot.name,\n        created_at: snapshot.created_at,\n        size_gigabytes: snapshot.size_gigabytes || 0,\n      }));\n    } catch (error) {\n      console.error(`Error getting snapshots for droplet ${dropletId}:`, error);\n      throw new Error(`Failed to get snapshots: ${error}`);\n    }\n  }\n\n  /**\n   * Delete a snapshot\n   * @param snapshotId The ID of the snapshot to delete\n   */\n  async deleteSnapshot(snapshotId: string): Promise<void> {\n    // In mock mode or with mock snapshot IDs, we just simulate success\n    if (this.useMock || snapshotId.includes(\"snapshot-\")) {\n      console.log(\n        `[MOCK] Deleting mock snapshot ${snapshotId} - mock mode: ${this.useMock}`,\n      );\n      // No actual API call, just simulate success\n      return;\n    }\n\n    // This is a real API call to Digital Ocean\n    try {\n      console.log(`Deleting real DigitalOcean snapshot ${snapshotId}`);\n      const url = `${this.apiBaseUrl}/snapshots/${snapshotId}`;\n      await this.apiRequest(\"DELETE\", url);\n      console.log(`Successfully deleted snapshot ${snapshotId}`);\n    } catch (error) {\n      // Improve error handling - check if it's a 404 (already deleted)\n      const errorMessage = error?.toString() || \"\";\n      if (errorMessage.includes(\"404\") || errorMessage.includes(\"Not Found\")) {\n        console.log(\n          `Snapshot ${snapshotId} not found on DigitalOcean, may already be deleted`,\n        );\n        return; // Consider a 404 as success since the resource is gone\n      }\n\n      console.error(`Error deleting snapshot ${snapshotId}:`, error);\n      throw new Error(`Failed to delete snapshot: ${error}`);\n    }\n  }\n\n  /**\n   * Create a backup of a droplet\n   * @param dropletId The ID of the droplet to backup\n   * @returns The ID of the action that creates the backup\n   */\n  async createDropletBackup(dropletId: string): Promise<string> {\n    // For mock mode or mock droplet IDs, return a mock backup ID\n    if (this.useMock || dropletId.includes(\"droplet-\")) {\n      const mockBackupId = `backup-${Math.floor(Math.random() * 10000000000)}`;\n      console.log(\n        `[MOCK] Creating mock backup ${mockBackupId} for droplet ${dropletId}`,\n      );\n      return mockBackupId;\n    }\n\n    // This is a real API call to Digital Ocean\n    try {\n      console.log(`Creating real backup for DigitalOcean droplet ${dropletId}`);\n      const url = `${this.apiBaseUrl}/droplets/${dropletId}/actions`;\n\n      const response = await this.apiRequest<{ action: { id: number } }>(\n        \"POST\",\n        url,\n        {\n          type: \"backup\",\n        },\n      );\n\n      // Generate a backup ID based on the action ID\n      const backupId = `backup-${response.action.id}`;\n      console.log(`Creating real backup ${backupId} for droplet ${dropletId}`);\n      return backupId;\n    } catch (error) {\n      console.error(`Error creating backup for droplet ${dropletId}:`, error);\n      throw new Error(`Failed to create backup: ${error}`);\n    }\n  }\n\n  /**\n   * Get a list of backups for a droplet\n   * @param dropletId The ID of the droplet\n   * @returns An array of backup objects\n   */\n  async getDropletBackups(dropletId: string): Promise<\n    {\n      id: string;\n      name: string;\n      created_at: string;\n      size_gigabytes: number;\n      status: string;\n    }[]\n  > {\n    // For mock mode or mock droplet IDs, return mock backups\n    if (this.useMock || dropletId.includes(\"droplet-\")) {\n      console.log(`[MOCK] Getting backups for mock droplet ${dropletId}`);\n      return Array(2)\n        .fill(0)\n        .map((_, i) => ({\n          id: `backup-${Math.floor(Math.random() * 10000000000)}`,\n          name: `Auto Backup ${i + 1}`,\n          created_at: new Date(\n            Date.now() - i * 24 * 60 * 60 * 1000,\n          ).toISOString(),\n          size_gigabytes: 25,\n          status: \"completed\",\n        }));\n    }\n\n    // This is a real API call to Digital Ocean\n    try {\n      console.log(`Getting backups for real DigitalOcean droplet ${dropletId}`);\n      const url = `${this.apiBaseUrl}/droplets/${dropletId}/backups`;\n\n      const response = await this.apiRequest<{ backups: any[] }>(\"GET\", url);\n\n      if (!response || !response.backups) {\n        return [];\n      }\n\n      return response.backups.map((backup) => ({\n        id: backup.id,\n        name: backup.name || `Backup ${backup.id}`,\n        created_at: backup.created_at,\n        size_gigabytes: backup.size_gigabytes || 0,\n        status: backup.status || \"completed\",\n      }));\n    } catch (error) {\n      console.error(`Error getting backups for droplet ${dropletId}:`, error);\n      // Return an empty array instead of throwing to be more resilient\n      return [];\n    }\n  }\n\n  /**\n   * Delete a backup\n   * @param backupId The ID of the backup to delete\n   */\n  async deleteBackup(backupId: string): Promise<void> {\n    // For mock mode or mock backup IDs, just simulate success\n    if (this.useMock || backupId.includes(\"backup-\")) {\n      console.log(\n        `[MOCK] Deleting mock backup ${backupId} - mock mode: ${this.useMock}`,\n      );\n      return;\n    }\n\n    // Extract the backup ID if it has our prefix\n    const cleanBackupId = backupId.startsWith(\"backup-\")\n      ? backupId.substring(7)\n      : backupId;\n\n    // This is a real API call to Digital Ocean\n    try {\n      console.log(`Deleting real DigitalOcean backup ${cleanBackupId}`);\n      const url = `${this.apiBaseUrl}/images/${cleanBackupId}`;\n\n      await this.apiRequest<void>(\"DELETE\", url);\n\n      console.log(`Successfully deleted DigitalOcean backup ${cleanBackupId}`);\n    } catch (error) {\n      console.error(`Error deleting backup ${cleanBackupId}:`, error);\n      throw new Error(`Failed to delete backup: ${error}`);\n    }\n  }\n\n  /**\n   * Restore a droplet from a backup\n   * @param dropletId The ID of the target droplet\n   * @param backupId The ID of the backup to restore from\n   */\n  async restoreDropletFromBackup(\n    dropletId: string,\n    backupId: string,\n  ): Promise<void> {\n    // For mock mode or mock droplet IDs, just simulate success\n    if (this.useMock || dropletId.includes(\"droplet-\")) {\n      console.log(\n        `[MOCK] Restoring mock droplet ${dropletId} from backup ${backupId}`,\n      );\n      return;\n    }\n\n    // Extract the backup ID if it has our prefix\n    const cleanBackupId = backupId.startsWith(\"backup-\")\n      ? backupId.substring(7)\n      : backupId;\n\n    // This is a real API call to Digital Ocean\n    try {\n      console.log(\n        `Restoring real DigitalOcean droplet ${dropletId} from backup ${cleanBackupId}`,\n      );\n      const url = `${this.apiBaseUrl}/droplets/${dropletId}/actions`;\n\n      // Properly handle the restore action\n      await this.apiRequest(\"POST\", url, {\n        type: \"restore\",\n        image: cleanBackupId, // Use the ID directly for DigitalOcean API\n      });\n\n      console.log(\n        `Successfully initiated restore of droplet ${dropletId} from backup ${cleanBackupId}`,\n      );\n    } catch (error) {\n      // Improved error handling with specific error messages\n      const errorMessage = error?.toString() || \"\";\n\n      if (\n        errorMessage.includes(\"422\") ||\n        errorMessage.includes(\"Unprocessable Entity\")\n      ) {\n        console.error(\n          `DigitalOcean rejected the restore request: ${cleanBackupId} may not be a valid backup ID or the droplet architecture is incompatible`,\n        );\n\n        // Provide more specific error for client handling\n        throw new Error(\n          `Backup restore rejected by DigitalOcean. The backup may be incompatible with this server.`,\n        );\n      }\n\n      // In development mode, log the error but allow the operation to \"succeed\" for UI testing\n      if (process.env.NODE_ENV !== \"production\") {\n        console.log(\n          `[DEV] Allowing backup restore to proceed despite API error: ${error}`,\n        );\n        return; // Simulate success in development\n      }\n\n      console.error(\n        `Error restoring droplet ${dropletId} from backup ${cleanBackupId}:`,\n        error,\n      );\n      throw new Error(`Failed to restore from backup: ${error}`);\n    }\n  }\n\n  /**\n   * Get details about a specific backup\n   * @param backupId The ID of the backup\n   * @returns The backup details\n   */\n  async getBackupDetails(backupId: string): Promise<{\n    id: string;\n    name: string;\n    created_at: string;\n    size_gigabytes: number;\n    status: string;\n  }> {\n    // For mock mode, return mock data\n    if (this.useMock || backupId.includes(\"backup-\")) {\n      console.log(`Getting details for mock backup ${backupId}`);\n      return {\n        id: backupId,\n        name: `Backup ${backupId.replace(\"backup-\", \"\")}`,\n        created_at: new Date(\n          Date.now() - 5 * 24 * 60 * 60 * 1000,\n        ).toISOString(),\n        size_gigabytes: 25,\n        status: \"completed\",\n      };\n    }\n\n    // Extract the backup ID if it has our prefix\n    const cleanBackupId = backupId.startsWith(\"backup-\")\n      ? backupId.substring(7)\n      : backupId;\n\n    // This is a real API call\n    try {\n      console.log(\n        `Getting details for real DigitalOcean backup ${cleanBackupId}`,\n      );\n      const url = `${this.apiBaseUrl}/images/${cleanBackupId}`;\n      const response = await this.apiRequest<{ image: any }>(\"GET\", url);\n\n      if (!response || !response.image) {\n        throw new Error(`No backup data received from DigitalOcean API`);\n      }\n\n      return {\n        id: `backup-${response.image.id}`,\n        name: response.image.name || `Backup ${response.image.id}`,\n        created_at: response.image.created_at,\n        size_gigabytes: response.image.size_gigabytes || 0,\n        status: response.image.status || \"completed\",\n      };\n    } catch (error) {\n      console.error(\n        `Error getting details for backup ${cleanBackupId}:`,\n        error,\n      );\n      throw new Error(`Failed to get backup details: ${error}`);\n    }\n  }\n\n  /**\n   * Restore a droplet from a snapshot\n   * @param dropletId The ID of the target droplet\n   * @param snapshotId The ID of the snapshot to restore from\n   * @deprecated Use restoreDropletFromBackup instead\n   */\n  async restoreDropletFromSnapshot(\n    dropletId: string,\n    snapshotId: string,\n  ): Promise<void> {\n    console.log(\n      `[DEPRECATED] Using backup restore instead of snapshot for droplet ${dropletId}`,\n    );\n    return this.restoreDropletFromBackup(dropletId, snapshotId);\n  }\n\n  /**\n   * Get details about a specific snapshot\n   * @param snapshotId The ID of the snapshot\n   * @returns The snapshot details\n   */\n  async getSnapshotDetails(snapshotId: string): Promise<{\n    id: string;\n    name: string;\n    created_at: string;\n    size_gigabytes: number;\n  }> {\n    // For mock mode, return mock data\n    if (this.useMock || snapshotId.includes(\"snapshot-\")) {\n      console.log(`Getting details for mock snapshot ${snapshotId}`);\n      return {\n        id: snapshotId,\n        name: `Snapshot ${snapshotId}`,\n        created_at: new Date(\n          Date.now() - 5 * 24 * 60 * 60 * 1000,\n        ).toISOString(),\n        size_gigabytes: 25,\n      };\n    }\n\n    // This is a real API call\n    try {\n      console.log(\n        `Getting details for real DigitalOcean snapshot ${snapshotId}`,\n      );\n      const url = `${this.apiBaseUrl}/snapshots/${snapshotId}`;\n      const response = await this.apiRequest<{ snapshot: any }>(\"GET\", url);\n\n      if (!response || !response.snapshot) {\n        throw new Error(`No snapshot data received from DigitalOcean API`);\n      }\n\n      return {\n        id: response.snapshot.id,\n        name: response.snapshot.name,\n        created_at: response.snapshot.created_at,\n        size_gigabytes: response.snapshot.size_gigabytes || 0,\n      };\n    } catch (error) {\n      console.error(`Error getting details for snapshot ${snapshotId}:`, error);\n      throw new Error(`Failed to get snapshot details: ${error}`);\n    }\n  }\n}\n\nexport const digitalOcean = new DigitalOceanClient();\n", "// @ts-ignore\nimport paypal from \"@paypal/checkout-server-sdk\";\n\nconst clientId = process.env.PAYPAL_CLIENT_ID;\nconst clientSecret = process.env.PAYPAL_CLIENT_SECRET;\nconst mode = process.env.PAYPAL_MODE || 'sandbox';\n\nif (!clientId || !clientSecret) {\n  throw new Error(\"PayPal credentials not found\");\n}\n\nfunction environment() {\n  // Use environment variable to determine mode\n  if (mode === 'live') {\n    console.log('Using PayPal Live Environment');\n    return new paypal.core.LiveEnvironment(clientId, clientSecret);\n  } else {\n    console.log('Using PayPal Sandbox Environment');\n    return new paypal.core.SandboxEnvironment(clientId, clientSecret);\n  }\n}\n\nconst client = new paypal.core.PayPalHttpClient(environment());\n\nexport async function createSubscription(amount: number, currency: string = \"USD\") {\n  const request = new paypal.orders.OrdersCreateRequest();\n  request.prefer(\"return=representation\");\n  request.requestBody({\n    intent: \"CAPTURE\",\n    purchase_units: [{\n      amount: {\n        currency_code: currency,\n        value: amount.toFixed(2),\n      },\n      description: `Add $${amount.toFixed(2)} to balance`,\n    }],\n  });\n\n  try {\n    const order = await client.execute(request);\n    return order.result;\n  } catch (err) {\n    console.error(\"Error creating PayPal order:\", err);\n    throw err;\n  }\n}\n\nexport async function capturePayment(orderId: string) {\n  const request = new paypal.orders.OrdersCaptureRequest(orderId);\n  request.requestBody({});\n\n  try {\n    const capture = await client.execute(request);\n    const payment = capture.result;\n    const amount = parseInt(payment.purchase_units[0].payments.captures[0].amount.value) * 100; // Convert to cents\n    return { payment, amount };\n  } catch (err) {\n    console.error(\"Error capturing PayPal payment:\", err);\n    throw new Error(\"Failed to capture payment\");\n  }\n}\n\nexport async function getSubscriptionDetails(subscriptionId: string) {\n  const request = new paypal.subscriptions.SubscriptionsGetRequest(subscriptionId);\n\n  try {\n    const subscription = await client.execute(request);\n    return subscription.result;\n  } catch (err) {\n    console.error(\"Error getting subscription details:\", err);\n    throw new Error(\"Failed to get subscription details\");\n  }\n}\n\n// Export current mode for frontend reference\nexport const paypalMode = mode;\n\nexport const plans = {\n  basic: {\n    id: \"BASIC_PLAN\",\n    name: \"Basic Plan\",\n    description: \"1 VPS Server, 5GB Storage\",\n    price: 10.00,\n    limits: {\n      maxServers: 1,\n      maxStorageGB: 5,\n    }\n  },\n  pro: {\n    id: \"PRO_PLAN\",\n    name: \"Pro Plan\", \n    description: \"3 VPS Servers, 20GB Storage\",\n    price: 30.00,\n    limits: {\n      maxServers: 3,\n      maxStorageGB: 20,\n    }\n  },\n  enterprise: {\n    id: \"ENTERPRISE_PLAN\",\n    name: \"Enterprise Plan\",\n    description: \"10 VPS Servers, 100GB Storage\",\n    price: 100.00,\n    limits: {\n      maxServers: 10,\n      maxStorageGB: 100,\n    }\n  },\n};", "import { db } from './db';\nimport { storage } from './storage';\nimport { BillingTransaction, Server, ServerMetric } from '../shared/schema';\nimport { eq, and, gte, lte } from 'drizzle-orm';\nimport { serverMetrics } from '../shared/schema';\n\n// Interface for bandwidth usage data\ninterface BandwidthUsage {\n  serverId: number;\n  userId: number;\n  usage: number;  // in GB\n  limit: number;  // in GB\n  periodStart: Date;\n  periodEnd: Date;\n  overageGB: number;\n  overageCost: number;\n}\n\n/**\n * Get bandwidth information for a specific server\n */\nexport async function getServerBandwidth(serverId: number): Promise<{\n  current: number;  // Current usage in GB\n  limit: number;    // Limit in GB based on server size\n  periodStart: string;\n  periodEnd: string;\n  lastUpdated: string;\n  overageRate: number; // Rate for overage charges (0.005 = 0.5%)\n}> {\n  // Get the server info to determine the bandwidth limit\n  const server = await storage.getServer(serverId);\n  if (!server) {\n    throw new Error(\"Server not found\");\n  }\n\n  // Get billing period based on server creation date\n  const now = new Date();\n  \n  // Use server creation date if available, otherwise fall back to current month\n  let periodStart: Date;\n  let periodEnd: Date;\n  \n  if (server.createdAt) {\n    // Get the day of month when server was created\n    const creationDate = new Date(server.createdAt);\n    const creationDay = creationDate.getDate();\n    \n    // Current billing cycle start date (same day as creation, current month)\n    periodStart = new Date(now.getFullYear(), now.getMonth(), creationDay);\n    \n    // If we're before the billing cycle start day, use previous month's cycle\n    if (now.getDate() < creationDay) {\n      periodStart = new Date(now.getFullYear(), now.getMonth() - 1, creationDay);\n    }\n    \n    // Billing cycle end date (day before start day, next month)\n    periodEnd = new Date(periodStart);\n    periodEnd.setMonth(periodEnd.getMonth() + 1);\n    periodEnd.setDate(periodEnd.getDate() - 1);\n  } else {\n    // Fallback to monthly billing if creation date is not available\n    periodStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    periodEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n  }\n\n  // Get all metrics for the current billing period\n  const metrics = await db.select()\n    .from(serverMetrics)\n    .where(\n      and(\n        eq(serverMetrics.serverId, serverId),\n        gte(serverMetrics.timestamp, periodStart),\n        lte(serverMetrics.timestamp, periodEnd)\n      )\n    );\n\n  // Calculate total inbound and outbound transfer\n  let totalNetworkIn = 0;\n  let totalNetworkOut = 0;\n  let lastUpdated = periodStart.toISOString();\n\n  if (metrics.length > 0) {\n    // Calculate cumulative network usage\n    for (const metric of metrics) {\n      totalNetworkIn += metric.networkIn || 0;\n      totalNetworkOut += metric.networkOut || 0;\n      \n      // Track the latest metric timestamp\n      const metricTime = new Date(metric.timestamp);\n      if (metricTime > new Date(lastUpdated)) {\n        lastUpdated = metric.timestamp.toISOString();\n      }\n    }\n  }\n\n  // Convert bytes to GB\n  const totalUsageGB = (totalNetworkIn + totalNetworkOut) / (1024 * 1024 * 1024);\n  \n  // Determine bandwidth limit based on server size\n  // These are example values - in a real system, these would come from a configuration\n  // or be determined based on the actual DigitalOcean plan specs\n  const sizeToLimit: Record<string, number> = {\n    's-1vcpu-1gb': 1000,     // 1TB\n    's-1vcpu-2gb': 2000,     // 2TB\n    's-2vcpu-2gb': 3000,     // 3TB\n    's-2vcpu-4gb': 4000,     // 4TB\n    's-4vcpu-8gb': 5000,     // 5TB\n    's-8vcpu-16gb': 6000,    // 6TB\n    // Add more sizes as needed\n  };\n\n  // Default limit if size not found in the mapping\n  const bandwidthLimitGB = sizeToLimit[server.size] || 1000;\n  \n  // Overage rate is 0.5% of the monthly server cost per GB\n  const overageRate = 0.005;\n\n  return {\n    current: parseFloat(totalUsageGB.toFixed(2)),\n    limit: bandwidthLimitGB,\n    periodStart: periodStart.toISOString(),\n    periodEnd: periodEnd.toISOString(),\n    lastUpdated,\n    overageRate\n  };\n}\n\n/**\n * Calculate bandwidth overage costs for all servers\n * This should be called by the hourly billing job\n */\nexport async function calculateBandwidthOverages(): Promise<void> {\n  // Get all active servers\n  const servers = await storage.getAllServers();\n  const activeServers = servers.filter(server => server.status === 'active');\n  \n  // Exit if no active servers\n  if (activeServers.length === 0) {\n    console.log('No active servers found for bandwidth calculations');\n    return;\n  }\n\n  const now = new Date();\n  \n  // Process each server's bandwidth usage\n  for (const server of activeServers) {\n    try {\n      // Skip if server doesn't have a creation date\n      if (!server.createdAt) {\n        console.log(`Server ${server.id} has no creation date, skipping bandwidth calculation`);\n        continue;\n      }\n      \n      // Calculate billing cycle day from server creation date\n      const creationDate = new Date(server.createdAt);\n      const billingCycleDay = creationDate.getDate();\n      \n      // Only process if today is the last day of the server's billing cycle\n      if (now.getDate() !== billingCycleDay) {\n        console.log(`Not billing cycle end date for server ${server.id}, skipping bandwidth overage calculation`);\n        continue;\n      }\n      \n      await processBandwidthOverage(server);\n    } catch (error) {\n      console.error(`Error processing bandwidth overage for server ${server.id}:`, error);\n    }\n  }\n}\n\n/**\n * Process bandwidth overage for a specific server\n */\nasync function processBandwidthOverage(server: Server): Promise<void> {\n  try {\n    // Get bandwidth data\n    const bandwidthData = await getServerBandwidth(server.id);\n    \n    // Check if there's an overage\n    if (bandwidthData.current <= bandwidthData.limit) {\n      // No overage, nothing to charge\n      return;\n    }\n    \n    // Calculate overage amount\n    const overageGB = bandwidthData.current - bandwidthData.limit;\n    \n    // Get server's monthly cost to calculate the overage fee\n    const serverMonthlyPrice = getServerMonthlyPrice(server.size);\n    \n    // Calculate overage cost (0.5% of monthly price per GB)\n    const overageCost = overageGB * (serverMonthlyPrice * bandwidthData.overageRate);\n    \n    // Round overage cost to 2 decimal places and convert to cents\n    const overageCostCents = Math.round(overageCost * 100);\n    \n    // Don't charge if the amount is negligible\n    if (overageCostCents <= 0) {\n      return;\n    }\n    \n    // Record the transaction\n    await storage.createTransaction({\n      userId: server.userId,\n      amount: overageCostCents,\n      type: 'bandwidth_overage',\n      description: `Bandwidth overage charge for server '${server.name}' (${Math.round(overageGB)}GB above limit)`,\n      status: 'completed',\n      currency: 'USD',\n      paypalTransactionId: null,\n      createdAt: new Date()\n    });\n    \n    // Update user balance automatically\n    await storage.updateUserBalance(server.userId, -overageCostCents);\n    \n    console.log(`Charged user ${server.userId} $${(overageCostCents/100).toFixed(2)} for ${Math.round(overageGB)}GB bandwidth overage on server ${server.id}`);\n  } catch (error) {\n    console.error(`Error processing bandwidth overage for server ${server.id}:`, error);\n  }\n}\n\n/**\n * Get the monthly price for a server size\n */\nfunction getServerMonthlyPrice(size: string): number {\n  // These are example prices - in a real system, these would come from DigitalOcean API\n  const sizePrices: Record<string, number> = {\n    's-1vcpu-1gb': 5,      // $5/month\n    's-1vcpu-2gb': 10,     // $10/month\n    's-2vcpu-2gb': 15,     // $15/month\n    's-2vcpu-4gb': 20,     // $20/month\n    's-4vcpu-8gb': 40,     // $40/month\n    's-8vcpu-16gb': 80,    // $80/month\n    // Add more sizes as needed\n  };\n  \n  return sizePrices[size] || 5; // Default to $5 if size not found\n}", "import express from \"express\";\nimport { pool } from \"../db.js\";\nimport { logger } from \"../utils/logger.js\";\n\nconst router = express.Router();\n\n// Health check endpoint that checks database connectivity\nrouter.get(\"/\", async (req, res) => {\n  try {\n    // Check database connection\n    await pool.query('SELECT 1');\n\n    // Return success response\n    return res.status(200).json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV\n    });\n  } catch (error) {\n    logger.error(\"Health check failed:\", error);\n\n    // Return error response\n    return res.status(500).json({\n      status: \"unhealthy\",\n      timestamp: new Date().toISOString(),\n      error: \"Database connection failed\"\n    });\n  }\n});\n\nexport default router;\n", "import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport express from 'express';\n\n// Get correct directory paths using ESM\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport async function setupVite(app, server) {\n  const { createServer } = await import('vite');\n\n  const vite = await createServer({\n    server: { middlewareMode: true },\n    appType: 'custom',\n  });\n\n  // Use Vite's development middleware in development mode\n  app.use(vite.middlewares);\n\n  return { vite, server };\n}\n\n// Serve static files in production mode\nexport function serveStatic(app) {\n  // First try to serve from dist/client\n  const clientDistPath = path.resolve(__dirname, '../client');\n  if (fs.existsSync(clientDistPath)) {\n    app.use(express.static(clientDistPath));\n  }\n\n  // Fallback to serving from dist directory\n  const distPath = path.resolve(__dirname, '..');\n  app.use(express.static(distPath));\n\n  // Serve index.html for all non-API routes\n  app.get('*', async (req, res, next) => {\n    if (req.path.startsWith('/api')) {\n      return next();\n    }\n\n    try {\n      // Try different potential locations for index.html\n      let indexHtml;\n      const potentialPaths = [\n        path.resolve(__dirname, '../client/index.html'),\n        path.resolve(__dirname, '../public/index.html'),\n        path.resolve(__dirname, '../index.html'),\n      ];\n\n      for (const htmlPath of potentialPaths) {\n        if (fs.existsSync(htmlPath)) {\n          indexHtml = await fs.promises.readFile(htmlPath, 'utf-8');\n          break;\n        }\n      }\n\n      if (!indexHtml) {\n        throw new Error('Could not find index.html in any expected location');\n      }\n\n      res.setHeader('Content-Type', 'text/html');\n      res.status(200).end(indexHtml);\n    } catch (e) {\n      console.error('Error serving index.html:', e);\n      res.status(500).end('Internal Server Error: Could not load index.html');\n    }\n  });\n}\n\nexport function log(...args) {\n  console.log(`[vite]`, ...args);\n}\n", "import { Request, Response, NextFunction, Express } from 'express';\nimport { storage } from '../storage';\nimport { Server, User, SupportTicket, BillingTransaction } from '@shared/schema';\nimport { log } from '../vite';\nimport * as crypto from 'crypto';\nimport path from 'path';\nimport { promises } from 'fs';\n\n// Admin middleware to check if user is an admin\nexport function adminMiddleware(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  \n  if (!req.user.isAdmin) {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  \n  next();\n}\n\nexport function registerAdminRoutes(app: Express) {\n  // Apply admin middleware to all admin routes\n  app.use('/api/admin', adminMiddleware);\n  \n  // Get admin statistics\n  app.get('/api/admin/stats', async (req: Request, res: Response) => {\n    try {\n      const users = await storage.getAllUsers();\n      const servers = await storage.getAllServers();\n      const tickets = await storage.getAllTickets();\n      const transactions = await storage.getAllTransactions();\n      \n      // Calculate total deposits (converts cents to dollars)\n      const totalDeposits = transactions\n        .filter((tx: BillingTransaction) => tx.type === 'deposit' && tx.status === 'completed')\n        .reduce((sum: number, tx: BillingTransaction) => sum + tx.amount, 0) / 100; // Convert cents to dollars\n      \n      // Calculate total spending\n      const totalSpending = transactions\n        .filter((tx: BillingTransaction) => tx.type === 'charge' && tx.status === 'completed')\n        .reduce((sum: number, tx: BillingTransaction) => sum + tx.amount, 0) / 100; // Convert cents to dollars\n      \n      // Calculate servers by region\n      const serversByRegion = servers.reduce((acc: Record<string, number>, server: Server) => {\n        acc[server.region] = (acc[server.region] || 0) + 1;\n        return acc;\n      }, {});\n      \n      // Calculate servers by size\n      const serversBySize = servers.reduce((acc: Record<string, number>, server: Server) => {\n        acc[server.size] = (acc[server.size] || 0) + 1;\n        return acc;\n      }, {});\n      \n      const stats = {\n        users: {\n          total: users.length,\n          active: users.length, // We don't have an active status for users yet\n          admins: users.filter((user: User) => user.isAdmin).length\n        },\n        servers: {\n          total: servers.length,\n          active: servers.filter((server: Server) => server.status === 'active').length,\n          byRegion: serversByRegion,\n          bySize: serversBySize\n        },\n        tickets: {\n          total: tickets.length,\n          open: tickets.filter((ticket: SupportTicket) => ticket.status === 'open').length,\n          closed: tickets.filter((ticket: SupportTicket) => ticket.status === 'closed').length,\n          critical: tickets.filter((ticket: SupportTicket) => ticket.priority === 'critical').length\n        },\n        billing: {\n          totalDeposits,\n          totalSpending\n        }\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      log(`Admin stats error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to load admin statistics' });\n    }\n  });\n  \n  // Get all users\n  app.get('/api/admin/users', async (req: Request, res: Response) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      log(`Admin users error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to load users' });\n    }\n  });\n  \n  // Update user balance\n  app.patch('/api/admin/users/:id/balance', async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { amount } = req.body;\n      \n      // Validate input\n      if (isNaN(userId) || !amount || isNaN(amount)) {\n        return res.status(400).json({ message: 'Invalid user ID or amount' });\n      }\n      \n      // Get user to check if exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Set the user's balance directly to the specified amount\n      const updatedUser = await storage.updateUser(userId, {\n        balance: amount\n      });\n      \n      // Create a transaction record\n      const prevBalance = user.balance;\n      const amountDifference = amount - prevBalance;\n      \n      if (amountDifference !== 0) {\n        const transactionType = amountDifference > 0 ? 'deposit' : 'charge';\n        const absAmount = Math.abs(amountDifference);\n        \n        await storage.createTransaction({\n          userId,\n          amount: absAmount,\n          type: transactionType,\n          status: 'completed',\n          currency: 'USD',\n          paypalTransactionId: null,\n          createdAt: new Date(),\n          description: `Admin adjustment: ${amountDifference > 0 ? 'Added' : 'Deducted'} ${absAmount/100} USD`\n        });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      log(`Admin update user balance error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to update user balance' });\n    }\n  });\n\n  // Update user details\n  app.patch('/api/admin/users/:id', async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { username, password, isAdmin, isSuspended } = req.body;\n      \n      // Validate userId\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      // Fetch target user to check permissions\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Prepare update object\n      const updates: Partial<User> = {};\n      \n      // Only include fields that are provided\n      if (username !== undefined) updates.username = username;\n      if (password !== undefined) updates.password = password;\n      if (isAdmin !== undefined) updates.isAdmin = isAdmin;\n      if (isSuspended !== undefined) updates.isSuspended = isSuspended;\n      \n      // Safety checks\n      \n      // Don't allow admins to remove their own admin status\n      if (isAdmin === false && req.user?.id === userId) {\n        return res.status(403).json({ message: \"Cannot remove your own admin privileges\" });\n      }\n      \n      // Don't allow suspending an admin\n      if (isSuspended === true && targetUser.isAdmin) {\n        return res.status(403).json({ message: \"Cannot suspend admin accounts\" });\n      }\n      \n      // Don't allow admins to suspend themselves\n      if (isSuspended === true && req.user?.id === userId) {\n        return res.status(403).json({ message: \"Cannot suspend your own account\" });\n      }\n      \n      // Update user details\n      const updatedUser = await storage.updateUser(userId, updates);\n      \n      log(`Admin updated user ${userId} (${username || targetUser.username})`, 'admin');\n      \n      res.json(updatedUser);\n    } catch (error) {\n      log(`Admin update user details error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to update user details' });\n    }\n  });\n  \n  // Get all servers\n  app.get('/api/admin/servers', async (req: Request, res: Response) => {\n    try {\n      const servers = await storage.getAllServers();\n      res.json(servers);\n    } catch (error) {\n      log(`Admin servers error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to load servers' });\n    }\n  });\n  \n  // Get all tickets\n  app.get('/api/admin/tickets', async (req: Request, res: Response) => {\n    try {\n      const tickets = await storage.getAllTickets();\n      res.json(tickets);\n    } catch (error) {\n      log(`Admin tickets error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to load tickets' });\n    }\n  });\n  \n  // Get all transactions\n  app.get('/api/admin/transactions', async (req: Request, res: Response) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json(transactions);\n    } catch (error) {\n      log(`Admin transactions error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to load transactions' });\n    }\n  });\n  \n  // Get all IP bans\n  app.get('/api/admin/ip-bans', async (req: Request, res: Response) => {\n    try {\n      const ipBans = await storage.getAllIPBans();\n      res.json(ipBans);\n    } catch (error) {\n      log(`Admin IP bans error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to load IP bans' });\n    }\n  });\n  \n  // Create IP ban\n  app.post('/api/admin/ip-bans', async (req: Request, res: Response) => {\n    try {\n      const { ipAddress, reason, expiresAt } = req.body;\n      \n      // Validate input\n      if (!ipAddress || !reason) {\n        return res.status(400).json({ message: 'IP address and reason are required' });\n      }\n      \n      // Check if IP is already banned\n      const existingBan = await storage.getIPBan(ipAddress);\n      if (existingBan) {\n        return res.status(409).json({ message: 'IP address is already banned' });\n      }\n      \n      // Create the ban\n      const ipBan = await storage.createIPBan({\n        ipAddress,\n        reason,\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\n        bannedBy: req.user!.id,\n        isActive: true\n      });\n      \n      res.status(201).json(ipBan);\n    } catch (error) {\n      log(`Admin create IP ban error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to create IP ban' });\n    }\n  });\n  \n  // Delete IP ban\n  app.delete('/api/admin/ip-bans/:id', async (req: Request, res: Response) => {\n    try {\n      const banId = parseInt(req.params.id);\n      \n      // Validate input\n      if (isNaN(banId)) {\n        return res.status(400).json({ message: 'Invalid ban ID' });\n      }\n      \n      await storage.deleteIPBan(banId);\n      res.status(204).send();\n    } catch (error) {\n      log(`Admin delete IP ban error: ${error}`, 'admin');\n      res.status(500).json({ message: 'Failed to delete IP ban' });\n    }\n  });\n  \n  // CloudRack Terminal Key Cleanup Endpoint\n  app.delete('/api/admin/cloudrack-terminal-keys', async (req: Request, res: Response) => {\n    try {\n      // Find all SSH keys that are marked as CloudRack Terminal keys\n      const allUsers = await storage.getAllUsers();\n      let totalRemoved = 0;\n      let userCount = 0;\n      \n      // For each user, find and remove their CloudRack keys\n      for (const user of allUsers) {\n        const keys = await storage.getSSHKeysByUser(user.id);\n        const cloudRackKeys = keys.filter(key => key.isCloudRackKey && !key.isSystemKey);\n        \n        if (cloudRackKeys.length > 0) {\n          userCount++;\n          \n          // Delete each CloudRack key\n          for (const key of cloudRackKeys) {\n            await storage.deleteSSHKey(key.id);\n            totalRemoved++;\n            log(`Removed CloudRack Terminal Key ${key.id} for user ${user.id}`, 'admin');\n          }\n        }\n      }\n      \n      return res.status(200).json({\n        message: `Successfully cleaned up CloudRack Terminal Keys. Removed ${totalRemoved} keys from ${userCount} users.`,\n        keysRemoved: totalRemoved,\n        usersAffected: userCount\n      });\n    } catch (error) {\n      log(`Error cleaning up CloudRack Terminal Keys: ${error}`, 'admin');\n      return res.status(500).json({\n        message: \"Error cleaning up CloudRack Terminal Keys\",\n        error: (error as Error).message\n      });\n    }\n  });\n\n  // Get all volumes across the platform\n  app.get('/api/admin/volumes', async (req: Request, res: Response) => {\n    try {\n      // Get all volumes from the database\n      const servers = await storage.getAllServers();\n      const volumes = [];\n      \n      // For each server, get its volumes\n      for (const server of servers) {\n        const serverVolumes = await storage.getVolumesByServer(server.id);\n        // Add volumes to the list with server information\n        volumes.push(...serverVolumes.map(volume => ({\n          ...volume,\n          serverName: server.name,\n          serverRegion: server.region\n        })));\n      }\n\n      // Get unattached volumes (those not associated with any server)\n      const unattachedVolumes = await storage.getUnattachedVolumes();\n      volumes.push(...unattachedVolumes.map(volume => ({\n        ...volume,\n        serverName: null,\n        serverRegion: null\n      })));\n      \n      // Return volumes list\n      res.status(200).json(volumes);\n    } catch (error) {\n      console.error('Error getting volumes:', error);\n      res.status(500).json({ message: 'Failed to retrieve volumes' });\n    }\n  });\n\n  // Get volume stats for admin dashboard\n  app.get('/api/admin/volume-stats', async (req: Request, res: Response) => {\n    try {\n      // Get all volumes from the database\n      const servers = await storage.getAllServers();\n      const volumes = [];\n      \n      // For each server, get its volumes\n      for (const server of servers) {\n        const serverVolumes = await storage.getVolumesByServer(server.id);\n        volumes.push(...serverVolumes);\n      }\n      \n      // Get unattached volumes\n      const unattachedVolumes = await storage.getUnattachedVolumes();\n      volumes.push(...unattachedVolumes);\n\n      // Calculate total storage\n      const totalStorage = volumes.reduce((total, volume) => total + volume.size, 0);\n      \n      // Calculate attached storage\n      const attachedStorage = volumes\n        .filter(volume => volume.serverId !== null)\n        .reduce((total, volume) => total + volume.size, 0);\n      \n      // Calculate unattached storage\n      const unattachedStorage = volumes\n        .filter(volume => volume.serverId === null)\n        .reduce((total, volume) => total + volume.size, 0);\n      \n      // Return stats\n      res.status(200).json({\n        totalStorage,\n        attachedStorage,\n        unattachedStorage,\n        volumeCount: volumes.length,\n        attachedVolumeCount: volumes.filter(volume => volume.serverId !== null).length,\n        unattachedVolumeCount: volumes.filter(volume => volume.serverId === null).length\n      });\n    } catch (error) {\n      console.error('Error getting volume stats:', error);\n      res.status(500).json({ message: 'Failed to retrieve volume statistics' });\n    }\n  });\n  \n  // API Key Management for Admin\n  app.get('/api/admin/users/:id/api-key', async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.id);\n      \n      if (isNaN(userId)) {\n        return res.status(400).json({ message: 'Invalid user ID' });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Return the current API key (or null if not set)\n      res.status(200).json({ apiKey: user.apiKey });\n    } catch (error) {\n      console.error('Error getting user API key:', error);\n      res.status(500).json({ message: 'Failed to retrieve API key' });\n    }\n  });\n  \n  app.post('/api/admin/users/:id/api-key', async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.id);\n      \n      if (isNaN(userId)) {\n        return res.status(400).json({ message: 'Invalid user ID' });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Generate a new API key\n      const apiKey = crypto.randomBytes(32).toString('hex');\n      \n      // Update the user with the new API key\n      await storage.updateUser(userId, { apiKey });\n      \n      res.status(200).json({ \n        apiKey: apiKey,\n        message: 'API key regenerated successfully' \n      });\n    } catch (error) {\n      console.error('Error regenerating API key:', error);\n      res.status(500).json({ message: 'Failed to regenerate API key' });\n    }\n  });\n\n  // Log that routes were registered\n  log('Admin routes registered', 'admin');\n}", "import express from \"express\";\nimport { getGitHubOAuthURL, exchangeCodeForToken, saveGitHubToken, getUserRepositories } from \"../services/github\";\nimport { requireAuth } from \"../auth\";\nimport { logger } from \"../utils/logger\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport fetch from \"node-fetch\";\n\nconst router = express.Router();\n\n// Authentication required for most GitHub routes\nrouter.use(\"/repos\", requireAuth);\nrouter.use(\"/auth-url\", requireAuth);\nrouter.use(\"/disconnect\", requireAuth);\n\n// Routes\nrouter.get(\"/repos\", async (req, res) => {\n  try {\n    const githubToken = req.user.githubToken;\n\n    if (!githubToken) {\n      return res.status(401).json({ error: \"GitHub account not connected\" });\n    }\n\n    const repos = await getUserRepositories(githubToken);\n    res.json(repos);\n  } catch (error) {\n    console.error(\"GitHub repositories fetch error:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get GitHub OAuth URL - Modified to support both redirect and JSON response\nrouter.get(\"/auth-url\", async (req, res) => {\n  try {\n    const clientId = process.env.GITHUB_CLIENT_ID?.trim();\n    const redirectUri = process.env.GITHUB_REDIRECT_URI?.trim();\n\n    // Check if the request wants JSON response instead of redirect\n    const wantJson = req.query.json === 'true';\n\n    if (!clientId || !redirectUri) {\n      return res.status(500).json({ error: \"GitHub OAuth configuration is missing\" });\n    }\n\n    // Generate the GitHub OAuth URL\n    const authUrl = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=repo,user:email`;\n\n    // Log the URL for debugging\n    logger.info(`\uD83D\uDC19 [GitHub] GitHub OAuth URL generated: ${authUrl}`);\n\n    // If JSON response is requested, return the URL as JSON\n    if (wantJson) {\n      return res.json({ url: authUrl });\n    }\n\n    // Otherwise, redirect directly to GitHub (this is now the default behavior)\n    return res.redirect(authUrl);\n  } catch (error) {\n    logger.error(\"Error generating GitHub auth URL:\", error);\n    res.status(500).json({ error: \"Failed to generate GitHub auth URL\" });\n  }\n});\n\n// Handle OAuth callback\nrouter.get(\"/callback\", async (req, res) => {\n  try {\n    const { code } = req.query;\n    logger.info(`\uD83D\uDC19 [GitHub] Received OAuth callback with code: ${code ? code.toString().substring(0, 10) + '...' : 'MISSING'}`);\n\n    if (!code) {\n      return res.status(400).json({ error: \"Missing code parameter\" });\n    }\n\n    // Access environment variables directly\n    const clientId = process.env.GITHUB_CLIENT_ID;\n    const clientSecret = process.env.GITHUB_CLIENT_SECRET;\n    const redirectUri = process.env.GITHUB_REDIRECT_URI;\n\n    // Log the exact values being used\n    logger.info(`\uD83D\uDC19 [GitHub] Using Client ID: ${clientId?.substring(0, 5)}...`);\n    logger.info(`\uD83D\uDC19 [GitHub] Using Redirect URI: ${redirectUri}`);\n\n    if (!clientId || !clientSecret || !redirectUri) {\n      return res.status(500).json({ error: \"GitHub OAuth configuration is missing\" });\n    }\n\n    // Exchange code for access token with DETAILED error logging\n    logger.info(`\uD83D\uDC19 [GitHub] Sending token request to GitHub with redirect_uri=${redirectUri}`);\n\n    const tokenResponse = await fetch(\"https://github.com/login/oauth/access_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code,\n        redirect_uri: redirectUri\n      })\n    });\n\n    const tokenData = await tokenResponse.json();\n\n    // Log FULL error details from GitHub\n    if (tokenData.error) {\n      logger.error(`\uD83D\uDC19 [GitHub] GitHub API error: ${tokenData.error}`);\n      logger.error(`\uD83D\uDC19 [GitHub] GitHub error description: ${tokenData.error_description}`);\n      logger.error(`\uD83D\uDC19 [GitHub] GitHub error URI: ${tokenData.error_uri}`);\n      return res.status(500).json({\n        error: \"Failed to obtain access token\",\n        github_error: tokenData.error,\n        description: tokenData.error_description\n      });\n    }\n\n    const accessToken = tokenData.access_token;\n    logger.success(`\uD83D\uDC19 [GitHub] Successfully obtained access token`);\n\n    // Fetch user information from GitHub\n    const userResponse = await fetch(\"https://api.github.com/user\", {\n      headers: {\n        \"Authorization\": `token ${accessToken}`,\n        \"Accept\": \"application/vnd.github.v3+json\"\n      }\n    });\n\n    const userData = await userResponse.json();\n\n    if (!userData.id) {\n      logger.error(`\uD83D\uDC19 [GitHub] Failed to fetch GitHub user data: ${JSON.stringify(userData)}`);\n      return res.status(500).json({ error: \"Failed to fetch user information from GitHub\" });\n    }\n\n    logger.success(`\uD83D\uDC19 [GitHub] Linked GitHub account: ${userData.login}`);\n\n    // Save GitHub token and user information in the database\n    await db.update(users)\n      .set({\n        githubToken: accessToken,\n        githubUsername: userData.login,\n        githubUserId: userData.id,\n        githubConnectedAt: new Date().toISOString()\n      })\n      .where(eq(users.id, req.user.id));\n\n    // Redirect with success message\n    res.redirect(\"/dashboard?github=connected&username=\" + userData.login);\n  } catch (error) {\n    logger.error(\"Error handling GitHub OAuth callback:\", error);\n    res.status(500).json({ error: \"Failed to handle GitHub OAuth callback: \" + error.message });\n  }\n});\n\n// Disconnect GitHub account\nrouter.post(\"/disconnect\", async (req, res) => {\n  try {\n    await saveGitHubToken(req.user.id, null);\n    res.json({ success: true });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;\n", "import fetch from \"node-fetch\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { logger } from \"../utils/logger\";\n\n// Get OAuth URL for GitHub authentication\nexport async function getGitHubOAuthURL() {\n  try {\n    // Make sure to trim the client ID to avoid spaces\n    const clientId = process.env.GITHUB_CLIENT_ID?.trim();\n    const redirectUri = process.env.GITHUB_REDIRECT_URI?.trim();\n\n    if (!clientId || !redirectUri) {\n      throw new Error(\"GitHub OAuth configuration is missing\");\n    }\n\n    const authUrl = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=repo,user:email`;\n\n    // Log the URL for debugging\n    logger.info(`\uD83D\uDC19 [GitHub] Generated OAuth URL: ${authUrl}`);\n    console.log(`Generated GitHub OAuth URL: ${authUrl}`);\n\n    return authUrl;\n  } catch (error) {\n    logger.error(\"Error generating GitHub auth URL:\", error);\n    throw error;\n  }\n}\n\n// Exchange code for access token\nexport async function exchangeCodeForToken(code: string) {\n  try {\n    // Make sure to trim the client ID and secret to avoid spaces\n    const clientId = process.env.GITHUB_CLIENT_ID?.trim();\n    const clientSecret = process.env.GITHUB_CLIENT_SECRET?.trim();\n    const redirectUri = process.env.GITHUB_REDIRECT_URI?.trim();\n\n    if (!clientId || !clientSecret || !redirectUri) {\n      throw new Error(\"GitHub OAuth configuration is missing\");\n    }\n\n    const response = await fetch(\"https://github.com/login/oauth/access_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code,\n        redirect_uri: redirectUri\n      })\n    });\n\n    const data = await response.json();\n\n    if (!data.access_token) {\n      logger.error(`GitHub token exchange returned no token: ${JSON.stringify(data)}`);\n      throw new Error(\"No access token in response\");\n    }\n\n    return data.access_token;\n  } catch (error) {\n    logger.error(\"Error exchanging code for token:\", error);\n    throw error;\n  }\n}\n\n// Save GitHub token to user\nexport async function saveGitHubToken(userId: number, token: string | null, userData?: any) {\n  try {\n    await db.update(users)\n      .set({\n        githubToken: token,\n        githubUsername: userData?.login || null,\n        githubUserId: userData?.id || null,\n        githubConnectedAt: token ? new Date().toISOString() : null\n      })\n      .where(eq(users.id, userId));\n\n    return true;\n  } catch (error) {\n    logger.error(\"Error saving GitHub token:\", error);\n    throw error;\n  }\n}\n\n// Get user's GitHub repositories\nexport async function getUserRepositories(token: string) {\n  try {\n    const response = await fetch(\"https://api.github.com/user/repos?sort=updated&per_page=100\", {\n      headers: {\n        \"Authorization\": `token ${token}`,\n        \"Accept\": \"application/vnd.github.v3+json\"\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      logger.error(`GitHub API error: ${response.status} ${errorText}`);\n      throw new Error(`Failed to fetch repositories: ${response.status}`);\n    }\n\n    const repos = await response.json();\n    return repos;\n  } catch (error) {\n    logger.error(\"Error fetching GitHub repositories:\", error);\n    throw error;\n  }\n}\n\n// Get branches for a GitHub repository\nexport async function getRepositoryBranches(token: string, owner: string, repo: string) {\n  try {\n    const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/branches`, {\n      headers: {\n        \"Authorization\": `token ${token}`,\n        \"Accept\": \"application/vnd.github.v3+json\"\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      logger.error(`GitHub API error: ${response.status} ${errorText}`);\n      throw new Error(`Failed to fetch branches: ${response.status}`);\n    }\n\n    const branches = await response.json();\n    return branches;\n  } catch (error) {\n    logger.error(\"Error fetching GitHub branches:\", error);\n    throw error;\n  }\n}\n\nexport async function createGitHubDeployment(token: string, repo: string, values: any) {\n  // This would integrate with GitHub Actions or Deployments\n  // For now, we'll just return a success message\n  return { success: true, message: \"Deployment initialized\" };\n}\n\n// Get GitHub user information to verify connection\nexport async function getGitHubUser(token: string) {\n  try {\n    const response = await fetch(\"https://api.github.com/user\", {\n      headers: {\n        \"Authorization\": `token ${token}`,\n        \"Accept\": \"application/vnd.github.v3+json\"\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      logger.error(`GitHub API error: ${response.status} ${errorText}`);\n      throw new Error(`Failed to fetch user: ${response.status}`);\n    }\n\n    const user = await response.json();\n    return user;\n  } catch (error) {\n    logger.error(\"Error fetching GitHub user:\", error);\n    throw error;\n  }\n}\n", "import express from \"express\";\nimport crypto from \"crypto\";\nimport { logger } from \"../utils/logger\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport * as appPlatform from \"../services/app-platform\";\n\nconst router = express.Router();\n\n// GitHub webhook secret (used to verify webhook signatures)\nconst WEBHOOK_SECRET = process.env.GITHUB_WEBHOOK_SECRET || '';\n\n// Raw body parser middleware for GitHub webhooks\n// GitHub uses the raw body to generate the signature\nrouter.use(express.json({\n  verify: (req: express.Request, res: express.Response, buf: Buffer) => {\n    (req as any).rawBody = buf;\n  }\n}));\n\nfunction verifyGitHubWebhook(req: express.Request) {\n  // Skip verification if webhook secret is not configured\n  if (!WEBHOOK_SECRET) {\n    logger.warning('GitHub webhook secret not configured, skipping signature verification');\n    return true;\n  }\n\n  const signature = req.headers['x-hub-signature-256'] as string;\n  if (!signature) {\n    logger.warning('No signature found in GitHub webhook');\n    return false;\n  }\n\n  // Calculate the expected signature\n  const hmac = crypto.createHmac('sha256', WEBHOOK_SECRET);\n  const calculatedSignature = 'sha256=' + hmac.update((req as any).rawBody).digest('hex');\n\n  // Constant-time comparison to prevent timing attacks\n  return crypto.timingSafeEqual(\n    Buffer.from(calculatedSignature),\n    Buffer.from(signature)\n  );\n}\n\n// Helper function to find users who have auto-deploy configured for a repo/branch\nasync function findUsersForRepository(repoId: string, branch: string) {\n  try {\n    // Find deployments that match this repo ID and branch\n    // In a real implementation, you would query your database for deployments\n    // associated with this repository and branch\n\n    // This is a mock implementation until we have actual repository-deployment associations\n    // In a production system, you'd have a table linking users to repositories and branches\n    const usersWithAutoDeploy = await db.query.users.findMany({\n      where: eq(users.githubToken, null, false) // Only users with GitHub tokens\n    });\n\n    return usersWithAutoDeploy;\n  } catch (error) {\n    logger.error(`Error finding users for repository ${repoId}:${branch}:`, error);\n    return [];\n  }\n}\n\n// Receive GitHub webhook events\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const event = req.headers['x-github-event'] as string;\n    logger.info(`Received GitHub webhook event: ${event}`);\n\n    // Verify webhook signature if enabled\n    if (!verifyGitHubWebhook(req)) {\n      logger.warning('Invalid GitHub webhook signature');\n      return res.status(401).json({ error: 'Invalid signature' });\n    }\n\n    // Handle push events (for automatic deployments)\n    if (event === 'push') {\n      const payload = req.body;\n      const { repository, ref } = payload;\n      const branchName = ref.replace('refs/heads/', '');\n\n      logger.info(`Push event for repository ${repository.full_name} on branch ${branchName}`);\n\n      // Find users who have this repository configured for auto-deploy\n      const applicableUsers = await findUsersForRepository(repository.id.toString(), branchName);\n      if (applicableUsers.length === 0) {\n        logger.info(`No users found with auto-deploy configured for ${repository.full_name}:${branchName}`);\n        return res.status(200).json({ message: 'No applicable configurations found' });\n      }\n\n      // Trigger deployments for each applicable user\n      for (const user of applicableUsers) {\n        try {\n          logger.info(`Triggering auto-deploy for user ${user.id} (${user.username})`);\n\n          // Find deployment configuration for this user/repo/branch\n          // For now, we'll mock this\n          const deploymentConfig = {\n            name: `${repository.name}-${branchName}`,\n            repoFullName: repository.full_name,\n            branch: branchName,\n            region: 'nyc', // Default region\n            size: 'basic-xs' // Default size\n          };\n\n          // Trigger the deployment using the app platform service\n          await appPlatform.createAppFromGitHub(user.id, {\n            name: deploymentConfig.name,\n            repository: deploymentConfig.repoFullName,\n            branch: deploymentConfig.branch,\n            region: deploymentConfig.region,\n            size: deploymentConfig.size\n          });\n\n          logger.success(`Auto-deploy triggered successfully for ${repository.full_name}:${branchName}`);\n        } catch (deployError) {\n          logger.error(`Failed to trigger auto-deploy for user ${user.id}:`, deployError);\n        }\n      }\n    }\n\n    // Handle other GitHub webhook events\n    else if (event === 'installation' || event === 'installation_repositories') {\n      // Handle GitHub App installation events\n      const action = req.body.action;\n      logger.info(`GitHub App installation event: ${action}`);\n      // Add handling for installations\n    }\n\n    // Always return success to GitHub\n    res.status(200).json({ received: true });\n\n  } catch (error) {\n    logger.error(`Error processing GitHub webhook:`, error);\n    res.status(500).json({ error: 'Failed to process webhook' });\n  }\n});\n\nexport default router;", "import fetch from \"node-fetch\";\nimport { logger } from \"../utils/logger\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\n// Load DigitalOcean token from environment variable\nconst DO_TOKEN = process.env.DIGITAL_OCEAN_API_KEY || \"\";\nconst BASE_URL = \"https://api.digitalocean.com/v2\";\nconst APP_PLATFORM_BASE = `${BASE_URL}/apps`;\n\ninterface DeploymentInput {\n  name: string;\n  repository: string;\n  branch: string;\n  region: string;\n  size: string;\n  envVars?: Record<string, string>;\n}\n\n/**\n * Creates a new app on DigitalOcean App Platform from a GitHub repository\n */\nexport async function createAppFromGitHub(userId: number, options: {\n  name: string;\n  repository: string;\n  branch: string;\n  region: string;\n  size: string;\n  environmentVariables?: Record<string, string>;\n}) {\n  // Get the user to retrieve GitHub token\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId)\n  });\n\n  if (!user?.githubToken) {\n    throw new Error(\"User is not connected to GitHub\");\n  }\n\n  // Format the repository to match DO's expectations\n  const [owner, repo] = options.repository.split('/');\n\n  // Build the App Platform spec\n  const appSpec = {\n    name: options.name,\n    region: options.region,\n    services: [\n      {\n        name: options.name,\n        github: {\n          repo: options.repository,\n          branch: options.branch,\n          deploy_on_push: true\n        },\n        source_dir: \"/\",\n        instance_size_slug: options.size,\n        instance_count: 1,\n        http_port: 8080,\n        run_command: \"start\",\n        envs: Object.entries(options.environmentVariables || {}).map(([key, value]) => ({\n          key,\n          value,\n          scope: \"RUN_AND_BUILD_TIME\"\n        }))\n      }\n    ]\n  };\n\n  try {\n    logger.info(`Creating new App Platform app: ${options.name} from ${options.repository}:${options.branch}`);\n\n    const response = await fetch(`${BASE_URL}/apps`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        spec: appSpec\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      logger.error(`Error creating app: ${response.status} ${errorData}`);\n      throw new Error(`Failed to create app: ${response.status} ${errorData}`);\n    }\n\n    const data = await response.json();\n    logger.success(`Successfully created app: ${data.app.id}`);\n    return data.app;\n  } catch (error) {\n    logger.error(`Error in createAppFromGitHub: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Redeploy an existing application\n */\nexport async function redeployApp(deployment: any) {\n  try {\n    logger.info(`Redeploying app: ${deployment.id}`);\n\n    // Make API call to trigger new deployment\n    const response = await fetch(`${APP_PLATFORM_BASE}/${deployment.appId}/deployments`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Failed to redeploy app: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    logger.success(`Redeployment triggered: ${data.deployment.id}`);\n\n    return data.deployment;\n  } catch (error) {\n    logger.error(`Error redeploying app:`, error);\n    throw error;\n  }\n}\n\n/**\n * Restart an existing application\n */\nexport async function restartApp(deployment: any) {\n  try {\n    logger.info(`Restarting app: ${deployment.id}`);\n\n    // Make API call to restart the app\n    const response = await fetch(`${APP_PLATFORM_BASE}/${deployment.appId}/restart`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Failed to restart app: ${response.status} ${errorText}`);\n    }\n\n    logger.success(`App restart triggered: ${deployment.id}`);\n    return true;\n  } catch (error) {\n    logger.error(`Error restarting app:`, error);\n    throw error;\n  }\n}\n\n/**\n * Get all apps for a user\n */\nexport async function getApps() {\n  try {\n    const response = await fetch(`${BASE_URL}/apps`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get apps: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.apps;\n  } catch (error) {\n    logger.error(`Error in getApps: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Get app details\n */\nexport async function getApp(appId: string) {\n  try {\n    const response = await fetch(`${BASE_URL}/apps/${appId}`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get app: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.app;\n  } catch (error) {\n    logger.error(`Error in getApp: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Get app deployments\n */\nexport async function getAppDeployments(appId: string) {\n  try {\n    const response = await fetch(`${BASE_URL}/apps/${appId}/deployments`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get app deployments: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.deployments;\n  } catch (error) {\n    logger.error(`Error in getAppDeployments: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Create a new deployment\n */\nexport async function createDeployment(appId: string) {\n  try {\n    const response = await fetch(`${BASE_URL}/apps/${appId}/deployments`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        force_build: true\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to create deployment: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.deployment;\n  } catch (error) {\n    logger.error(`Error in createDeployment: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Get app instance sizes\n */\nexport async function getInstanceSizes() {\n  try {\n    const response = await fetch(`${BASE_URL}/apps/tiers/instance_sizes`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get instance sizes: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.instance_sizes;\n  } catch (error) {\n    logger.error(`Error in getInstanceSizes: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Get app regions\n */\nexport async function getRegions() {\n  try {\n    const response = await fetch(`${BASE_URL}/apps/regions`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get regions: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.regions;\n  } catch (error) {\n    logger.error(`Error in getRegions: ${(error as Error).message}`);\n    throw error;\n  }\n}\n\n/**\n * Get deployment details\n */\nexport async function getDeployment(deploymentId: string) {\n  try {\n    const response = await fetch(`${APP_PLATFORM_BASE}/deployments/${deploymentId}`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Failed to get deployment: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    return data.deployment;\n  } catch (error) {\n    logger.error(`Error getting deployment:`, error);\n    throw error;\n  }\n}\n\n/**\n * Get app logs\n */\nexport async function getAppLogs(appId: string, type = \"run\") {\n  try {\n    const response = await fetch(`${APP_PLATFORM_BASE}/${appId}/logs?type=${type}&follow=false&pod_connection_timeout=30`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_TOKEN}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Failed to get logs: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    return data.logs;\n  } catch (error) {\n    logger.error(`Error getting logs:`, error);\n    throw error;\n  }\n}\n", "import express from \"express\";\nimport { requireAuth } from \"../auth\";\nimport { logger } from \"../utils/logger\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport fetch from \"node-fetch\";\n\nconst router = express.Router();\n\n// Require admin access for these debug endpoints\nrouter.use((req, res, next) => {\n  if (!req.user || !req.user.isAdmin) {\n    return res.status(403).json({ error: \"Admin access required\" });\n  }\n  next();\n});\n\n// Get GitHub status\nrouter.get(\"/status\", async (req, res) => {\n  try {\n    // Get GitHub token status for debugging\n    const user = await db.query.users.findFirst({\n      where: eq(users.id, req.user.id)\n    });\n\n    if (!user?.githubToken) {\n      return res.json({\n        connected: false,\n        tokenStatus: \"missing\"\n      });\n    }\n\n    // Test the token by making a request to GitHub API\n    try {\n      const response = await fetch(\"https://api.github.com/user\", {\n        headers: {\n          Authorization: `token ${user.githubToken}`,\n          Accept: \"application/vnd.github.v3+json\",\n          \"User-Agent\": \"SkyVPS360-Platform\"\n        }\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n\n        // Get token scopes\n        const scopes = response.headers.get(\"x-oauth-scopes\")?.split(\", \") || [];\n\n        return res.json({\n          connected: true,\n          tokenStatus: \"valid\",\n          username: userData.login,\n          userId: userData.id,\n          email: userData.email,\n          avatarUrl: userData.avatar_url,\n          scopes,\n          profileUrl: userData.html_url\n        });\n      } else {\n        return res.json({\n          connected: false,\n          tokenStatus: \"invalid\",\n          error: `GitHub API returned status ${response.status}`\n        });\n      }\n    } catch (error) {\n      return res.json({\n        connected: false,\n        tokenStatus: \"error\",\n        error: (error as Error).message\n      });\n    }\n  } catch (error) {\n    logger.error(\"Error in GitHub debug status endpoint:\", error);\n    res.status(500).json({ error: \"Failed to get GitHub status\" });\n  }\n});\n\n// Test webhook delivery\nrouter.post(\"/test-webhook\", async (req, res) => {\n  try {\n    logger.info(\"Simulating GitHub webhook event\");\n\n    // Mock a push webhook payload\n    const mockPayload = {\n      ref: \"refs/heads/main\",\n      repository: {\n        id: 123456789,\n        name: \"test-repo\",\n        full_name: \"testuser/test-repo\",\n        private: false\n      },\n      sender: {\n        id: req.user.id,\n        login: req.user.username\n      },\n      commits: [\n        {\n          id: \"abc123\",\n          message: \"Test commit\",\n          timestamp: new Date().toISOString()\n        }\n      ]\n    };\n\n    // Simulate webhook processing\n    logger.info(\"Processing test webhook for repository: testuser/test-repo (main)\");\n\n    res.json({\n      success: true,\n      message: \"Webhook test processed successfully\",\n      payload: mockPayload\n    });\n  } catch (error) {\n    logger.error(\"Error in GitHub debug test-webhook endpoint:\", error);\n    res.status(500).json({ error: \"Failed to process test webhook\" });\n  }\n});\n\n// Get recent GitHub activity\nrouter.get(\"/recent-activity\", async (req, res) => {\n  try {\n    // In a real implementation, you'd fetch this from a database\n    // For now, just return mock data\n    const mockActivity = [\n      {\n        type: \"oauth\",\n        description: \"Connected GitHub account\",\n        timestamp: new Date(Date.now() - 3600000).toISOString() // 1 hour ago\n      },\n      {\n        type: \"deploy\",\n        description: \"Deployed repository: user/repo\",\n        timestamp: new Date(Date.now() - 7200000).toISOString() // 2 hours ago\n      },\n      {\n        type: \"webhook\",\n        description: \"Received push webhook from user/repo\",\n        timestamp: new Date(Date.now() - 86400000).toISOString() // 1 day ago\n      }\n    ];\n\n    res.json(mockActivity);\n  } catch (error) {\n    logger.error(\"Error in GitHub debug recent-activity endpoint:\", error);\n    res.status(500).json({ error: \"Failed to get recent activity\" });\n  }\n});\n\nexport default router;\n", "import express from \"express\";\nimport { requireAuth } from \"../auth\";\nimport { logger } from \"../utils/logger\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { deployments } from \"../db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport * as githubApi from \"../services/github-api\";\nimport * as digitalOcean from \"../services/digital-ocean\";\n\nconst router = express.Router();\n\n// Require authentication for all routes\nrouter.use(requireAuth);\n\n// Get all deployments for the authenticated user\nrouter.get(\"/\", async (req, res) => {\n  try {\n    logger.info(`Retrieving deployments for user ${req.user.id}`);\n\n    try {\n      // Use safe query that doesn't rely on specific column names\n      // by accessing through db.query.deployments instead of raw select\n      const userDeployments = await db.query.deployments.findMany({\n        where: eq(deployments.userId, req.user.id)\n      });\n\n      logger.info(`Retrieved ${userDeployments.length} deployments for user ${req.user.id}`);\n      res.json(userDeployments);\n    } catch (dbError) {\n      // Fallback to return empty array instead of error\n      logger.warning(`Database schema issue detected, returning empty deployments array: ${dbError.message}`);\n      res.json([]);\n    }\n  } catch (error) {\n    logger.error(\"Error retrieving deployments:\", error);\n    res.status(500).json({ error: \"Failed to retrieve deployments\" });\n  }\n});\n\n// Create a new deployment from GitHub repository\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const { repoFullName, branch = \"main\" } = req.body;\n\n    if (!repoFullName) {\n      return res.status(400).json({ error: \"Repository name is required\" });\n    }\n\n    logger.info(`Starting deployment of ${repoFullName} (${branch}) for user ${req.user.id}`);\n\n    // Get GitHub token from user record\n    const githubToken = req.user.githubToken;\n\n    if (!githubToken) {\n      return res.status(401).json({ error: \"GitHub account not connected\" });\n    }\n\n    // Parse repo owner and name from full name (owner/repo)\n    const [owner, repo] = repoFullName.split('/');\n\n    if (!owner || !repo) {\n      return res.status(400).json({ error: \"Invalid repository name format\" });\n    }\n\n    // Fetch repository details from GitHub\n    const repository = await githubApi.getRepository(githubToken, owner, repo);\n\n    // Start DigitalOcean App Platform deployment\n    const deploymentResult = await digitalOcean.deployGitHubRepo({\n      userId: req.user.id,\n      repositoryName: repo,\n      repositoryOwner: owner,\n      branch,\n      githubToken,\n      region: req.body.region || \"nyc\",\n      environmentVariables: req.body.env || {}\n    });\n\n    // Store deployment in database\n    const newDeployment = await db.insert(deployments).values({\n      userId: req.user.id,\n      repositoryName: repository.name, // Changed from name to repositoryName\n      repositoryUrl: repository.html_url,\n      branch,\n      status: \"in_progress\",\n      deployedAt: new Date().toISOString(),\n      region: req.body.region || \"nyc\",\n      doAppId: deploymentResult.app_id?.toString(),\n      deploymentUrl: deploymentResult.live_url || null\n    }).returning();\n\n    logger.success(`Deployment initiated for ${repoFullName} (${branch})`);\n    res.status(201).json(newDeployment[0]);\n  } catch (error) {\n    logger.error(`Error deploying repository:`, error);\n    res.status(500).json({\n      error: \"Failed to deploy repository\",\n      details: error.message\n    });\n  }\n});\n\n// Get deployment status\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const deploymentId = req.params.id;\n\n    const deployment = await db.select()\n      .from(deployments)\n      .where(eq(deployments.id, deploymentId))\n      .limit(1);\n\n    if (deployment.length === 0) {\n      return res.status(404).json({ error: \"Deployment not found\" });\n    }\n\n    // Check if deployment belongs to user\n    if (deployment[0].userId !== req.user.id) {\n      return res.status(403).json({ error: \"You do not have permission to view this deployment\" });\n    }\n\n    // If DigitalOcean App ID exists, get live status\n    if (deployment[0].doAppId) {\n      const status = await digitalOcean.getAppStatus(deployment[0].doAppId);\n\n      // Update status in database if changed\n      if (status && status !== deployment[0].status) {\n        await db.update(deployments)\n          .set({ status })\n          .where(eq(deployments.id, deploymentId));\n\n        deployment[0].status = status;\n      }\n    }\n\n    res.json(deployment[0]);\n  } catch (error) {\n    logger.error(\"Error retrieving deployment:\", error);\n    res.status(500).json({ error: \"Failed to retrieve deployment\" });\n  }\n});\n\n// Redeploy an existing deployment\nrouter.post(\"/:id/redeploy\", async (req, res) => {\n  try {\n    // Use direct query instead of the query builder\n    const [deployment] = await db.select()\n      .from(deployments)\n      .where(eq(deployments.id, parseInt(req.params.id, 10)))\n      .limit(1);\n\n    if (!deployment || deployment.userId !== req.user.id) {\n      return res.status(404).json({ error: \"Deployment not found\" });\n    }\n\n    logger.info(`Redeploying deployment ${deployment.id}`);\n\n    // Trigger redeployment using app platform service\n    await appPlatform.redeployApp(deployment);\n\n    res.json({ message: \"Deployment is redeploying\" });\n  } catch (error) {\n    logger.error(`Error redeploying application: ${error}`);\n    res.status(500).json({ error: \"Failed to redeploy application\" });\n  }\n});\n\n// Restart an existing deployment\nrouter.post(\"/:id/restart\", async (req, res) => {\n  try {\n    // Use direct query instead of the query builder\n    const [deployment] = await db.select()\n      .from(deployments)\n      .where(eq(deployments.id, parseInt(req.params.id, 10)))\n      .limit(1);\n\n    if (!deployment || deployment.userId !== req.user.id) {\n      return res.status(404).json({ error: \"Deployment not found\" });\n    }\n\n    logger.info(`Restarting deployment ${deployment.id}`);\n\n    // Trigger restart using app platform service\n    await appPlatform.restartApp(deployment);\n\n    res.json({ message: \"Deployment is restarting\" });\n  } catch (error) {\n    logger.error(`Error restarting deployment ${req.params.id}:`, error);\n    res.status(500).json({ error: \"Failed to restart deployment\" });\n  }\n});\n\nexport default router;\n", "import { pgTable, serial, integer, text, timestamp, varchar } from 'drizzle-orm/pg-core';\nimport { users } from \"@shared/schema\";\n\n// Define the deployments table schema\nexport const deployments = pgTable(\"deployments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  repositoryName: varchar(\"repository_name\", { length: 255 }).notNull(), // Changed from \"name\" to \"repository_name\"\n  repositoryUrl: varchar(\"repository_url\", { length: 255 }).notNull(),\n  branch: varchar(\"branch\", { length: 100 }).notNull().default(\"main\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"),\n  deployedAt: timestamp(\"deployed_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  region: varchar(\"region\", { length: 50 }).notNull().default(\"nyc\"),\n  doAppId: varchar(\"do_app_id\", { length: 100 }),\n  deploymentUrl: varchar(\"deployment_url\", { length: 255 }),\n  logs: text(\"logs\"),\n  buildTime: integer(\"build_time\"),\n  framework: varchar(\"framework\", { length: 50 }),\n});\n\n// Define GitHub connections table\nexport const githubConnections = pgTable('github_connections', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().unique(),\n  githubUserId: integer('github_user_id'),\n  githubUsername: text('github_username'),\n  accessToken: text('access_token'),\n  refreshToken: text('refresh_token'),\n  scopes: text('scopes'),\n  connectedAt: timestamp('connected_at').defaultNow()\n});\n\n// Add the schema to typescript declarations\ndeclare global {\n  interface DB {\n    deployments: typeof deployments;\n    githubConnections: typeof githubConnections;\n  }\n}\n", "import fetch from 'node-fetch';\nimport { logger } from '../utils/logger';\n\n// Base GitHub API URL\nconst GITHUB_API_BASE = 'https://api.github.com';\n\n// Helper function to make authenticated GitHub API requests\nasync function githubRequest(endpoint: string, token: string, options = {}) {\n  try {\n    const url = `${GITHUB_API_BASE}${endpoint}`;\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `token ${token}`,\n        'Accept': 'application/vnd.github.v3+json',\n        ...options.headers\n      }\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.text();\n      logger.error(`GitHub API error: ${response.status} ${response.statusText}`, errorBody);\n      throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    logger.error(`Error making GitHub request to ${endpoint}:`, error);\n    throw error;\n  }\n}\n\n// Get GitHub user information\nexport async function getGitHubUser(token: string) {\n  return await githubRequest('/user', token);\n}\n\n// Get user's repositories\nexport async function getUserRepositories(token: string) {\n  return await githubRequest('/user/repos?sort=updated&per_page=100', token);\n}\n\n// Get repository branches\nexport async function getRepositoryBranches(token: string, owner: string, repo: string) {\n  return await githubRequest(`/repos/${owner}/${repo}/branches`, token);\n}\n\n// Create a deployment\nexport async function createDeployment(token: string, owner: string, repo: string, ref: string, environment = 'production') {\n  return await githubRequest(`/repos/${owner}/${repo}/deployments`, token, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      ref,\n      environment,\n      auto_merge: false,\n      required_contexts: []\n    })\n  });\n}\n\n// Get deployment status\nexport async function getDeploymentStatus(token: string, owner: string, repo: string, deploymentId: number) {\n  return await githubRequest(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`, token);\n}\n\n// Get repository content\nexport async function getRepositoryContent(token: string, owner: string, repo: string, path: string) {\n  return await githubRequest(`/repos/${owner}/${repo}/contents/${path}`, token);\n}\n\n// Create or update a file in the repository\nexport async function createOrUpdateFile(\n  token: string,\n  owner: string,\n  repo: string,\n  path: string,\n  content: string,\n  message: string,\n  branch: string,\n  sha?: string\n) {\n  const endpoint = `/repos/${owner}/${repo}/contents/${path}`;\n  const body: any = {\n    message,\n    content: Buffer.from(content).toString('base64'),\n    branch\n  };\n\n  if (sha) {\n    body.sha = sha;\n  }\n\n  return await githubRequest(endpoint, token, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body)\n  });\n}\n\n// Create a repository webhook\nexport async function createWebhook(token: string, owner: string, repo: string, webhookUrl: string, secret: string) {\n  return await githubRequest(`/repos/${owner}/${repo}/hooks`, token, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      name: 'web',\n      active: true,\n      events: ['push', 'pull_request'],\n      config: {\n        url: webhookUrl,\n        content_type: 'json',\n        secret\n      }\n    })\n  });\n}\n\n// Get repository details\nexport async function getRepository(token: string, owner: string, repo: string) {\n  return await githubRequest(`/repos/${owner}/${repo}`, token);\n}\n\n// Get repository contents\nexport async function getRepositoryContents(token: string, owner: string, repo: string, path: string = '') {\n  return await githubRequest(`/repos/${owner}/${repo}/contents/${path}`, token);\n}\n\n// Check if repository has certain file (like package.json, requirements.txt, etc.)\nexport async function checkFileExists(token: string, owner: string, repo: string, filepath: string) {\n  try {\n    const result = await githubRequest(`/repos/${owner}/${repo}/contents/${filepath}`, token);\n    return !!result;\n  } catch (error) {\n    if (error.message.includes(\"404\")) {\n      return false;\n    }\n    throw error;\n  }\n}\n\n// Detect repository language/framework\nexport async function detectRepositoryFramework(token: string, owner: string, repo: string) {\n  try {\n    // Check for common project files to determine framework\n    const hasPackageJson = await checkFileExists(token, owner, repo, 'package.json');\n    const hasRequirementsTxt = await checkFileExists(token, owner, repo, 'requirements.txt');\n    const hasGemfile = await checkFileExists(token, owner, repo, 'Gemfile');\n    const hasComposerJson = await checkFileExists(token, owner, repo, 'composer.json');\n    const hasGoMod = await checkFileExists(token, owner, repo, 'go.mod');\n\n    if (hasPackageJson) {\n      // Further check for specific JS frameworks\n      const hasNextConfig = await checkFileExists(token, owner, repo, 'next.config.js');\n      const hasViteConfig = await checkFileExists(token, owner, repo, 'vite.config.js');\n      const hasNuxtConfig = await checkFileExists(token, owner, repo, 'nuxt.config.js');\n\n      if (hasNextConfig) return 'nextjs';\n      if (hasNuxtConfig) return 'nuxt';\n      if (hasViteConfig) return 'vite';\n      return 'nodejs';\n    }\n\n    if (hasRequirementsTxt) {\n      const hasDjango = await checkFileExists(token, owner, repo, 'manage.py');\n      const hasFlask = await checkFileExists(token, owner, repo, 'app.py') ||\n        await checkFileExists(token, owner, repo, 'wsgi.py');\n\n      if (hasDjango) return 'django';\n      if (hasFlask) return 'flask';\n      return 'python';\n    }\n\n    if (hasGemfile) return 'ruby';\n    if (hasComposerJson) return 'php';\n    if (hasGoMod) return 'golang';\n\n    // Default to static if we can't determine\n    return 'static';\n  } catch (error) {\n    logger.error(`Error detecting repository framework: ${error}`);\n    // Default to static if detection fails\n    return 'static';\n  }\n}\n", "import fetch from \"node-fetch\";\nimport { logger } from \"../utils/logger\";\n\nconst DO_API_KEY = process.env.DIGITAL_OCEAN_API_KEY;\nconst DO_API_URL = \"https://api.digitalocean.com/v2\";\n\nif (!DO_API_KEY) {\n  logger.warning(\"DIGITAL_OCEAN_API_KEY environment variable not set\");\n}\n\n/**\n * Deploy a GitHub repository to DigitalOcean App Platform\n */\nexport async function deployGitHubRepo({\n  userId,\n  repositoryName,\n  repositoryOwner,\n  branch = \"main\",\n  githubToken,\n  region = \"nyc\",\n  environmentVariables = {}\n}) {\n  try {\n    logger.info(`Deploying ${repositoryOwner}/${repositoryName} (${branch}) to DigitalOcean App Platform`);\n\n    const appName = `${repositoryName.toLowerCase()}-${Math.floor(Date.now() / 1000)}`;\n\n    // Format env vars for DO API\n    const formattedEnvVars = Object.entries(environmentVariables).map(([key, value]) => ({\n      key,\n      value: String(value),\n      scope: \"RUN_AND_BUILD_TIME\",\n      type: \"GENERAL\"\n    }));\n\n    // Create app specification\n    const appSpec = {\n      name: appName,\n      region,\n      services: [\n        {\n          name: repositoryName,\n          github: {\n            repo: `${repositoryOwner}/${repositoryName}`,\n            branch,\n            deploy_on_push: true\n          },\n          source_dir: \"/\",\n          envs: formattedEnvVars,\n          instance_count: 1,\n          instance_size_slug: \"basic-xs\"\n        }\n      ],\n      github: {\n        // Using deployed user's GitHub token for repo access\n        repo: `${repositoryOwner}/${repositoryName}`,\n        branch,\n        deploy_on_push: true\n      }\n    };\n\n    // Make request to DigitalOcean API\n    const response = await fetch(`${DO_API_URL}/apps`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${DO_API_KEY}`\n      },\n      body: JSON.stringify(appSpec)\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      logger.error(`DigitalOcean API error (${response.status}):`, errorData);\n      throw new Error(`DigitalOcean API error: ${errorData.message || response.statusText}`);\n    }\n\n    const data = await response.json();\n    logger.success(`Successfully deployed app to DigitalOcean. App ID: ${data.app.id}`);\n\n    return {\n      app_id: data.app.id,\n      live_url: data.app.live_url,\n      created_at: data.app.created_at,\n      default_ingress: data.app.default_ingress\n    };\n  } catch (error) {\n    logger.error(\"Error deploying to DigitalOcean:\", error);\n    throw error;\n  }\n}\n\n/**\n * Get status of a DigitalOcean App Platform app\n */\nexport async function getAppStatus(appId) {\n  try {\n    const response = await fetch(`${DO_API_URL}/apps/${appId}`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_API_KEY}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      logger.error(`Error fetching app status (${response.status}):`, errorData);\n      return \"unknown\";\n    }\n\n    const data = await response.json();\n    return data.app.phase || \"unknown\";\n  } catch (error) {\n    logger.error(`Error getting app status for ${appId}:`, error);\n    return \"error\";\n  }\n}\n\n/**\n * Get all DigitalOcean regions\n */\nexport async function getRegions() {\n  try {\n    const response = await fetch(`${DO_API_URL}/regions`, {\n      headers: {\n        \"Authorization\": `Bearer ${DO_API_KEY}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      logger.error(`Error fetching regions (${response.status}):`, errorData);\n      throw new Error(`DigitalOcean API error: ${errorData.message || response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.regions;\n  } catch (error) {\n    logger.error(\"Error fetching DigitalOcean regions:\", error);\n    throw error;\n  }\n}\n\n/**\n * Delete a DigitalOcean App Platform app\n */\nexport async function deleteApp(appId) {\n  try {\n    const response = await fetch(`${DO_API_URL}/apps/${appId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Authorization\": `Bearer ${DO_API_KEY}`\n      }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      logger.error(`Error deleting app (${response.status}):`, errorData);\n      throw new Error(`DigitalOcean API error: ${errorData.message || response.statusText}`);\n    }\n\n    return true;\n  } catch (error) {\n    logger.error(`Error deleting app ${appId}:`, error);\n    throw error;\n  }\n}\n", "import express from \"express\";\nimport fetch from \"node-fetch\";\nimport { requireAuth } from \"../auth\";\nimport { logger } from \"../utils/logger\";\n\nconst router = express.Router();\n\n// Require authentication for all routes\nrouter.use(requireAuth);\n\n// Get available regions for app platform\nrouter.get(\"/regions\", async (req, res) => {\n  try {\n    // In production, this would call the DigitalOcean API\n    const regions = [\n      {\n        id: \"ams\",\n        slug: \"ams\",\n        name: \"Amsterdam, Netherlands\",\n        available: true,\n        data_centers: [\"ams3\"],\n        default: false\n      },\n      {\n        id: \"nyc\",\n        slug: \"nyc\",\n        name: \"New York, United States\",\n        available: true,\n        data_centers: [\"nyc1\", \"nyc3\"],\n        default: true\n      },\n      {\n        id: \"fra\",\n        slug: \"fra\",\n        name: \"Frankfurt, Germany\",\n        available: true,\n        data_centers: [\"fra1\"],\n        default: false\n      },\n      {\n        id: \"lon\",\n        slug: \"lon\",\n        name: \"London, United Kingdom\",\n        available: true,\n        data_centers: [\"lon1\"],\n        default: false\n      },\n      {\n        id: \"sfo\",\n        slug: \"sfo\",\n        name: \"San Francisco, United States\",\n        available: true,\n        data_centers: [\"sfo3\"],\n        default: false\n      },\n      {\n        id: \"sgp\",\n        slug: \"sgp\",\n        name: \"Singapore\",\n        available: true,\n        data_centers: [\"sgp1\"],\n        default: false\n      }\n    ];\n\n    res.json(regions);\n  } catch (error) {\n    logger.error(\"Error fetching app platform regions:\", error);\n    res.status(500).json({ error: \"Failed to fetch regions\" });\n  }\n});\n\n// Get available sizes for app platform\nrouter.get(\"/sizes\", async (req, res) => {\n  try {\n    // In production, this would call the DigitalOcean API\n    const sizes = [\n      {\n        slug: \"basic-xxs\",\n        name: \"Basic XXS\",\n        cpu: 1,\n        memory_bytes: 512 * 1024 * 1024,\n        usd_per_month: 5,\n        usd_per_second: 0.0000019,\n        tier_slug: \"basic\",\n        tier_upgrade_to: \"professional-xs\",\n        included_bandwidth_bytes: 40 * 1024 * 1024 * 1024,\n      },\n      {\n        slug: \"basic-xs\",\n        name: \"Basic XS\",\n        cpu: 1,\n        memory_bytes: 1024 * 1024 * 1024,\n        usd_per_month: 10,\n        usd_per_second: 0.0000038,\n        tier_slug: \"basic\",\n        tier_upgrade_to: \"professional-xs\",\n        included_bandwidth_bytes: 80 * 1024 * 1024 * 1024,\n      },\n      {\n        slug: \"basic-s\",\n        name: \"Basic S\",\n        cpu: 1,\n        memory_bytes: 2 * 1024 * 1024 * 1024,\n        usd_per_month: 18,\n        usd_per_second: 0.0000069,\n        tier_slug: \"basic\",\n        tier_upgrade_to: \"professional-xs\",\n        included_bandwidth_bytes: 160 * 1024 * 1024 * 1024,\n      },\n      {\n        slug: \"professional-xs\",\n        name: \"Professional XS\",\n        cpu: 2,\n        memory_bytes: 4 * 1024 * 1024 * 1024,\n        usd_per_month: 40,\n        usd_per_second: 0.000015,\n        tier_slug: \"professional\",\n        tier_upgrade_to: \"professional-s\",\n        included_bandwidth_bytes: 320 * 1024 * 1024 * 1024,\n      }\n    ];\n\n    res.json(sizes);\n  } catch (error) {\n    logger.error(\"Error fetching app platform sizes:\", error);\n    res.status(500).json({ error: \"Failed to fetch sizes\" });\n  }\n});\n\nexport default router;\n", "import express from 'express';\nimport { requireAdmin } from '../auth';\nimport os from 'os';\nimport { logger } from '../utils/logger';\n\nconst router = express.Router();\n\n// Require admin authorization for all routes\nrouter.use(requireAdmin);\n\n// GET environment variables and system info for debugging\nrouter.get('/', async (req, res) => {\n  try {\n    // Get relevant environment variables (redact sensitive values)\n    const env = {\n      NODE_ENV: process.env.NODE_ENV,\n      PORT: process.env.PORT,\n      GITHUB_CLIENT_ID: process.env.GITHUB_CLIENT_ID,\n      GITHUB_REDIRECT_URI: process.env.GITHUB_REDIRECT_URI,\n      // Redact secret\n      GITHUB_CLIENT_SECRET: process.env.GITHUB_CLIENT_SECRET ? '***REDACTED***' : undefined,\n      DATABASE_URL: process.env.DATABASE_URL ? '***REDACTED***' : undefined,\n    };\n\n    // Get system info\n    const system = {\n      platform: process.platform,\n      arch: process.arch,\n      nodeVersion: process.version,\n      memory: {\n        total: `${Math.round(os.totalmem() / (1024 * 1024 * 1024))}GB`,\n        free: `${Math.round(os.freemem() / (1024 * 1024 * 1024))}GB`,\n      },\n      cpus: os.cpus().length,\n      hostname: os.hostname(),\n      uptime: `${Math.round(os.uptime() / 60 / 60)} hours`,\n    };\n\n    res.json({ env, system });\n  } catch (error) {\n    logger.error('Error in API debug route:', error);\n    res.status(500).json({ error: 'Failed to get debug information' });\n  }\n});\n\n// Add a route to test GitHub OAuth URL\nrouter.get('/github-oauth-url', (req, res) => {\n  try {\n    const clientId = process.env.GITHUB_CLIENT_ID?.trim();\n    const redirectUri = process.env.GITHUB_REDIRECT_URI?.trim();\n\n    if (!clientId || !redirectUri) {\n      return res.status(500).json({ error: 'GitHub OAuth configuration is missing' });\n    }\n\n    const authUrl = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=repo,user:email`;\n\n    res.json({ url: authUrl, components: { clientId, redirectUri } });\n  } catch (error) {\n    logger.error('Error generating debug GitHub URL:', error);\n    res.status(500).json({ error: 'Failed to generate GitHub auth URL' });\n  }\n});\n\n// Add this to your existing api-debug.ts routes\nrouter.get('/github-env', (req, res) => {\n  const env = {\n    clientId: process.env.GITHUB_CLIENT_ID ? process.env.GITHUB_CLIENT_ID.substring(0, 5) + '...' : null,\n    redirectUri: process.env.GITHUB_REDIRECT_URI,\n    isClientSecretSet: !!process.env.GITHUB_CLIENT_SECRET,\n    nodeEnv: process.env.NODE_ENV\n  };\n\n  res.json(env);\n});\n\nexport default router;\n", "import express from \"express\";\nimport { requireAuth } from \"../auth\";\nimport { logger } from \"../utils/logger\";\nimport { db } from \"../db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport * as githubApi from \"../services/github-api\";\n\nconst router = express.Router();\n\n// Require authentication for all routes\nrouter.use(requireAuth);\n\n// Get GitHub connection status for the current user\nrouter.get(\"/status\", async (req, res) => {\n  try {\n    const user = req.user;\n\n    // Return connection status\n    res.json({\n      connected: !!user.githubToken,\n      githubUsername: user.githubUsername || null,\n      githubUserId: user.githubUserId || null,\n      connectedAt: user.githubConnectedAt || null\n    });\n  } catch (error) {\n    logger.error(\"Error getting GitHub connection status:\", error);\n    res.status(500).json({ error: \"Failed to get connection status\" });\n  }\n});\n\n// Disconnect GitHub\nrouter.post(\"/disconnect\", async (req, res) => {\n  try {\n    // Update the user's GitHub token to null\n    await db.update(users)\n      .set({\n        githubToken: null,\n        githubUsername: null,\n        githubUserId: null,\n        githubConnectedAt: null\n      })\n      .where(eq(users.id, req.user.id));\n\n    res.json({ success: true });\n  } catch (error) {\n    logger.error(\"Error disconnecting GitHub account:\", error);\n    res.status(500).json({ error: \"Failed to disconnect GitHub account\" });\n  }\n});\n\n// Get connection details\nrouter.get(\"/connection-details\", async (req, res) => {\n  try {\n    const user = await db.query.users.findFirst({\n      where: eq(users.id, req.user.id)\n    });\n\n    if (!user?.githubToken) {\n      return res.json({\n        connected: false\n      });\n    }\n\n    // Fetch user information from GitHub to verify token\n    try {\n      const githubUser = await githubApi.getGitHubUser(user.githubToken);\n\n      return res.json({\n        connected: true,\n        username: githubUser.login,\n        email: githubUser.email,\n        avatarUrl: githubUser.avatar_url,\n        userId: githubUser.id,\n        connectedAt: user.githubConnectedAt || new Date().toISOString(),\n        scopes: [\"repo\", \"user:email\"] // Mocked scopes, in reality would come from headers or token introspection\n      });\n    } catch (error) {\n      logger.error(\"Error fetching GitHub user:\", error);\n      return res.json({\n        connected: false,\n        error: \"Failed to verify GitHub token\"\n      });\n    }\n  } catch (error) {\n    logger.error(\"Error in GitHub connection details:\", error);\n    res.status(500).json({ error: \"Failed to get connection details\" });\n  }\n});\n\n// Save GitHub settings\nrouter.post(\"/settings\", async (req, res) => {\n  try {\n    const { autoDeploy, buildCache } = req.body;\n\n    // In a real implementation, you would store these settings in the database\n    // For now, just log them and return success\n    logger.info(`User ${req.user.id} updated GitHub settings: autoDeploy=${autoDeploy}, buildCache=${buildCache}`);\n\n    res.json({ success: true });\n  } catch (error) {\n    logger.error(\"Error saving GitHub settings:\", error);\n    res.status(500).json({ error: \"Failed to save settings\" });\n  }\n});\n\n// Configure webhooks\nrouter.post(\"/webhooks/configure\", async (req, res) => {\n  try {\n    const { url, secret } = req.body;\n\n    if (!url) {\n      return res.status(400).json({ error: \"Webhook URL is required\" });\n    }\n\n    // In a real implementation, you would store these webhook settings\n    // and configure webhooks for repositories\n    logger.info(`User ${req.user.id} configured GitHub webhook: url=${url}`);\n\n    res.json({ success: true });\n  } catch (error) {\n    logger.error(\"Error configuring webhooks:\", error);\n    res.status(500).json({ error: \"Failed to configure webhooks\" });\n  }\n});\n\n// Get recent activity\nrouter.get(\"/recent-activity\", async (req, res) => {\n  try {\n    // In a real implementation, you would fetch this from a database\n    // For now, just return mock data\n    const mockActivity = [\n      {\n        type: \"oauth\",\n        description: \"Connected GitHub account\",\n        timestamp: new Date(Date.now() - 3600000).toISOString() // 1 hour ago\n      },\n      {\n        type: \"deploy\",\n        description: \"Deployed repository: user/repo\",\n        timestamp: new Date(Date.now() - 7200000).toISOString() // 2 hours ago\n      },\n      {\n        type: \"webhook\",\n        description: \"Received push webhook from user/repo\",\n        timestamp: new Date(Date.now() - 86400000).toISOString() // 1 day ago\n      }\n    ];\n\n    res.json(mockActivity);\n  } catch (error) {\n    logger.error(\"Error getting recent activity:\", error);\n    res.status(500).json({ error: \"Failed to get recent activity\" });\n  }\n});\n\nexport default router;\n", "import fs from 'fs';\nimport path from 'path';\nimport { logger } from './logger';\nimport dotenv from 'dotenv';\n\n// Will use .env by default\ndotenv.config();\n\n/**\n * Loads GitHub environment variables from .env first\n */\nexport function loadGitHubCredentials() {\n  try {\n    // Read directly from process.env (populated from .env)\n    const clientId = process.env.GITHUB_CLIENT_ID;\n    const clientSecret = process.env.GITHUB_CLIENT_SECRET;\n    const redirectUri = process.env.GITHUB_REDIRECT_URI;\n\n    // Only log first few characters of client ID for security\n    const displayClientId = clientId ? `${clientId.substring(0, 5)}...` : \"Not set\";\n    const displayClientSecret = clientSecret ? \"Set\" : \"Not set\";\n\n    logger.info(`\uD83D\uDC19 [GitHub] GitHub OAuth Configuration:`);\n    logger.info(`\uD83D\uDC19 [GitHub] - Client ID: ${displayClientId}`);\n    logger.info(`\uD83D\uDC19 [GitHub] - Client Secret: ${displayClientSecret}`);\n    logger.info(`\uD83D\uDC19 [GitHub] - Redirect URI: ${redirectUri}`);\n\n    if (clientId && clientSecret && redirectUri) {\n      // Make sure they're properly trimmed\n      process.env.GITHUB_CLIENT_ID = clientId.trim();\n      process.env.GITHUB_CLIENT_SECRET = clientSecret.trim();\n      process.env.GITHUB_REDIRECT_URI = redirectUri.trim();\n\n      logger.success(\"GitHub OAuth credentials successfully loaded. GitHub integration is available.\");\n      return true;\n    } else {\n      logger.warning(\"GitHub OAuth credentials are missing or incomplete. GitHub integration will not work properly.\");\n      return false;\n    }\n  } catch (error) {\n    logger.error(\"Error loading GitHub credentials:\", error);\n    return false;\n  }\n}\n", "import { pool } from '../db.js';\nimport { logger } from '../utils/logger.js';\n\n/**\n * Creates necessary database tables if they don't exist\n */\nexport async function initializeDatabase() {\n  logger.info('Initializing database tables...');\n\n  try {\n    // Create deployments table if it doesn't exist\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS deployments (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER NOT NULL,\n        server_id INTEGER,\n        repository VARCHAR(255) NOT NULL,\n        branch VARCHAR(100) NOT NULL,\n        status VARCHAR(50) NOT NULL DEFAULT 'pending',\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        deploy_completed_at TIMESTAMP WITH TIME ZONE,\n        deploy_config JSONB DEFAULT '{}'::JSONB,\n        github_webhook_id INTEGER,\n        commit_hash VARCHAR(40),\n        deploy_log TEXT,\n        auto_deploy BOOLEAN DEFAULT FALSE\n      );\n      \n      -- Only create indexes if they don't exist\n      DO $$\n      BEGIN\n        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_deployments_user_id') THEN\n          CREATE INDEX idx_deployments_user_id ON deployments(user_id);\n        END IF;\n        \n        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_deployments_server_id') THEN\n          CREATE INDEX idx_deployments_server_id ON deployments(server_id);\n        END IF;\n        \n        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_deployments_status') THEN\n          CREATE INDEX idx_deployments_status ON deployments(status);\n        END IF;\n      END $$;\n    `);\n\n    logger.success('Deployments table initialized successfully');\n    return true;\n  } catch (error) {\n    logger.error('Error initializing database tables:', error);\n    return false;\n  }\n}\n"],
  "mappings": "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AM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA;AAAA,IAGA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA;AAAA,IAGA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA;AAAA,IAGA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,MA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",
  "names": ["express", "dotenv", "path", "fs", "fileURLToPath", "path", "app", "fs", "path", "timestamp", "express", "path", "fileURLToPath", "__filename", "__dirname", "timestamp", "eq", "sql", "server", "session", "app", "session", "text", "firewall", "eq", "sql", "eq", "eq", "servers", "express", "router", "express", "volumes", "app", "eq", "servers", "volumes", "section", "ticket", "sql", "snapshots", "server", "path", "fileURLToPath", "express", "__dirname", "app", "createServer", "eq", "adminMiddleware", "app", "users", "servers", "ipBans", "volumes", "express", "fetch", "eq", "eq", "fetch", "eq", "fetch", "router", "express", "clientId", "clientSecret", "express", "crypto", "eq", "fetch", "eq", "fetch", "router", "express", "crypto", "eq", "express", "eq", "fetch", "router", "express", "express", "pgTable", "serial", "integer", "text", "timestamp", "pgTable", "serial", "integer", "timestamp", "text", "eq", "fetch", "fetch", "fetch", "fetch", "router", "express", "eq", "express", "router", "express", "express", "os", "router", "express", "os", "clientId", "express", "eq", "router", "express", "eq", "clientId", "clientSecret", "__filename", "fileURLToPath", "__dirname", "path", "dotenv", "express", "eq", "fs"]
}
